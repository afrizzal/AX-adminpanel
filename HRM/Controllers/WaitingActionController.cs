using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using HRM.Models;
using System.Threading.Tasks;
using System.IO;
using System.Security.AccessControl;
using CrystalDecisions.CrystalReports.Engine;
using System.Net.Mail;

namespace HRM.Controllers
{
    public class WaitingActionController : Controller
    {
        private HRMEntities db = new HRMEntities();
        private string CompnyCode = System.Configuration.ConfigurationManager.AppSettings["CompnyCode"];
        private string NumberCounter = System.Configuration.ConfigurationManager.AppSettings["DefaultFormatCounterLong"];
        private string AutoEmail = System.Configuration.ConfigurationManager.AppSettings["AutoEmail"];
        private string sSql = "";

        public WaitingActionController()
        {
            db.Database.CommandTimeout = 0;
        }

        public class waitactmodel
        {
            public int mstoid { get; set; }
            public string cmpcode { get; set; }
            public string tblname { get; set; }
        }

        public class modelforapp
        {
            public string caption { get; set; }
            public string value { get; set; }
        }

        // GET: WaitingAction
        public ActionResult Index(string id)
        {
            if (Session["UserID"] == null)
                return RedirectToAction("Login", "Profile");

            ViewBag.TransName = db.Database.SqlQuery<string>("SELECT DISTINCT apppersonnote FROM QL_approvalperson WHERE tablename='" + id + "'").FirstOrDefault();
            ViewBag.tblname = id;
            return View();
        }

        [HttpPost]
        public ActionResult GetDataList(string tblname)
        {
            var msg = "";
            Session["QL_trntransdtl_approval"] = null;

            if (tblname == "ql_prrawmst")
            {
                sSql = "SELECT h.cmpcode, prrawmstoid [Draft No.], CONVERT(VARCHAR(10), prrawdate, 101) [PR Date], deptname [Department], prrawmstnote [Note], a.approvaluser [Approval User], h.createuser [Create User], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_prrawmst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=prrawmstoid INNER JOIN QL_mstdept d ON d.cmpcode=h.cmpcode AND d.deptoid=h.deptoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND prrawmststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "ql_prgenmst")
            {
                sSql = "SELECT h.cmpcode, prgenmstoid [Draft No.], CONVERT(VARCHAR(10), prgendate, 101) [PR Date], deptname [Department], prgenmstnote [Note], a.approvaluser [Approval User], h.createuser [Create User], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_prgenmst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=prgenmstoid INNER JOIN QL_mstdept d ON d.cmpcode=h.cmpcode AND d.deptoid=h.deptoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND prgenmststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "ql_prspmst")
            {
                sSql = "SELECT h.cmpcode, prspmstoid [Draft No.], CONVERT(VARCHAR(10), prspdate, 101) [PR Date], (SELECT deptname FROM QL_mstdept d WHERE d.cmpcode=h.cmpcode AND d.deptoid=h.deptoid)  [Department] , prspmstnote [Note], a.approvaluser [Approval User], h.createuser [Create User], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_prspmst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=prspmstoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND prspmststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "ql_pritemmst")
            {
                sSql = "SELECT h.cmpcode, pritemmstoid [Draft No.], CONVERT(VARCHAR(10), pritemdate, 101) [PR Date], deptname [Department], pritemmstnote [Note], a.approvaluser [Approval User], h.createuser [Create User], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_pritemmst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=pritemmstoid INNER JOIN QL_mstdept d ON d.cmpcode=h.cmpcode AND d.deptoid=h.deptoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND pritemmststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "ql_prassetmst")
            {
                sSql = "SELECT h.cmpcode, prassetmstoid [Draft No.], CONVERT(VARCHAR(10), prassetdate, 101) [PR Date], deptname [Department], prassetmstnote [Note], a.approvaluser [Approval User], h.createuser [Create User], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_prassetmst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=prassetmstoid INNER JOIN QL_mstdept d ON d.cmpcode=h.cmpcode AND d.deptoid=h.deptoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND prassetmststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "ql_trnporawmst")
            {
                sSql = "SELECT po.cmpcode, po.porawmstoid AS [Draft No.], po.porawno, CONVERT(VARCHAR(10), po.porawdate, 101) AS [PO Date], s.suppname AS [Supplier], po.porawmstnote AS [PO Note], ISNULL(po.approvalcode,'-') AS [Approval User], po.createuser AS [Create User], ap.requestuser AS [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnporawmst po INNER JOIN QL_mstsupp s ON po.suppoid=s.suppoid INNER JOIN QL_approval ap ON po.cmpcode=ap.cmpcode AND po.porawmstoid=ap.oid AND ap.statusrequest='New' WHERE ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname +  "' AND po.porawmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnpogenmst")
            {
                sSql = "SELECT po.cmpcode, po.pogenmstoid AS [Draft No.], po.pogenno, CONVERT(VARCHAR(10), po.pogendate, 101) AS [PO Date], s.suppname AS [Supplier], po.pogenmstnote AS [PO Note], ISNULL(po.approvalcode,'-') AS [Approval User], po.createuser AS [Create User], ap.requestuser AS [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnpogenmst po INNER JOIN QL_mstsupp s ON po.suppoid=s.suppoid INNER JOIN QL_approval ap ON po.cmpcode=ap.cmpcode AND po.pogenmstoid=ap.oid AND ap.statusrequest='New' WHERE ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname +  "' AND po.pogenmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnpospmst")
            {
                sSql = "SELECT po.cmpcode, po.pospmstoid AS [Draft No.], po.pospno, CONVERT(VARCHAR(10), po.pospdate, 101) AS [PO Date], s.suppname AS [Supplier], po.pospmstnote AS [PO Note], ISNULL(po.approvalcode,'-') AS [Approval User], po.createuser AS [Create User], ap.requestuser AS [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnpospmst po INNER JOIN QL_mstsupp s ON po.suppoid=s.suppoid INNER JOIN QL_approval ap ON po.cmpcode=ap.cmpcode AND po.pospmstoid=ap.oid AND ap.statusrequest='New' WHERE ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname +  "' AND po.pospmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnpoitemmst")
            {
                sSql = "SELECT po.cmpcode, po.poitemmstoid AS [Draft No.], po.poitemno, CONVERT(VARCHAR(10), po.poitemdate, 101) AS [PO Date], s.suppname AS [Supplier], po.poitemmstnote AS [PO Note], ISNULL(po.approvalcode,'-') AS [Approval User], po.createuser AS [Create User], ap.requestuser AS [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnpoitemmst po INNER JOIN QL_mstsupp s ON po.suppoid=s.suppoid INNER JOIN QL_approval ap ON po.cmpcode=ap.cmpcode AND po.poitemmstoid=ap.oid AND ap.statusrequest='New' WHERE ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname +  "' AND po.poitemmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnpoassetmst")
            {
                sSql = "SELECT po.cmpcode, po.poassetmstoid AS [Draft No.], po.poassetno, CONVERT(VARCHAR(10), po.poassetdate, 101) AS [PO Date], s.suppname AS [Supplier], po.poassetmstnote AS [PO Note], ISNULL(po.approvalcode,'-') AS [Approval User], po.createuser AS [Create User], ap.requestuser AS [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnpoassetmst po INNER JOIN QL_mstsupp s ON po.suppoid=s.suppoid INNER JOIN QL_approval ap ON po.cmpcode=ap.cmpcode AND po.poassetmstoid=ap.oid AND ap.statusrequest='New' WHERE ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND po.poassetmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnposervicemst")
            {
                sSql = "SELECT po.cmpcode, po.poservicemstoid AS [Draft No.], CONVERT(VARCHAR(10), po.poservicedate, 101) AS [PO Date], s.suppname AS [Supplier], po.poservicemstnote AS [PO Note], ISNULL(po.approvalcode, '-') AS [Approval User], po.createuser AS [Create User], ap.requestuser AS [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnposervicemst po INNER JOIN QL_mstsupp s ON po.suppoid=s.suppoid INNER JOIN QL_approval ap ON po.cmpcode=ap.cmpcode AND po.poservicemstoid=ap.oid AND ap.statusrequest='New' WHERE ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND po.poservicemststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnposubconmst")
            {
                sSql = "SELECT po.cmpcode, po.posubconmstoid AS [Draft No.], CONVERT(VARCHAR(10), po.posubcondate, 101) AS [PO Date], s.suppname AS [Supplier], po.posubconmstnote AS [PO Note], ISNULL(po.approvalcode, '-') AS [Approval User], po.createuser AS [Create User], ap.requestuser AS [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnposubconmst po INNER JOIN QL_mstsupp s ON po.suppoid=s.suppoid INNER JOIN QL_approval ap ON po.cmpcode=ap.cmpcode AND po.posubconmstoid=ap.oid AND ap.statusrequest='New' WHERE ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND po.posubconmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnpretrawmst")
            {
                sSql = "SELECT h.cmpcode, pretrawmstoid [Draft No.], CONVERT(VARCHAR(10), pretrawdate, 101) [Return Date], suppname [Supplier], pretrawmstnote [Note], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_trnpretrawmst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=pretrawmstoid INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND pretrawmststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "ql_trnpretgenmst")
            {
                sSql = "SELECT h.cmpcode, pretgenmstoid [Draft No.], CONVERT(VARCHAR(10), pretgendate, 101) [Return Date], suppname [Supplier], pretgenmstnote [Note], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_trnpretgenmst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=pretgenmstoid INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND pretgenmststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "ql_trnpretspmst")
            {
                sSql = "SELECT h.cmpcode, pretspmstoid [Draft No.], CONVERT(VARCHAR(10), pretspdate, 101) [Return Date], suppname [Supplier], pretspmstnote [Note], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_trnpretspmst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=pretspmstoid INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND pretspmststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "ql_trnpretassetmst")
            {
                sSql = "SELECT h.cmpcode, pretassetmstoid [Draft No.], CONVERT(VARCHAR(10), pretassetdate, 101) [Return Date], suppname [Supplier], pretassetmstnote [Note], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_trnpretassetmst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=pretassetmstoid INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND pretassetmststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "ql_trnpretitemmst")
            {
                sSql = "SELECT h.cmpcode, pretitemmstoid [Draft No.], CONVERT(VARCHAR(10), pretitemdate, 101) [Return Date], suppname [Supplier], pretitemmstnote [Note], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_trnpretitemmst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=pretitemmstoid INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND pretitemmststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "ql_trnpretservicemst")
            {
                sSql = "SELECT h.cmpcode, pretservicemstoid [Draft No.], CONVERT(VARCHAR(10), pretservicedate, 101) [Return Date], suppname [Supplier], pretservicemstnote [Note], a.requestuser [Request User], CONVERT(VARCHAR(10), a.requestdate, 101) [Request Date] FROM QL_trnpretservicemst h INNER JOIN QL_approval a ON a.cmpcode=h.cmpcode AND a.oid=pretservicemstoid INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE a.statusrequest='New' AND a.event='In Approval' AND a.approvaluser='" + Session["UserID"].ToString() + "' AND a.tablename='" + tblname + "' AND pretservicemststatus='In Approval' ORDER BY a.requestdate DESC";
            } else if (tblname == "/*QL_trnaprawmst*/QL_trnbelimst")
            {
                sSql = "SELECT DISTINCT ap.cmpcode, ap.aprawmstoid AS [Draft No.], ap.aprawno AS [A/P No.], CONVERT(VARCHAR(10), ap.aprawdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=aprawpaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),aprawdate), 101) [Due Date], CONVERT(VARCHAR(10), ap.aprawdatetakegiro, 101) AS [Date Take Giro], s.suppname AS [Supplier], ap.aprawmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnaprawmst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.aprawmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.aprawpaytypeoid AND g.gengroup='PAYMENT TYPE' INNER JOIN QL_mstcurr cu ON cu.curroid=ap.curroid WHERE apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND ap.aprawmststatus='In Approval' ORDER BY [Request Date] DESC"; 
            } else if (tblname == "/*QL_trnapgenmst*/QL_trnbelimst")
            {
                sSql = "SELECT DISTINCT ap.cmpcode, ap.apgenmstoid AS [Draft No.], ap.apgenno AS [A/P No.], CONVERT(VARCHAR(10), ap.apgendate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apgenpaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apgendate), 101) [Due Date], CONVERT(VARCHAR(10), ap.apgendatetakegiro, 101) AS [Date Take Giro], s.suppname AS [Supplier], ap.apgenmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapgenmst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apgenmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apgenpaytypeoid AND g.gengroup='PAYMENT TYPE' INNER JOIN QL_mstcurr cu ON cu.curroid=ap.curroid WHERE apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND ap.apgenmststatus='In Approval' ORDER BY [Request Date] DESC"; 
            } else if (tblname == "/*QL_trnapspmst*/QL_trnbelimst")
            {
                sSql = "SELECT DISTINCT ap.cmpcode, ap.apspmstoid AS [Draft No.], ap.apspno AS [A/P No.], CONVERT(VARCHAR(10), ap.apspdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apsppaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apspdate), 101) [Due Date], CONVERT(VARCHAR(10), ap.apspdatetakegiro, 101) AS [Date Take Giro], s.suppname AS [Supplier], ap.apspmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapspmst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apspmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apsppaytypeoid AND g.gengroup='PAYMENT TYPE' INNER JOIN QL_mstcurr cu ON cu.curroid=ap.curroid WHERE apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND ap.apspmststatus='In Approval' ORDER BY [Request Date] DESC"; 
            } else if (tblname == "/*QL_trnapitemmst*/QL_trnbelimst")
            {
                sSql = "SELECT DISTINCT ap.cmpcode, ap.apitemmstoid AS [Draft No.], ap.apitemno AS [A/P No.], CONVERT(VARCHAR(10), ap.apitemdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apitempaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apitemdate), 101) [Due Date], CONVERT(VARCHAR(10), ap.apitemdatetakegiro, 101) AS [Date Take Giro], s.suppname AS [Supplier], ap.apitemmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapitemmst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apitemmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apitempaytypeoid AND g.gengroup='PAYMENT TYPE' INNER JOIN QL_mstcurr cu ON cu.curroid=ap.curroid WHERE apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND ap.apitemmststatus='In Approval' ORDER BY [Request Date] DESC";
            } else if (tblname == "/*QL_trnapassetmst*/QL_trnbelimst")
            {
                sSql = "SELECT DISTINCT ap.cmpcode, ap.apassetmstoid AS [Draft No.], ap.apassetno AS [A/P No.], CONVERT(VARCHAR(10), ap.apassetdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apassetpaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apassetdate), 101) [Due Date], CONVERT(VARCHAR(10), ap.apassetdatetakegiro, 101) AS [Date Take Giro], s.suppname AS [Supplier], ap.apassetmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapassetmst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apassetmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apassetpaytypeoid AND g.gengroup='PAYMENT TYPE' INNER JOIN QL_mstcurr cu ON cu.curroid=ap.curroid WHERE apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND ap.apassetmststatus='In Approval' ORDER BY [Request Date] DESC";
            } else if (tblname == "ql_trnapservicemst")
            {
                sSql = "SELECT DISTINCT ap.cmpcode, ap.apservicemstoid AS [Draft No.], ap.apserviceno AS [A/P No.], CONVERT(VARCHAR(10), ap.apservicedate, 101) AS [A/P Date], g.gendesc AS [Payment Type], CONVERT(VARCHAR(10), DATEADD(day, (CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END), apservicedate), 101) [Due Date], CONVERT(VARCHAR(10), ap.apservicedatetakegiro, 101) AS [Date Take Giro], s.suppname AS [Supplier], ap.apservicemstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM QL_trnapservicemst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apservicemstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apservicepaytypeoid AND g.gengroup='PAYMENT TYPE' INNER JOIN QL_mstcurr cu ON cu.curroid=ap.curroid WHERE apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND ap.apservicemststatus='In Approval' ORDER BY [Request Date] DESC";
            } else if (tblname == "/*QL_trnapothermst*/QL_trnbelimst")
            {
                sSql = "SELECT DISTINCT ap.cmpcode, ap.apothermstoid AS [Draft No.], ap.apotherno AS [A/P No.], CONVERT(VARCHAR(10), ap.apotherdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apotherpaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apotherdate), 101) [Due Date], CONVERT(VARCHAR(10), ap.apotherdatetakegiro, 101) AS [Date Take Giro], s.suppname AS [Supplier], ap.apothermstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapothermst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apothermstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apotherpaytypeoid AND g.gengroup='PAYMENT TYPE' INNER JOIN QL_mstcurr cu ON cu.curroid=ap.curroid WHERE apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND ap.apothermststatus='In Approval' ORDER BY [Request Date] DESC";
            } else if (tblname == "/*QL_trnapcashbankmst*/QL_trncashbankmst")
            {
                sSql = "SELECT DISTINCT ap.cmpcode, ap.apcashbankmstoid AS [Draft No.], ap.apcashbankno AS [A/P No.], CONVERT(VARCHAR(10), ap.apcashbankdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apcashbankpaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apcashbankdate), 101) [Due Date], CONVERT(VARCHAR(10), ap.apcashbankdatetakegiro, 101) AS [Date Take Giro], s.suppname AS [Supplier], ap.apcashbankmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapcashbankmst*/QL_trncashbankmst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apcashbankmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apcashbankpaytypeoid AND g.gengroup='PAYMENT TYPE' INNER JOIN QL_mstcurr cu ON cu.curroid=ap.curroid WHERE apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND ap.apcashbankmststatus='In Approval' ORDER BY [Request Date] DESC";
            }
            else if (tblname == "ql_trnsorawmst")
            {
                sSql = "SELECT so.cmpcode, so.sorawmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.sorawdate, 101) AS [SO Date], c.custname [Customer], so.sorawmstnote [SO Note], so.createuser [Create user], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsorawmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_approval ap ON so.sorawmstoid=ap.oid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND so.sorawmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnsogenmst")
            {
                sSql = "SELECT so.cmpcode, so.sogenmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.sogendate, 101) AS [SO Date], c.custname [Customer], so.sogenmstnote [SO Note], so.createuser [Create user], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsogenmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_approval ap ON so.sogenmstoid=ap.oid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND so.sogenmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnsospmst")
            {
                sSql = "SELECT so.cmpcode, so.sospmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.sospdate, 101) AS [SO Date], c.custname [Customer], so.sospmstnote [SO Note], so.createuser [Create user], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsospmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_approval ap ON so.sospmstoid=ap.oid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND so.sospmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnsoitemmst")
            {
                sSql = "SELECT so.cmpcode, so.soitemmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.soitemdate, 101) AS [SO Date], c.custname [Customer], so.soitemcustref [PO Customer], CONVERT(VARCHAR(10), so.soitemetd, 101) [Delivery Date], so.soitemmstnote [SO Note], so.createuser [Create user], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsoitemmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_approval ap ON so.soitemmstoid=ap.oid WHERE  ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND so.soitemmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnsoassetmst")
            {
                sSql = "SELECT so.cmpcode, so.soassetmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.soassetdate, 101) AS [SO Date], c.custname [Customer], so.soassetcustref [PO Customer], CONVERT(VARCHAR(10), so.soassetetd, 101) [Delivery Date], so.soassetmstnote [SO Note], so.createuser [Create user], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsoassetmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_approval ap ON so.soassetmstoid=ap.oid WHERE  ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND so.soassetmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnsologmst")
            {
                sSql = "SELECT so.cmpcode, so.sologmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.sologdate, 101) AS [SO Date], c.custname [Customer], so.sologcustref [PO Customer], CONVERT(VARCHAR(10), so.sologetd, 101) [Delivery Date], so.sologmstnote [SO Note], so.createuser [Create user], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsologmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_approval ap ON so.sologmstoid=ap.oid WHERE  ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND so.sologmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnsosawnmst")
            {
                sSql = "SELECT so.cmpcode, so.sosawnmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.sosawndate, 101) AS [SO Date], c.custname [Customer], so.sosawncustref [PO Customer], CONVERT(VARCHAR(10), so.sosawnetd, 101) [Delivery Date], so.sosawnmstnote [SO Note], so.createuser [Create user], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsosawnmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_approval ap ON so.sosawnmstoid=ap.oid WHERE  ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND so.sosawnmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnshipmentrawmst")
            {
                sSql = "SELECT sm.cmpcode, sm.shipmentrawmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentrawdate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentrawmstnote [Shipment Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnshipmentrawmst sm INNER JOIN QL_approval ap ON sm.shipmentrawmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sm.shipmentrawmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnshipmentgenmst")
            {
                sSql = "SELECT sm.cmpcode, sm.shipmentgenmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentgendate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentgenmstnote [Shipment Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnshipmentgenmst sm INNER JOIN QL_approval ap ON sm.shipmentgenmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sm.shipmentgenmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnshipmentspmst")
            {
                sSql = "SELECT sm.cmpcode, sm.shipmentspmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentspdate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentspmstnote [Shipment Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnshipmentspmst sm INNER JOIN QL_approval ap ON sm.shipmentspmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sm.shipmentspmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnshipmentitemmst")
            {
                sSql = "SELECT sm.cmpcode, sm.shipmentitemmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentitemdate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentitemmstnote [Shipment Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnshipmentitemmst sm INNER JOIN QL_approval ap ON sm.shipmentitemmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sm.shipmentitemmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnshipmentassetmst")
            {
                sSql = "SELECT sm.cmpcode, sm.shipmentassetmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentassetdate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentassetmstnote [Shipment Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnshipmentassetmst sm INNER JOIN QL_approval ap ON sm.shipmentassetmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sm.shipmentassetmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnshipmentlogmst")
            {
                sSql = "SELECT sm.cmpcode, sm.shipmentlogmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentlogdate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentlogmstnote [Shipment Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnshipmentlogmst sm INNER JOIN QL_approval ap ON sm.shipmentlogmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sm.shipmentlogmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnshipmentsawnmst")
            {
                sSql = "SELECT sm.cmpcode, sm.shipmentsawnmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentsawndate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentsawnmstnote [Shipment Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnshipmentsawnmst sm INNER JOIN QL_approval ap ON sm.shipmentsawnmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sm.shipmentsawnmststatus='In Approval' ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnsretrawmst")
            {
                sSql = "SELECT sretm.cmpcode, sretrawmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretrawdate, 101) AS [Return Date], custname [Customer], sretrawmstnote AS [Return Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsretrawmst sretm INNER JOIN QL_approval ap ON sretrawmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sretrawmststatus='In Approval' ORDER BY CAST(ap.requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnsretgenmst")
            {
                sSql = "SELECT sretm.cmpcode, sretgenmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretgendate, 101) AS [Return Date], custname [Customer], sretgenmstnote AS [Return Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsretgenmst sretm INNER JOIN QL_approval ap ON sretgenmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sretgenmststatus='In Approval' ORDER BY CAST(ap.requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnsretspmst")
            {
                sSql = "SELECT sretm.cmpcode, sretspmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretspdate, 101) AS [Return Date], custname [Customer], sretspmstnote AS [Return Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsretspmst sretm INNER JOIN QL_approval ap ON sretspmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sretspmststatus='In Approval' ORDER BY CAST(ap.requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnsretitemmst")
            {
                sSql = "SELECT sretm.cmpcode, sretitemmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretitemdate, 101) AS [Return Date], custname [Customer], sretitemmstnote AS [Return Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsretitemmst sretm INNER JOIN QL_approval ap ON sretitemmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sretitemmststatus='In Approval' ORDER BY CAST(ap.requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnsretlogmst")
            {
                sSql = "SELECT sretm.cmpcode, sretlogmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretlogdate, 101) AS [Return Date], custname [Customer], sretlogmstnote AS [Return Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsretlogmst sretm INNER JOIN QL_approval ap ON sretlogmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sretlogmststatus='In Approval' ORDER BY CAST(ap.requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnsretsawnmst")
            {
                sSql = "SELECT sretm.cmpcode, sretsawnmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretsawndate, 101) AS [Return Date], custname [Customer], sretsawnmstnote AS [Return Note], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnsretsawnmst sretm INNER JOIN QL_approval ap ON sretsawnmstoid=ap.oid INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE ap.statusrequest='New' AND ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='" + tblname + "' AND sretsawnmststatus='In Approval' ORDER BY CAST(ap.requestdate AS DATETIME) DESC";
            } else if (tblname == "/*QL_trnarrawmst*/QL_trnjualmst")
            {
                sSql = "SELECT arm.cmpcode, arrawmstoid AS [Draft No.], CONVERT(VARCHAR(10), arrawdate, 101) AS [PEB Date], custname [Customer], ISNULL(arrawmstres3,'') AS [Invoice No.], arrawmstnote AS [A/R Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM /*QL_trnarrawmst*/QL_trnjualmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid INNER JOIN QL_approval apr ON apr.oid=arrawmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arrawmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnargenmst")
            {
                sSql = "SELECT arm.cmpcode, argenmstoid AS [Draft No.], CONVERT(VARCHAR(10), argendate, 101) AS [PEB Date], custname [Customer], ISNULL(argenmstres3,'') AS [Invoice No.], argenmstnote AS [A/R Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM QL_trnargenmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid INNER JOIN QL_approval apr ON apr.oid=argenmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND argenmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnarspmst")
            {
                sSql = "SELECT arm.cmpcode, arspmstoid AS [Draft No.], CONVERT(VARCHAR(10), arspdate, 101) AS [PEB Date], custname [Customer], ISNULL(arspmstres3,'') AS [Invoice No.], arspmstnote AS [A/R Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM QL_trnarspmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid INNER JOIN QL_approval apr ON apr.oid=arspmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arspmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnaritemmst")
            {
                sSql = "SELECT arm.cmpcode, aritemmstoid AS [Draft No.], CONVERT(VARCHAR(10), aritemdate, 101) AS [PEB Date], custname [Customer], ISNULL(aritemmstres3,'') AS [Invoice No.], aritemmstnote AS [A/R Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM QL_trnaritemmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid INNER JOIN QL_approval apr ON apr.oid=aritemmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND aritemmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnarassetmst")
            {
                sSql = "SELECT arm.cmpcode, arassetmstoid AS [Draft No.], CONVERT(VARCHAR(10), arassetdate, 101) AS [PEB Date], custname [Customer], ISNULL(arassetmstres3,'') AS [Invoice No.], arassetmstnote AS [A/R Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM QL_trnarassetmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid INNER JOIN QL_approval apr ON apr.oid=arassetmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arassetmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnarlogmst")
            {
                sSql = "SELECT arm.cmpcode, arlogmstoid AS [Draft No.], CONVERT(VARCHAR(10), arlogdate, 101) AS [PEB Date], custname [Customer], ISNULL(arlogmstres3,'') AS [Invoice No.], arlogmstnote AS [A/R Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM QL_trnarlogmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid INNER JOIN QL_approval apr ON apr.oid=arlogmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arlogmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnarothermst")
            {
                sSql = "SELECT arm.cmpcode, arothermstoid AS [Draft No.], CONVERT(VARCHAR(10), arotherdate, 101) AS [PEB Date], custname [Customer], ISNULL(arothermstres3,'') AS [Invoice No.], arothermstnote AS [A/R Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM QL_trnarothermst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid INNER JOIN QL_approval apr ON apr.oid=arothermstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arothermststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "/*QL_trnarcashbankmst*/QL_trncashbankmst")
            {
                sSql = "SELECT arm.cmpcode, arcashbankmstoid AS [Draft No.], CONVERT(VARCHAR(10), arcashbankdate, 101) AS [PEB Date], custname [Customer], ISNULL(arcashbankmstres3,'') AS [Invoice No.], arcashbankmstnote AS [A/R Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM /*QL_trnarcashbankmst*/QL_trncashbankmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid INNER JOIN QL_approval apr ON apr.oid=arcashbankmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arcashbankmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "/*QL_trnarsawnmst*/QL_trnjualmst")
            {
                sSql = "SELECT arm.cmpcode, arsawnmstoid AS [Draft No.], CONVERT(VARCHAR(10), arsawndate, 101) AS [PEB Date], custname [Customer], ISNULL(arsawnmstres3,'') AS [Invoice No.], arsawnmstnote AS [A/R Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM /*QL_trnarsawnmst*/QL_trnjualmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid INNER JOIN QL_approval apr ON apr.oid=arsawnmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arsawnmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "/*QL_trnarretrawmst*/QL_trnjualmst")
            {
                sSql = "SELECT arretm.cmpcode, arretrawmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretrawdate, 101) AS [Return Date], custname [Customer], arretrawmstnote [Return Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date]  FROM /*QL_trnarretrawmst*/QL_trnjualmst arretm INNER JOIN QL_mstcust c ON c.custoid=arretm.custoid INNER JOIN QL_approval apr ON apr.oid=arretrawmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arretrawmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "/*QL_trnarretgenmst*/QL_trnjualmst")
            {
                sSql = "SELECT arretm.cmpcode, arretgenmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretgendate, 101) AS [Return Date], custname [Customer], arretgenmstnote [Return Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date]  FROM /*QL_trnarretgenmst*/QL_trnjualmst arretm INNER JOIN QL_mstcust c ON c.custoid=arretm.custoid INNER JOIN QL_approval apr ON apr.oid=arretgenmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arretgenmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnarretspmst")
            {
                sSql = "SELECT arretm.cmpcode, arretspmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretspdate, 101) AS [Return Date], custname [Customer], arretspmstnote [Return Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date]  FROM QL_trnarretspmst arretm INNER JOIN QL_mstcust c ON c.custoid=arretm.custoid INNER JOIN QL_approval apr ON apr.oid=arretspmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arretspmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnarretitemmst")
            {
                sSql = "SELECT arretm.cmpcode, arretitemmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretitemdate, 101) AS [Return Date], custname [Customer], arretitemmstnote [Return Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date]  FROM QL_trnarretitemmst arretm INNER JOIN QL_mstcust c ON c.custoid=arretm.custoid INNER JOIN QL_approval apr ON apr.oid=arretitemmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arretitemmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "/*QL_trnarretlogmst*/QL_trnjualmst")
            {
                sSql = "SELECT arretm.cmpcode, arretlogmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretlogdate, 101) AS [Return Date], custname [Customer], arretlogmstnote [Return Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date]  FROM /*QL_trnarretlogmst*/QL_trnjualmst arretm INNER JOIN QL_mstcust c ON c.custoid=arretm.custoid INNER JOIN QL_approval apr ON apr.oid=arretlogmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arretlogmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "/*QL_trnarretsawnmst*/QL_trnjualmst")
            {
                sSql = "SELECT arretm.cmpcode, arretsawnmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretsawndate, 101) AS [Return Date], custname [Customer], arretsawnmstnote [Return Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date]  FROM /*QL_trnarretsawnmst*/QL_trnjualmst arretm INNER JOIN QL_mstcust c ON c.custoid=arretm.custoid INNER JOIN QL_approval apr ON apr.oid=arretsawnmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND arretsawnmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            } else if (tblname == "ql_trnstockadj")
            {
                sSql = "SELECT a.cmpcode, CAST(resfield1 AS INTEGER) AS [Draft No.], CONVERT(VARCHAR(10), stockadjdate, 101) AS [Adj Date], stockadjtype AS [Type], ap.requestuser [Request User], CONVERT(VARCHAR(10), ap.requestdate, 101) AS [Request Date] FROM QL_trnstockadj a INNER JOIN QL_approval ap ON ap.oid=CAST(resfield1 AS INTEGER) AND ap.statusrequest='New' WHERE ap.event='In Approval' AND ap.approvaluser='" + Session["UserID"].ToString() + "' AND ap.tablename='QL_trnstockadj' AND stockadjstatus='In Approval' GROUP BY a.cmpcode, resfield1, stockadjno, stockadjdate, ap.approvaloid, ap.requestuser, ap.requestdate, a.upduser, stockadjtype, tmp_field ORDER BY ap.requestdate DESC";
            } else if (tblname == "ql_trnbrtacaramst")
            {
                sSql= "SELECT ba.cmpcode, ba.acaramstoid [Draft No.], CONVERT(VARCHAR(10), acaradate, 101) [BA Date], acaratype [Type], wono [KIK No.], deptname [Dept.], acaramstnote [Header Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM QL_trnbrtacaramst ba INNER JOIN QL_trnwomst wom ON wom.cmpcode=ba.cmpcode AND wom.womstoid=ba.womstoid INNER JOIN QL_mstdept d ON d.deptoid=ba.deptoid INNER JOIN QL_approval apr ON apr.oid=acaramstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND acaramststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            }
            else if (tblname == "ql_trntransmst")
            {
                sSql = "SELECT trm.cmpcode, trm.transmstoid [Draft No.], CONVERT(VARCHAR(10), transdate, 101) [Trans. Date], transmstnote [Header Note], requestuser [Request User], CONVERT(VARCHAR(10), requestdate, 101) AS [Request Date] FROM QL_trntransmst trm INNER JOIN QL_approval apr ON apr.oid=transmstoid WHERE statusrequest='New' AND apr.event='In Approval' AND apr.approvaluser='" + Session["UserID"].ToString() + "' AND apr.tablename='" + tblname + "' AND transmststatus='In Approval' ORDER BY CAST(requestdate AS DATETIME) DESC";
            }
            else
                msg = "Approval action haven't be set";
            
            if (msg == "")
            {
                DataTable tbl = new ClassConnection().GetDataTable(sSql, tblname);

                if (tbl.Rows.Count > 0)
                {
                    List<string> colname = new List<string>();

                    List<Dictionary<string, object>> rows = new List<Dictionary<string, object>>();
                    Dictionary<string, object> row;
                    foreach (DataRow dr in tbl.Rows)
                    {
                        row = new Dictionary<string, object>();
                        foreach (DataColumn col in tbl.Columns)
                        {
                            var item = dr[col].ToString();
                            if (col.ColumnName == "Draft No.")
                            {
                                item = "<a class='text-primary' href='" + Url.Action("Form/" + item + "/" + dr["cmpcode"].ToString(), "WaitingAction") + "?tblname=" + tblname + "'>" + item + "</a>";
                            }
                            row.Add(col.ColumnName, item);
                            if (!colname.Contains(col.ColumnName))
                                colname.Add(col.ColumnName);
                        }
                        rows.Add(row);
                    }

                    return Json(new { msg, colname, rows }, JsonRequestBehavior.AllowGet);
                }
                else
                    msg = "Data Not Found";
            }

            return Json(new { msg }, JsonRequestBehavior.AllowGet);
        }

        // GET: WaitingAction/Form/id/cmp
        public ActionResult Form(int id, string cmp, string tblname)
        {
            if (Session["UserID"] == null)
                return RedirectToAction("Login", "Profile");

            ViewBag.TransName = db.Database.SqlQuery<string>("SELECT DISTINCT apppersonnote FROM QL_approvalperson WHERE tablename='" + tblname + "'").FirstOrDefault();
            ViewBag.BusinessUnit = db.Database.SqlQuery<string>("SELECT divname FROM QL_mstdivision WHERE cmpcode='" + cmp + "'").FirstOrDefault();

            waitactmodel tbl = new waitactmodel();
            tbl.mstoid = id;
            tbl.cmpcode = cmp;
            tbl.tblname = tblname;

            return View(tbl);
        }

        [HttpPost]
        public ActionResult GetDataApproval(int id, string cmp, string tblname)
        {
            var msg = "";
            var sSqlHdr = "";
            var info = "";
            var sSqlDtl = "";
            var sSqlFtr = "";

            if (tblname == "ql_prrawmst")
            {
                sSqlHdr = "SELECT h.prrawmstoid [Draft No.], CONVERT(VARCHAR(10), prrawdate, 101) [PR Date], deptname [Department], prrawmstnote [Note], ISNULL((SELECT requireno FROM QL_trnrequiremst x WHERE x.cmpcode=h.cmpcode AND x.requiremstoid=h.requiremstoid), '') [Require No.], h.createuser [Create User], h.upduser [Last Update By], h.updtime [Last Update On] FROM QL_prrawmst h INNER JOIN QL_mstdept d ON d.cmpcode=h.cmpcode AND d.deptoid=h.deptoid WHERE h.cmpcode='" + cmp + "' AND h.prrawmstoid=" + id + "";

                info += "* free stok : refer to mrp<br />";
                info += "* last free stok : refer to last mrp<br />";
                info += "* last price : on same PT, refer to last approved PO<br />";
                info += "* last price idr : on same PT, refer to last approved PO in IDR";

                var sPeriod = ClassFunction.GetDateToPeriodAcctg(ClassFunction.GetServerTime());
                sSqlDtl = "SELECT prrawdtlseq [No.], matrawcode [Mat. Code], matrawshortdesc [Mat. Desc.], prrawarrdatereq [Arr. Date. Req], prrawqty [DEC_Qty], requireqty [DEC_Free Stock], requireqty_last [DEC_Last Free Stock], reqno [MRP No.], reqqty [DEC_MRP Qty], stockqty [DEC_Last Stock], unit [Unit], lastprice[DEC_Last Price], lastpriceidr [DEC_Last Price IDR], (prrawqty * lastpriceidr) [DEC_Netto], prrawdtlnote [Note] FROM (SELECT prd.prrawdtlseq, m.matrawcode, m.matrawlongdesc AS matrawshortdesc, prd.prrawqty, prd.requireqty * -1 requireqty, g.gendesc AS unit, ISNULL((SELECT TOP 1 lastpurchaseprice FROM QL_mstmatrawprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matrawoid=m.matrawoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) AS lastprice, ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstmatrawprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matrawoid=m.matrawoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) AS lastpriceidr, ISNULL((SELECT TOP 1 lasttransno FROM QL_mstmatrawprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matrawoid=m.matrawoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC),  '') AS lasttransno, ISNULL((SELECT TOP 1 CONVERT(VARCHAR(10),lasttransdate, 101) FROM QL_mstmatrawprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matrawoid=m.matrawoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 1/1/1900) AS lasttransdate, CONVERT(VARCHAR(10), prd.prrawarrdatereq, 101) AS prrawarrdatereq, prd.prrawdtlnote, ISNULL((SELECT SUM(saldoakhir) FROM QL_crdmtr crd WHERE crd.cmpcode=prd.cmpcode AND crd.refname='RAW MATERIAL' AND crd.refoid=prd.matrawoid AND crd.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND crd.closingdate='01/01/1900'), 0.0) AS stockqty, ISNULL((SELECT TOP 1 reqd.requireqty FROM QL_trnrequiredtl reqd INNER JOIN QL_trnrequiremst reqm ON reqm.cmpcode=reqd.cmpcode AND reqm.requiremstoid=reqd.requiremstoid WHERE reqd.cmpcode=prd.cmpcode AND requirereftype='Raw' AND requirerefoid=prd.matrawoid ORDER BY reqd.updtime DESC), 0.0) * -1 requireqty_last, ISNULL((SELECT TOP 1 reqm.requireno FROM QL_trnrequiredtl reqd INNER JOIN QL_trnrequiremst reqm ON reqm.cmpcode=reqd.cmpcode AND reqm.requiremstoid=reqd.requiremstoid WHERE reqd.cmpcode=prd.cmpcode AND requirereftype='Raw' AND requirerefoid=prd.matrawoid ORDER BY reqd.updtime DESC), '') requireno_last , ISNULL((SELECT reqm.requireno FROM  QL_trnrequiremst reqm WHERE reqm.cmpcode=pr.cmpcode AND reqm.requiremstoid=pr.requiremstoid),'') reqno, ISNULL((SELECT reqd.requireqty FROM  QL_trnrequiremst reqm INNER JOIN QL_trnrequiredtl reqd ON reqm.cmpcode=reqd.cmpcode AND reqm.requiremstoid=reqd.requiremstoid WHERE reqm.cmpcode=pr.cmpcode AND reqm.requiremstoid=pr.requiremstoid AND reqd.requirereftype='Raw' AND reqd.requirerefoid=prd.matrawoid AND reqd.requireunitoid=prd.prrawunitoid),0) reqqty FROM QL_prrawmst pr INNER JOIN QL_prrawdtl prd ON pr.prrawmstoid=prd.prrawmstoid INNER JOIN QL_mstmatraw m ON prd.matrawoid=m.matrawoid INNER JOIN QL_mstgen g ON prd.prrawunitoid=g.genoid  WHERE pr.cmpcode='" + cmp + "' AND pr.prrawmstoid=" + id + ") AS tblPR ORDER BY prrawdtlseq";

                sSqlFtr = "SELECT SUM(prrawqty * lastpriceidr) [Total] FROM (SELECT prrawqty, ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstmatrawprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matrawoid=prd.matrawoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) lastpriceidr FROM QL_prrawdtl prd WHERE cmpcode='" + cmp + "' AND prrawmstoid=" + id + ") AS tblPR";
            }
            else if (tblname == "ql_prgenmst")
            {
                sSqlHdr = "SELECT h.prgenmstoid [Draft No.], CONVERT(VARCHAR(10), prgendate, 101) [PR Date], deptname [Department], prgenmstnote [Note], ISNULL((SELECT requireno FROM QL_trnrequiremst x WHERE x.cmpcode=h.cmpcode AND x.requiremstoid=h.requiremstoid), '') [Require No.], h.createuser [Create User], h.upduser [Last Update By], h.updtime [Last Update On] FROM QL_prgenmst h INNER JOIN QL_mstdept d ON d.cmpcode=h.cmpcode AND d.deptoid=h.deptoid WHERE h.cmpcode='" + cmp + "' AND h.prgenmstoid=" + id + "";

                info += "* free stok : refer to mrp<br />";
                info += "* last free stok : refer to last mrp<br />";
                info += "* last price : on same PT, refer to last approved PO<br />";
                info += "* last price idr : on same PT, refer to last approved PO in IDR";

                var sPeriod = ClassFunction.GetDateToPeriodAcctg(ClassFunction.GetServerTime());
                sSqlDtl = "SELECT prgendtlseq [No.], matgencode [Mat. Code], matgenshortdesc [Mat. Desc.], prgenarrdatereq [Arr. Date. Req], prgenqty [DEC_Qty], requireqty [DEC_Free Stock], requireqty_last [DEC_Last Free Stock], reqno [MRP No.], reqqty [DEC_MRP Qty], stockqty [DEC_Last Stock], unit [Unit], lastprice[DEC_Last Price], lastpriceidr [DEC_Last Price IDR], (prgenqty * lastpriceidr) [DEC_Netto], prgendtlnote [Note] FROM (SELECT prd.prgendtlseq, m.matgencode, m.matgenlongdesc AS matgenshortdesc, prd.prgenqty, prd.requireqty * -1 requireqty, g.gendesc AS unit, ISNULL((SELECT TOP 1 lastpurchaseprice FROM QL_mstmatgenprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matgenoid=m.matgenoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) AS lastprice, ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstmatgenprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matgenoid=m.matgenoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) AS lastpriceidr, ISNULL((SELECT TOP 1 lasttransno FROM QL_mstmatgenprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matgenoid=m.matgenoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC),  '') AS lasttransno, ISNULL((SELECT TOP 1 CONVERT(VARCHAR(10),lasttransdate, 101) FROM QL_mstmatgenprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matgenoid=m.matgenoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 1/1/1900) AS lasttransdate, CONVERT(VARCHAR(10), prd.prgenarrdatereq, 101) AS prgenarrdatereq, prd.prgendtlnote, ISNULL((SELECT SUM(saldoakhir) FROM QL_crdmtr crd WHERE crd.cmpcode=prd.cmpcode AND crd.refname='GENERAL MATERIAL' AND crd.refoid=prd.matgenoid AND crd.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND crd.closingdate='01/01/1900'), 0.0) AS stockqty, ISNULL((SELECT TOP 1 reqd.requireqty FROM QL_trnrequiredtl reqd INNER JOIN QL_trnrequiremst reqm ON reqm.cmpcode=reqd.cmpcode AND reqm.requiremstoid=reqd.requiremstoid WHERE reqd.cmpcode=prd.cmpcode AND requirereftype='General' AND requirerefoid=prd.matgenoid ORDER BY reqd.updtime DESC), 0.0) * -1 requireqty_last, ISNULL((SELECT TOP 1 reqm.requireno FROM QL_trnrequiredtl reqd INNER JOIN QL_trnrequiremst reqm ON reqm.cmpcode=reqd.cmpcode AND reqm.requiremstoid=reqd.requiremstoid WHERE reqd.cmpcode=prd.cmpcode AND requirereftype='General' AND requirerefoid=prd.matgenoid ORDER BY reqd.updtime DESC), '') requireno_last , ISNULL((SELECT reqm.requireno FROM  QL_trnrequiremst reqm WHERE reqm.cmpcode=pr.cmpcode AND reqm.requiremstoid=pr.requiremstoid),'') reqno, ISNULL((SELECT reqd.requireqty FROM  QL_trnrequiremst reqm INNER JOIN QL_trnrequiredtl reqd ON reqm.cmpcode=reqd.cmpcode AND reqm.requiremstoid=reqd.requiremstoid WHERE reqm.cmpcode=pr.cmpcode AND reqm.requiremstoid=pr.requiremstoid AND reqd.requirereftype='General' AND reqd.requirerefoid=prd.matgenoid AND reqd.requireunitoid=prd.prgenunitoid),0) reqqty FROM QL_prgenmst pr INNER JOIN QL_prgendtl prd ON pr.prgenmstoid=prd.prgenmstoid INNER JOIN QL_mstmatgen m ON prd.matgenoid=m.matgenoid INNER JOIN QL_mstgen g ON prd.prgenunitoid=g.genoid  WHERE pr.cmpcode='" + cmp + "' AND pr.prgenmstoid=" + id + ") AS tblPR ORDER BY prgendtlseq";

                sSqlFtr = "SELECT SUM(prgenqty * lastpriceidr) [Total] FROM (SELECT prgenqty, ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstmatgenprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matgenoid=prd.matgenoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) lastpriceidr FROM QL_prgendtl prd WHERE cmpcode='" + cmp + "' AND prgenmstoid=" + id + ") AS tblPR";
            }
            else if (tblname == "ql_prspmst")
            {
                sSqlHdr = "SELECT h.prspmstoid [Draft No.], CONVERT(VARCHAR(10), prspdate, 101) [PR Date], deptname [Department], prspmstnote [Note], ISNULL((SELECT requireno FROM QL_trnrequiremst x WHERE x.cmpcode=h.cmpcode AND x.requiremstoid=h.requiremstoid), '') [Require No.], h.createuser [Create User], h.upduser [Last Update By], h.updtime [Last Update On] FROM QL_prspmst h INNER JOIN QL_mstdept d ON d.cmpcode=h.cmpcode AND d.deptoid=h.deptoid WHERE h.cmpcode='" + cmp + "' AND h.prspmstoid=" + id + "";

                info += "* free stok : refer to mrp<br />";
                info += "* last free stok : refer to last mrp<br />";
                info += "* last price : on same PT, refer to last approved PO<br />";
                info += "* last price idr : on same PT, refer to last approved PO in IDR";

                var sPeriod = ClassFunction.GetDateToPeriodAcctg(ClassFunction.GetServerTime());
                sSqlDtl = "SELECT prspdtlseq [No.], sparepartcode [Mat. Code], sparepartshortdesc [Mat. Desc.], prsparrdatereq [Arr. Date. Req], prspqty [DEC_Qty], requireqty [DEC_Free Stock], requireqty_last [DEC_Last Free Stock], reqno [MRP No.], reqqty [DEC_MRP Qty], stockqty [DEC_Last Stock], unit [Unit], lastprice[DEC_Last Price], lastpriceidr [DEC_Last Price IDR], (prspqty * lastpriceidr) [DEC_Netto], prspdtlnote [Note] FROM (SELECT prd.prspdtlseq, m.sparepartcode, m.sparepartlongdesc AS sparepartshortdesc, prd.prspqty, prd.requireqty * -1 requireqty, g.gendesc AS unit, ISNULL((SELECT TOP 1 lastpurchaseprice FROM QL_mstsparepartprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.sparepartoid=m.sparepartoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) AS lastprice, ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstsparepartprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.sparepartoid=m.sparepartoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) AS lastpriceidr, ISNULL((SELECT TOP 1 lasttransno FROM QL_mstsparepartprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.sparepartoid=m.sparepartoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC),  '') AS lasttransno, ISNULL((SELECT TOP 1 CONVERT(VARCHAR(10),lasttransdate, 101) FROM QL_mstsparepartprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.sparepartoid=m.sparepartoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 1/1/1900) AS lasttransdate, CONVERT(VARCHAR(10), prd.prsparrdatereq, 101) AS prsparrdatereq, prd.prspdtlnote, ISNULL((SELECT SUM(saldoakhir) FROM QL_crdmtr crd WHERE crd.cmpcode=prd.cmpcode AND crd.refname='SPARE PART' AND crd.refoid=prd.sparepartoid AND crd.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND crd.closingdate='01/01/1900'), 0.0) AS stockqty, ISNULL((SELECT TOP 1 reqd.requireqty FROM QL_trnrequiredtl reqd INNER JOIN QL_trnrequiremst reqm ON reqm.cmpcode=reqd.cmpcode AND reqm.requiremstoid=reqd.requiremstoid WHERE reqd.cmpcode=prd.cmpcode AND requirereftype='Spare Part' AND requirerefoid=prd.sparepartoid ORDER BY reqd.updtime DESC), 0.0) * -1 requireqty_last, ISNULL((SELECT TOP 1 reqm.requireno FROM QL_trnrequiredtl reqd INNER JOIN QL_trnrequiremst reqm ON reqm.cmpcode=reqd.cmpcode AND reqm.requiremstoid=reqd.requiremstoid WHERE reqd.cmpcode=prd.cmpcode AND requirereftype='Spare Part' AND requirerefoid=prd.sparepartoid ORDER BY reqd.updtime DESC), '') requireno_last , ISNULL((SELECT reqm.requireno FROM  QL_trnrequiremst reqm WHERE reqm.cmpcode=pr.cmpcode AND reqm.requiremstoid=pr.requiremstoid),'') reqno, ISNULL((SELECT reqd.requireqty FROM  QL_trnrequiremst reqm INNER JOIN QL_trnrequiredtl reqd ON reqm.cmpcode=reqd.cmpcode AND reqm.requiremstoid=reqd.requiremstoid WHERE reqm.cmpcode=pr.cmpcode AND reqm.requiremstoid=pr.requiremstoid AND reqd.requirereftype='Spare Part' AND reqd.requirerefoid=prd.sparepartoid AND reqd.requireunitoid=prd.prspunitoid),0) reqqty FROM QL_prspmst pr INNER JOIN QL_prspdtl prd ON pr.prspmstoid=prd.prspmstoid INNER JOIN QL_mstsparepart m ON prd.sparepartoid=m.sparepartoid INNER JOIN QL_mstgen g ON prd.prspunitoid=g.genoid  WHERE pr.cmpcode='" + cmp + "' AND pr.prspmstoid=" + id + ") AS tblPR ORDER BY prspdtlseq";

                sSqlFtr = "SELECT SUM(prspqty * lastpriceidr) [Total] FROM (SELECT prspqty, ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstsparepartprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.sparepartoid=prd.sparepartoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) lastpriceidr FROM QL_prspdtl prd WHERE cmpcode='" + cmp + "' AND prspmstoid=" + id + ") AS tblPR";
            }
            else if (tblname == "ql_pritemmst")
            {
                sSqlHdr = "SELECT h.pritemmstoid [Draft No.], CONVERT(VARCHAR(10), pritemdate, 101) [PR Date], deptname [Department], pritemmstnote [Note], h.createuser [Create User], h.upduser [Last Update By], h.updtime [Last Update On] FROM QL_pritemmst h INNER JOIN QL_mstdept d ON d.cmpcode=h.cmpcode AND d.deptoid=h.deptoid WHERE h.cmpcode='" + cmp + "' AND h.pritemmstoid=" + id + "";

                //info += "* free stok : refer to mrp<br />";
                //info += "* last free stok : refer to last mrp<br />";
                //info += "* last price : on same PT, refer to last approved PO<br />";
                //info += "* last price idr : on same PT, refer to last approved PO in IDR";

                var sPeriod = ClassFunction.GetDateToPeriodAcctg(ClassFunction.GetServerTime());
                sSqlDtl = "SELECT pritemdtlseq [No.], itemcode [Mat. Code], itemshortdesc [Mat. Desc.], pritemarrdatereq [Arr. Date. Req], pritemqty [DEC_Qty], stockqty [DEC_Last Stock], unit [Unit], lastprice[DEC_Last Price], lastpriceidr [DEC_Last Price IDR], (pritemqty * lastpriceidr) [DEC_Netto], pritemdtlnote [Note] FROM (SELECT prd.pritemdtlseq, m.itemcode, m.itemlongdesc AS itemshortdesc, prd.pritemqty, g.gendesc AS unit, ISNULL((SELECT TOP 1 lastpurchaseprice FROM QL_mstitemprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.itemoid=m.itemoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) AS lastprice, ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstitemprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.itemoid=m.itemoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) AS lastpriceidr, ISNULL((SELECT TOP 1 lasttransno FROM QL_mstitemprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.itemoid=m.itemoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC),  '') AS lasttransno, ISNULL((SELECT TOP 1 CONVERT(VARCHAR(10),lasttransdate, 101) FROM QL_mstitemprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.itemoid=m.itemoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 1/1/1900) AS lasttransdate, CONVERT(VARCHAR(10), prd.pritemarrdatereq, 101) AS pritemarrdatereq, prd.pritemdtlnote, ISNULL((SELECT SUM(saldoakhir) FROM QL_crdmtr crd WHERE crd.cmpcode=prd.cmpcode AND crd.refname='FINISH GOOD' AND crd.refoid=prd.itemoid AND crd.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND crd.closingdate='01/01/1900'), 0.0) AS stockqty FROM QL_pritemmst pr INNER JOIN QL_pritemdtl prd ON pr.pritemmstoid=prd.pritemmstoid INNER JOIN QL_mstitem m ON prd.itemoid=m.itemoid INNER JOIN QL_mstgen g ON prd.pritemunitoid=g.genoid  WHERE pr.cmpcode='" + cmp + "' AND pr.pritemmstoid=" + id + ") AS tblPR ORDER BY pritemdtlseq";

                sSqlFtr = "SELECT SUM(pritemqty * lastpriceidr) [Total] FROM (SELECT pritemqty, ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstitemprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.itemoid=prd.itemoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) lastpriceidr FROM QL_pritemdtl prd WHERE cmpcode='" + cmp + "' AND pritemmstoid=" + id + ") AS tblPR";
            }
            if (tblname == "ql_prassetmst")
            {
                sSqlHdr = "SELECT h.prassetmstoid [Draft No.], CONVERT(VARCHAR(10), prassetdate, 101) [PR Date], deptname [Department], prassetmstnote [Note], h.createuser [Create User], h.upduser [Last Update By], h.updtime [Last Update On] FROM QL_prassetmst h INNER JOIN QL_mstdept d ON d.cmpcode=h.cmpcode AND d.deptoid=h.deptoid WHERE h.cmpcode='" + cmp + "' AND h.prassetmstoid=" + id + "";

                //info += "* free stok : refer to mrp<br />";
                //info += "* last free stok : refer to last mrp<br />";
                //info += "* last price : on same PT, refer to last approved PO<br />";
                //info += "* last price idr : on same PT, refer to last approved PO in IDR";
               

                var sPeriod = ClassFunction.GetDateToPeriodAcctg(ClassFunction.GetServerTime());
                sSqlDtl = "SELECT prassetdtlseq [No.], assetcode [Mat. Code], assetshortdesc [Mat. Desc.], prassetarrdatereq [Arr. Date. Req], prassetqty [DEC_Qty], stockqty [DEC_Last Stock], unit [Unit], lastprice[DEC_Last Price], lastpriceidr [DEC_Last Price IDR], (prassetqty * lastpriceidr) [DEC_Netto], prassetdtlnote [Note] FROM (SELECT prd.prassetdtlseq, (CASE prd.prassetreftype WHEN 'General' THEN (SELECT x.matgencode FROM QL_mstmatgen x WHERE x.matgenoid=prd.prassetrefoid) WHEN 'Spare Part' THEN (SELECT x.sparepartcode FROM QL_mstsparepart x WHERE x.sparepartoid=prd.prassetrefoid) ELSE '' END) assetcode, (CASE prd.prassetreftype WHEN 'General' THEN (SELECT x.matgenlongdesc FROM QL_mstmatgen x WHERE x.matgenoid=prd.prassetrefoid) WHEN 'Spare Part' THEN (SELECT x.sparepartlongdesc FROM QL_mstsparepart x WHERE x.sparepartoid=prd.prassetrefoid) ELSE '' END) AS assetshortdesc, prassetarrdatereq, prd.prassetqty, g.gendesc AS unit, (CASE prd.prassetreftype WHEN 'General' THEN ISNULL((SELECT TOP 1 lastpurchaseprice FROM QL_mstmatgenprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matgenoid=prd.prassetrefoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) ELSE ISNULL((SELECT TOP 1 lastpurchaseprice FROM QL_mstsparepartprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.sparepartoid=prd.prassetrefoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) END) AS lastprice, (CASE prd.prassetreftype WHEN 'General' THEN ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstmatgenprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matgenoid=prd.prassetrefoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) ELSE ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstsparepartprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.sparepartoid=prd.prassetrefoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) END) AS lastpriceidr,(CASE prd.prassetreftype WHEN 'General' THEN ISNULL((SELECT TOP 1 lasttransno FROM QL_mstmatgenprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matgenoid=prd.prassetrefoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), '') ELSE ISNULL((SELECT TOP 1 lasttransno FROM QL_mstsparepartprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.sparepartoid=prd.prassetrefoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), '') END) AS lasttransno,  (CASE prd.prassetreftype WHEN 'General' THEN ISNULL((SELECT TOP 1 CONVERT(VARCHAR(10), lasttransdate, 101) FROM QL_mstmatgenprice mp WHERE mp.cmpcode = prd.cmpcode AND mp.matgenoid = prd.prassetrefoid AND refname = 'SUPPLIER' ORDER BY lasttransdate DESC), 1 / 1 / 1900) ELSE ISNULL((SELECT TOP 1 CONVERT(VARCHAR(10), lasttransdate, 101) FROM QL_mstsparepartprice mp WHERE mp.cmpcode = prd.cmpcode AND mp.sparepartoid = prd.prassetrefoid AND refname = 'SUPPLIER' ORDER BY lasttransdate DESC), 1 / 1 / 1900) END) AS lasttransdate, prd.prassetdtlnote, ISNULL((SELECT SUM(saldoakhir) FROM QL_crdmtr crd WHERE crd.cmpcode = prd.cmpcode AND crd.refname = (CASE prd.prassetreftype WHEN 'General' THEN 'GENERAL MATERIAL' WHEN 'Spare Part' THEN 'SPARE PART' ELSE '' END) AND crd.refoid = prd.prassetrefoid AND crd.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND crd.closingdate = '01/01/1900'), 0.0) AS stockqty FROM QL_prassetmst pr INNER JOIN QL_prassetdtl prd ON pr.prassetmstoid=prd.prassetmstoid INNER JOIN QL_mstgen g ON prd.prassetunitoid=g.genoid  WHERE pr.cmpcode='" + cmp + "' AND pr.prassetmstoid=" + id + ") AS tblPR ORDER BY prassetdtlseq";

                sSqlFtr = "SELECT SUM(prassetqty * lastpriceidr) [Total] FROM (SELECT prassetqty, (CASE prd.prassetreftype WHEN 'General' THEN ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstmatgenprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.matgenoid=prd.prassetrefoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) ELSE ISNULL((SELECT TOP 1 lastpurchaseprice * ratetoidr FROM QL_mstsparepartprice mp WHERE mp.cmpcode=prd.cmpcode AND mp.sparepartoid=prd.prassetrefoid AND refname='SUPPLIER' ORDER BY lasttransdate DESC), 0.0) END) lastpriceidr FROM QL_prassetdtl prd WHERE cmpcode='" + cmp + "' AND prassetmstoid=" + id + ") AS tblPR";
            }

            else if (tblname == "ql_trnporawmst")
            {
                sSqlHdr = "SELECT po.porawmstoid AS [Draft No.], CONVERT(VARCHAR(10), po.porawdate, 101) AS[PO Date], s.suppname AS[Supplier], po.porawmstnote AS[PO Note], c.currcode AS[Currency], po.createuser AS[Create User], po.upduser[Last Update By], po.updtime AS[Last Update On] FROM QL_trnporawmst po INNER JOIN QL_mstsupp s ON po.suppoid = s.suppoid INNER JOIN QL_mstcurr c ON c.curroid = po.curroid WHERE po.cmpcode='" + cmp + "' AND po.porawmstoid=" + id;

                sSqlDtl = "SELECT pod.porawdtlseq AS [No.], m.matrawcode AS [Mat.Code], m.matrawlongdesc AS[Mat.Desc], CONVERT(VARCHAR(10), prrawarrdatereq, 101) AS [ETA], pod.porawqty AS [DEC_Quantity], g.gendesc AS [Unit], ISNULL((SELECT TOP 1 mp.lastpurchaseprice FROM QL_mstmatrawprice mp WHERE mp.cmpcode = po.cmpcode AND mp.matrawoid = pod.matrawoid AND mp.refname = 'SUPPLIER' AND mp.curroid = po.curroid ORDER BY mp.updtime DESC), 0.0) AS [DEC_Last Price], pod.porawprice AS [DEC_Price], pod.porawdtlamt AS [DEC_Amount], pod.porawdtldiscamt AS [DEC_Disc], pod.porawdtlnetto AS [DEC_Netto], pod.porawdtlnote AS [Note] FROM QL_trnporawmst po INNER JOIN QL_trnporawdtl pod ON po.cmpcode = pod.cmpcode AND po.porawmstoid = pod.porawmstoid INNER JOIN QL_mstmatraw m ON pod.matrawoid = m.matrawoid INNER JOIN QL_mstgen g ON pod.porawunitoid = g.genoid INNER JOIN QL_prrawdtl prd ON prd.cmpcode = pod.cmpcode AND prd.prrawdtloid = pod.prrawdtloid AND prd.prrawmstoid = pod.prrawmstoid WHERE pod.cmpcode='" + cmp + "' AND pod.porawmstoid=" + id + " ORDER BY pod.porawdtlseq";

                sSqlFtr = "SELECT (po.porawtotalamt - po.porawtotaldiscdtl) AS [Total], po.porawmstdiscamt AS [Header Disc.], po.porawvat AS [Tax], (po.porawdeliverycost + po.porawothercost) AS [Other Cost], po.porawgrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnporawmst po INNER JOIN QL_mstcurr c ON c.curroid=po.curroid WHERE po.cmpcode='" + cmp + "' AND po.porawmstoid=" + id;
            }
            else if (tblname == "ql_trnpogenmst")
            {
                sSqlHdr = "SELECT po.pogenmstoid AS [Draft No.], CONVERT(VARCHAR(10), po.pogendate, 101) AS[PO Date], s.suppname AS[Supplier], po.pogenmstnote AS[PO Note], c.currcode AS[Currency], po.createuser AS[Create User], po.upduser[Last Update By], po.updtime AS[Last Update On] FROM QL_trnpogenmst po INNER JOIN QL_mstsupp s ON po.suppoid = s.suppoid INNER JOIN QL_mstcurr c ON c.curroid = po.curroid WHERE po.cmpcode='" + cmp + "' AND po.pogenmstoid=" + id;

                sSqlDtl = "SELECT pod.pogendtlseq AS [No.], m.matgencode AS [Mat.Code], m.matgenlongdesc AS[Mat.Desc], CONVERT(VARCHAR(10), prgenarrdatereq, 101) AS [ETA], pod.pogenqty AS [DEC_Quantity], g.gendesc AS [Unit], ISNULL((SELECT TOP 1 mp.lastpurchaseprice FROM QL_mstmatgenprice mp WHERE mp.cmpcode = po.cmpcode AND mp.matgenoid = pod.matgenoid AND mp.refname = 'SUPPLIER' AND mp.curroid = po.curroid ORDER BY mp.updtime DESC), 0.0) AS [DEC_Last Price], pod.pogenprice AS [DEC_Price], pod.pogendtlamt AS [DEC_Amount], pod.pogendtldiscamt AS [DEC_Disc], pod.pogendtlnetto AS [DEC_Netto], pod.pogendtlnote AS [Note] FROM QL_trnpogenmst po INNER JOIN QL_trnpogendtl pod ON po.cmpcode = pod.cmpcode AND po.pogenmstoid = pod.pogenmstoid INNER JOIN QL_mstmatgen m ON pod.matgenoid = m.matgenoid INNER JOIN QL_mstgen g ON pod.pogenunitoid = g.genoid INNER JOIN QL_prgendtl prd ON prd.cmpcode = pod.cmpcode AND prd.prgendtloid = pod.prgendtloid AND prd.prgenmstoid = pod.prgenmstoid WHERE pod.cmpcode='" + cmp + "' AND pod.pogenmstoid=" + id + " ORDER BY pod.pogendtlseq";

                sSqlFtr = "SELECT (po.pogentotalamt - po.pogentotaldiscdtl) AS [Total], po.pogenmstdiscamt AS [Header Disc.], po.pogenvat AS [Tax], (po.pogendeliverycost + po.pogenothercost) AS [Other Cost], po.pogengrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnpogenmst po INNER JOIN QL_mstcurr c ON c.curroid=po.curroid WHERE po.cmpcode='" + cmp + "' AND po.pogenmstoid=" + id;
            }
            else if (tblname == "ql_trnpospmst")
            {
                sSqlHdr = "SELECT po.pospmstoid AS [Draft No.], CONVERT(VARCHAR(10), po.pospdate, 101) AS[PO Date], s.suppname AS[Supplier], po.pospmstnote AS[PO Note], c.currcode AS[Currency], po.createuser AS[Create User], po.upduser[Last Update By], po.updtime AS[Last Update On] FROM QL_trnpospmst po INNER JOIN QL_mstsupp s ON po.suppoid = s.suppoid INNER JOIN QL_mstcurr c ON c.curroid = po.curroid WHERE po.cmpcode='" + cmp + "' AND po.pospmstoid=" + id;

                sSqlDtl = "SELECT pod.pospdtlseq AS [No.], m.sparepartcode AS [Mat.Code], m.sparepartlongdesc AS[Mat.Desc], CONVERT(VARCHAR(10), prsparrdatereq, 101) AS [ETA], pod.pospqty AS [DEC_Quantity], g.gendesc AS [Unit], ISNULL((SELECT TOP 1 mp.lastpurchaseprice FROM QL_mstsparepartprice mp WHERE mp.cmpcode = po.cmpcode AND mp.sparepartoid = pod.sparepartoid AND mp.refname = 'SUPPLIER' AND mp.curroid = po.curroid ORDER BY mp.updtime DESC), 0.0) AS [DEC_Last Price], pod.pospprice AS [DEC_Price], pod.pospdtlamt AS [DEC_Amount], pod.pospdtldiscamt AS [DEC_Disc], pod.pospdtlnetto AS [DEC_Netto], pod.pospdtlnote AS [Note] FROM QL_trnpospmst po INNER JOIN QL_trnpospdtl pod ON po.cmpcode = pod.cmpcode AND po.pospmstoid = pod.pospmstoid INNER JOIN QL_mstsparepart m ON pod.sparepartoid = m.sparepartoid INNER JOIN QL_mstgen g ON pod.pospunitoid = g.genoid INNER JOIN QL_prspdtl prd ON prd.cmpcode = pod.cmpcode AND prd.prspdtloid = pod.prspdtloid AND prd.prspmstoid = pod.prspmstoid WHERE pod.cmpcode='" + cmp + "' AND pod.pospmstoid=" + id + " ORDER BY pod.pospdtlseq";

                sSqlFtr = "SELECT (po.posptotalamt - po.posptotaldiscdtl) AS [Total], po.pospmstdiscamt AS [Header Disc.], po.pospvat AS [Tax], (po.pospdeliverycost + po.pospothercost) AS [Other Cost], po.pospgrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnpospmst po INNER JOIN QL_mstcurr c ON c.curroid=po.curroid WHERE po.cmpcode='" + cmp + "' AND po.pospmstoid=" + id;
            }
            else if (tblname == "ql_trnpoitemmst")
            {
                sSqlHdr = "SELECT po.poitemmstoid AS [Draft No.], CONVERT(VARCHAR(10), po.poitemdate, 101) AS[PO Date], s.suppname AS[Supplier], po.poitemmstnote AS[PO Note], c.currcode AS[Currency], po.createuser AS[Create User], po.upduser[Last Update By], po.updtime AS[Last Update On] FROM QL_trnpoitemmst po INNER JOIN QL_mstsupp s ON po.suppoid = s.suppoid INNER JOIN QL_mstcurr c ON c.curroid = po.curroid WHERE po.cmpcode='" + cmp + "' AND po.poitemmstoid=" + id;

                sSqlDtl = "SELECT pod.poitemdtlseq AS [No.], m.itemcode AS [Mat.Code], m.itemlongdesc AS[Mat.Desc], CONVERT(VARCHAR(10), pritemarrdatereq, 101) AS [ETA], pod.poitemqty AS [DEC_Quantity], g.gendesc AS [Unit], ISNULL((SELECT TOP 1 mp.lastpurchaseprice FROM QL_mstitemprice mp WHERE mp.cmpcode = po.cmpcode AND mp.itemoid = pod.itemoid AND mp.refname = 'SUPPLIER' AND mp.curroid = po.curroid ORDER BY mp.updtime DESC), 0.0) AS [DEC_Last Price], pod.poitemprice AS [DEC_Price], pod.poitemdtlamt AS [DEC_Amount], pod.poitemdtldiscamt AS [DEC_Disc], pod.poitemdtlnetto AS [DEC_Netto], pod.poitemdtlnote AS [Note] FROM QL_trnpoitemmst po INNER JOIN QL_trnpoitemdtl pod ON po.cmpcode = pod.cmpcode AND po.poitemmstoid = pod.poitemmstoid INNER JOIN QL_mstitem m ON pod.itemoid = m.itemoid INNER JOIN QL_mstgen g ON pod.poitemunitoid = g.genoid INNER JOIN QL_pritemdtl prd ON prd.cmpcode = pod.cmpcode AND prd.pritemdtloid = pod.pritemdtloid AND prd.pritemmstoid = pod.pritemmstoid WHERE pod.cmpcode='" + cmp + "' AND pod.poitemmstoid=" + id + " ORDER BY pod.poitemdtlseq";

                sSqlFtr = "SELECT (po.poitemtotalamt - po.poitemtotaldiscdtl) AS [Total], po.poitemmstdiscamt AS [Header Disc.], po.poitemvat AS [Tax], (po.poitemdeliverycost + po.poitemothercost) AS [Other Cost], po.poitemgrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnpoitemmst po INNER JOIN QL_mstcurr c ON c.curroid=po.curroid WHERE po.cmpcode='" + cmp + "' AND po.poitemmstoid=" + id;
            }
            else if (tblname == "ql_trnpoassetmst")
            {
                sSqlHdr = "SELECT po.poassetmstoid AS [Draft No.], CONVERT(VARCHAR(10), po.poassetdate, 101) AS[PO Date], s.suppname AS [Supplier], po.poassetmstnote AS [PO Note], c.currcode AS [Currency], po.createuser AS [Create User], po.upduser [Last Update By], po.updtime AS [Last Update On] FROM QL_trnpoassetmst po INNER JOIN QL_mstsupp s ON po.suppoid = s.suppoid INNER JOIN QL_mstcurr c ON c.curroid = po.curroid WHERE po.cmpcode='" + cmp + "' AND po.poassetmstoid=" + id;

                sSqlDtl = "SELECT pod.poassetdtlseq AS [No.], pod.poassetreftype [Type], (CASE pod.poassetreftype WHEN 'General' THEN (SELECT m.matgencode FROM QL_mstmatgen m WHERE m.matgenoid=pod.poassetrefoid) ELSE (SELECT m.sparepartcode FROM QL_mstsparepart m WHERE m.sparepartoid=pod.poassetrefoid) END) AS [Mat.Code], (CASE pod.poassetreftype WHEN 'General' THEN (SELECT m.matgenlongdesc FROM QL_mstmatgen m WHERE m.matgenoid=pod.poassetrefoid) ELSE (SELECT m.sparepartlongdesc FROM QL_mstsparepart m WHERE m.sparepartoid=pod.poassetrefoid) END) AS [Mat.Desc], CONVERT(VARCHAR(10), prassetarrdatereq, 101) AS [ETA], pod.poassetqty AS [DEC_Quantity], g.gendesc AS [Unit], ISNULL((CASE pod.poassetreftype WHEN 'General' THEN (SELECT TOP 1 mp.lastpurchaseprice FROM QL_mstmatgenprice mp WHERE mp.cmpcode=po.cmpcode AND mp.matgenoid=pod.poassetrefoid AND mp.refname='SUPPLIER' AND mp.curroid=po.curroid ORDER BY mp.updtime DESC) ELSE (SELECT TOP 1 mp.lastpurchaseprice FROM QL_mstsparepartprice mp WHERE mp.cmpcode=po.cmpcode AND mp.sparepartoid=pod.poassetrefoid AND mp.refname='SUPPLIER' AND mp.curroid=po.curroid ORDER BY mp.updtime DESC) END), 0.0) AS [DEC_Last Price], pod.poassetprice AS [DEC_Price], pod.poassetdtlamt AS [DEC_Amount], pod.poassetdtldiscamt AS [DEC_Disc], pod.poassetdtlnetto AS [DEC_Netto], pod.poassetdtlnote AS [Note] FROM QL_trnpoassetmst po INNER JOIN QL_trnpoassetdtl pod ON po.cmpcode = pod.cmpcode AND po.poassetmstoid = pod.poassetmstoid INNER JOIN QL_mstgen g ON pod.poassetunitoid = g.genoid INNER JOIN QL_prassetdtl prd ON prd.cmpcode = pod.cmpcode AND prd.prassetdtloid = pod.prassetdtloid AND prd.prassetmstoid = pod.prassetmstoid WHERE pod.cmpcode='" + cmp + "' AND pod.poassetmstoid=" + id + " ORDER BY pod.poassetdtlseq";

                sSqlFtr = "SELECT (po.poassettotalamt - po.poassettotaldiscdtl) AS [Total], po.poassetmstdiscamt AS [Header Disc.], po.poassetvat AS [Tax], (po.poassetdeliverycost + po.poassetothercost) AS [Other Cost], po.poassetgrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnpoassetmst po INNER JOIN QL_mstcurr c ON c.curroid=po.curroid WHERE po.cmpcode='" + cmp + "' AND po.poassetmstoid=" + id;
            }
            else if (tblname == "ql_trnposervicemst")
            {
                sSqlHdr = "SELECT poservicemstoid [Draft No.], CONVERT(VARCHAR(10), poservicedate, 101) [PO Date], suppname [Supplier], poservicemstnote [PO Note], currcode [Currency], po.createuser [Create User], po.upduser [Last Update By], po.updtime [Last Update On] FROM QL_trnposervicemst po INNER JOIN QL_mstsupp s ON po.suppoid=s.suppoid INNER JOIN QL_mstcurr c ON c.curroid=po.curroid WHERE po.cmpcode='" + cmp + "' AND po.poservicemstoid=" + id;

                sSqlDtl = "SELECT poservicedtlseq AS [No.], servicecode [Code], servicelongdesc [Description], ISNULL((SELECT TOP 1 crd.lastprice FROM QL_crdservice crd WHERE crd.cmpcode=pod.cmpcode AND crd.serviceoid=pod.serviceoid AND crd.curroid=po.curroid ORDER BY crd.updtime DESC), 0.0) [DEC_Last Price], poserviceqty [DEC_Qty], g.gendesc [Unit], poserviceprice [DEC_Price], poservicedtlnetto [DEC_Amount], poservicedtlnote [Note] FROM QL_trnposervicemst po INNER JOIN QL_trnposervicedtl pod ON po.cmpcode=pod.cmpcode AND po.poservicemstoid=pod.poservicemstoid INNER JOIN QL_mstservice m ON pod.serviceoid=m.serviceoid INNER JOIN QL_mstgen g ON poserviceunitoid=g.genoid WHERE pod.cmpcode='" + cmp + "' AND pod.poservicemstoid=" + id + " ORDER BY poservicedtlseq";

                sSqlFtr = "SELECT (poservicetotalamt - poservicetotaldiscdtl) [Total], poservicevat [Tax], poservicegrandtotalamt [Grand Total], currcode [Currency] FROM QL_trnposervicemst po INNER JOIN QL_mstcurr c ON c.curroid=po.curroid WHERE po.cmpcode='" + cmp + "' AND po.poservicemstoid=" + id;
            }
            else if (tblname == "ql_trnposubconmst")
            {
                sSqlHdr = "SELECT posubconmstoid [Draft No.], CONVERT(VARCHAR(10), posubcondate, 101) [PO Date], suppname [Supplier], posubconmstnote [PO Note], 'IDR' [Currency], po.createuser [Create User], po.upduser [Last Update By], po.updtime [Last Update On] FROM QL_trnposubconmst po INNER JOIN QL_mstsupp s ON po.suppoid=s.suppoid WHERE po.cmpcode='" + cmp + "' AND po.posubconmstoid=" + id;

                sSqlDtl = "SELECT pod.posubcondtl2seq AS [No.], (CASE po.posubconref WHEN 'Raw' THEN (SELECT mx.matrawcode FROM QL_mstmatraw mx WHERE mx.matrawoid=pod.matrefoid) WHEN 'General' THEN (SELECT mx.matgencode FROM QL_mstmatgen mx WHERE mx.matgenoid=pod.matrefoid) WHEN 'Spare Part' THEN (SELECT mx.sparepartcode FROM QL_mstsparepart mx WHERE mx.sparepartoid=pod.matrefoid) WHEN 'Log' THEN (SELECT (cat1code + '.' + cat2code + '.' + cat3code) FROM QL_mstcat3 c3 INNER JOIN QL_mstcat2 c2 ON c2.cmpcode=c3.cmpcode AND c2.cat2oid=c3.cat2oid INNER JOIN QL_mstcat1 c1 ON c1.cmpcode=c3.cmpcode AND c1.cat1oid=c3.cat1oid WHERE cat3oid=pod.matrefoid) WHEN 'Sawn' THEN (SELECT (cat1code + '.' + cat2code) FROM QL_mstcat2 c2 INNER JOIN QL_mstcat1 c1 ON c1.cmpcode=c2.cmpcode AND c1.cat1oid=c2.cat1oid WHERE cat2oid=pod.matrefoid) ElSE '' END) AS [Code], (CASE po.posubconref WHEN 'Raw' THEN (SELECT mx.matrawlongdesc FROM QL_mstmatraw mx WHERE mx.matrawoid=pod.matrefoid) WHEN 'General' THEN (SELECT mx.matgenlongdesc FROM QL_mstmatgen mx WHERE mx.matgenoid=pod.matrefoid) WHEN 'Spare Part' THEN (SELECT mx.sparepartlongdesc FROM QL_mstsparepart mx WHERE mx.sparepartoid=pod.matrefoid) WHEN 'Log' THEN (SELECT RTRIM((CASE WHEN (LTRIM(cat1shortdesc)='None' OR LTRIM(cat1shortdesc)='') THEN '' ELSE cat1shortdesc + ' ' END) + (CASE WHEN (LTRIM(cat2shortdesc)='None' OR LTRIM(cat2shortdesc)='') THEN '' ELSE cat2shortdesc + ' ' END) + (CASE WHEN (LTRIM(cat3shortdesc)='None' OR LTRIM(cat3shortdesc)='') THEN '' ELSE cat3shortdesc + ' ' END)) FROM QL_mstcat3 c3 INNER JOIN QL_mstcat2 c2 ON c2.cmpcode=c3.cmpcode AND c2.cat2oid=c3.cat2oid INNER JOIN QL_mstcat1 c1 ON c1.cmpcode=c3.cmpcode AND c1.cat1oid=c3.cat1oid WHERE cat3oid=pod.matrefoid) WHEN 'Sawn' THEN (SELECT RTRIM((CASE WHEN (LTRIM(cat1shortdesc)='None' OR LTRIM(cat1shortdesc)='') THEN '' ELSE cat1shortdesc + ' ' END) + (CASE WHEN (LTRIM(cat2shortdesc)='None' OR LTRIM(cat2shortdesc)='') THEN '' ELSE cat2shortdesc + ' ' END)) FROM QL_mstcat2 c2 INNER JOIN QL_mstcat1 c1 ON c1.cmpcode=c2.cmpcode AND c1.cat1oid=c2.cat1oid WHERE cat2oid=pod.matrefoid) ElSE '' END) AS [Description], pod.posubcondtl2qty [Qty], g.gendesc AS [Unit], pod.posubconcost [Cost], pod.posubcondtl2note [Note] FROM QL_trnposubconmst po INNER JOIN QL_trnposubcondtl2 pod ON po.cmpcode=pod.cmpcode AND po.posubconmstoid=pod.posubconmstoid INNER JOIN QL_mstgen g ON pod.posubcondtl2unitoid=g.genoid WHERE po.posubconmstoid=" + id + " ORDER BY pod.posubcondtl2seq";

                sSqlFtr = "SELECT posubcondpp [Total Cost], posubcontaxamt [Tax], posubcontotalcost [Grand Total], 'IDR' [Currency] FROM QL_trnposubconmst po WHERE po.cmpcode='" + cmp + "' AND po.posubconmstoid=" + id;
            }
            else if (tblname == "ql_trnpretrawmst")
            {
                sSqlHdr = "SELECT h.pretrawmstoid [Draft No.], CONVERT(VARCHAR(10), pretrawdate, 101) [Return Date], suppname [Supplier], pretrawmstnote [Return Note] FROM QL_trnpretrawmst h INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE h.cmpcode='" + cmp + "' AND h.pretrawmstoid=" + id + "";

                sSqlDtl = "SELECT pretrawdtlseq [No.], (SELECT mrrawno FROM QL_trnmrrawmst mrm WHERE mrm.cmpcode=pretd.cmpcode AND mrm.mrrawmstoid=pretd.mrrawmstoid) [MR No.], matrawcode [Mat. Code], matrawlongdesc [Mat. Desc], pretrawqty [DEC_Quantity], g.gendesc [Unit], g2.gendesc [Warehouse], pretrawdtlnote [Note] FROM QL_trnpretrawdtl pretd INNER JOIN QL_mstmatraw m ON m.matrawoid=pretd.matrawoid INNER JOIN QL_mstgen g ON g.genoid=pretd.pretrawunitoid INNER JOIN QL_mstgen g2 ON g2.genoid=pretd.pretrawwhoid WHERE pretd.cmpcode='" + cmp + "' AND pretd.pretrawmstoid=" + id + " ORDER BY pretrawdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnpretgenmst")
            {
                sSqlHdr = "SELECT h.pretgenmstoid [Draft No.], CONVERT(VARCHAR(10), pretgendate, 101) [Return Date], suppname [Supplier], pretgenmstnote [Return Note] FROM QL_trnpretgenmst h INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE h.cmpcode='" + cmp + "' AND h.pretgenmstoid=" + id + "";

                sSqlDtl = "SELECT pretgendtlseq [No.], (SELECT mrgenno FROM QL_trnmrgenmst mrm WHERE mrm.cmpcode=pretd.cmpcode AND mrm.mrgenmstoid=pretd.mrgenmstoid) [MR No.], matgencode [Mat. Code], matgenlongdesc [Mat. Desc], pretgenqty [DEC_Quantity], g.gendesc [Unit], g2.gendesc [Warehouse], pretgendtlnote [Note] FROM QL_trnpretgendtl pretd INNER JOIN QL_mstmatgen m ON m.matgenoid=pretd.matgenoid INNER JOIN QL_mstgen g ON g.genoid=pretd.pretgenunitoid INNER JOIN QL_mstgen g2 ON g2.genoid=pretd.pretgenwhoid WHERE pretd.cmpcode='" + cmp + "' AND pretd.pretgenmstoid=" + id + " ORDER BY pretgendtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnpretspmst")
            {
                sSqlHdr = "SELECT h.pretspmstoid [Draft No.], CONVERT(VARCHAR(10), pretspdate, 101) [Return Date], suppname [Supplier], pretspmstnote [Return Note] FROM QL_trnpretspmst h INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE h.cmpcode='" + cmp + "' AND h.pretspmstoid=" + id + "";

                sSqlDtl = "SELECT pretspdtlseq [No.], (SELECT mrspno FROM QL_trnmrspmst mrm WHERE mrm.cmpcode=pretd.cmpcode AND mrm.mrspmstoid=pretd.mrspmstoid) [MR No.], sparepartcode [Mat. Code], sparepartlongdesc [Mat. Desc], pretspqty [DEC_Quantity], g.gendesc [Unit], g2.gendesc [Warehouse], pretspdtlnote [Note] FROM QL_trnpretspdtl pretd INNER JOIN QL_mstsparepart m ON m.sparepartoid=pretd.sparepartoid INNER JOIN QL_mstgen g ON g.genoid=pretd.pretspunitoid INNER JOIN QL_mstgen g2 ON g2.genoid=pretd.pretspwhoid WHERE pretd.cmpcode='" + cmp + "' AND pretd.pretspmstoid=" + id + " ORDER BY pretspdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnpretitemmst")
            {
                sSqlHdr = "SELECT h.pretitemmstoid [Draft No.], CONVERT(VARCHAR(10), pretitemdate, 101) [Return Date], suppname [Supplier], pretitemmstnote [Return Note] FROM QL_trnpretitemmst h INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE h.cmpcode='" + cmp + "' AND h.pretitemmstoid=" + id + "";

                sSqlDtl = "SELECT pretitemdtlseq [No.], (SELECT mritemno FROM QL_trnmritemmst mrm WHERE mrm.cmpcode=pretd.cmpcode AND mrm.mritemmstoid=pretd.mritemmstoid) [MR No.], itemcode [Mat. Code], itemlongdesc [Mat. Desc], pretitemqty [DEC_Quantity], g.gendesc [Unit], g2.gendesc [Warehouse], pretitemdtlnote [Note] FROM QL_trnpretitemdtl pretd INNER JOIN QL_mstitem m ON m.itemoid=pretd.itemoid INNER JOIN QL_mstgen g ON g.genoid=pretd.pretitemunitoid INNER JOIN QL_mstgen g2 ON g2.genoid=pretd.pretitemwhoid WHERE pretd.cmpcode='" + cmp + "' AND pretd.pretitemmstoid=" + id + " ORDER BY pretitemdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnpretassetmst")
            {
                sSqlHdr = "SELECT h.pretassetmstoid [Draft No.], CONVERT(VARCHAR(10), pretassetdate, 101) [Return Date], suppname [Supplier], pretassetmstnote [Return Note] FROM QL_trnpretassetmst h INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE h.cmpcode='" + cmp + "' AND h.pretassetmstoid=" + id + "";

                sSqlDtl = "SELECT pretassetdtlseq [No.], pretd.pretassetreftype [Type], (SELECT mrassetno FROM QL_trnmrassetmst mrm WHERE mrm.cmpcode=pretd.cmpcode AND mrm.mrassetmstoid=pretd.mrassetmstoid) [MR No.], (CASE pretd.pretassetreftype WHEN 'General' THEN (SELECT x.matgencode FROM QL_mstmatgen x WHERE x.matgenoid=pretd.pretassetrefoid) WHEN 'Spare Part' THEN (SELECT x.sparepartcode FROM QL_mstsparepart x WHERE x.sparepartoid=pretd.pretassetrefoid) ELSE '' END) [Mat. Code], (CASE pretd.pretassetreftype WHEN 'General' THEN (SELECT x.matgenlongdesc FROM QL_mstmatgen x WHERE x.matgenoid=pretd.pretassetrefoid) WHEN 'Spare Part' THEN (SELECT x.sparepartlongdesc FROM QL_mstsparepart x WHERE x.sparepartoid=pretd.pretassetrefoid) ELSE '' END) [Mat. Desc], pretassetqty [DEC_Quantity], g.gendesc [Unit], g2.gendesc [Warehouse], pretassetdtlnote [Note] FROM QL_trnpretassetdtl pretd INNER JOIN QL_mstgen g ON g.genoid=pretd.pretassetunitoid INNER JOIN QL_mstgen g2 ON g2.genoid=pretd.pretassetwhoid WHERE pretd.cmpcode='" + cmp + "' AND pretd.pretassetmstoid=" + id + " ORDER BY pretassetdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnpretservicemst")
            {
                sSqlHdr = "SELECT h.pretservicemstoid [Draft No.], CONVERT(VARCHAR(10), pretservicedate, 101) [Return Date], suppname [Supplier], pretservicemstnote [Return Note] FROM QL_trnpretservicemst h INNER JOIN QL_mstsupp s ON s.suppoid=h.suppoid WHERE h.cmpcode='" + cmp + "' AND h.pretservicemstoid=" + id + "";

                sSqlDtl = "SELECT pretservicedtlseq [No.], (SELECT mrserviceno FROM QL_trnmrservicemst mrm WHERE mrm.cmpcode=pretd.cmpcode AND mrm.mrservicemstoid=pretd.mrservicemstoid) [MR No.], servicecode [Code], servicelongdesc [Description], pretserviceqty [DEC_Qty], g.gendesc [Unit], pretservicedtlnote [Note] FROM QL_trnpretservicedtl pretd INNER JOIN QL_mstservice m ON m.serviceoid=pretd.serviceoid INNER JOIN QL_mstgen g ON g.genoid=pretserviceunitoid WHERE pretd.cmpcode='" + cmp + "' AND pretd.pretservicemstoid=" + id + " ORDER BY pretservicedtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "/*QL_trnaprawmst*/QL_trnbelimst")
            {
                sSqlHdr = "SELECT DISTINCT ap.cmpcode, ap.aprawmstoid AS [Draft No.], ap.aprawno AS [A/P No.], CONVERT(VARCHAR(10), ap.aprawdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=aprawpaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),aprawdate), 101) AS [Due Date], CONVERT(VARCHAR(10), ap.aprawdatetakegiro, 101) AS [Date Take Giro], s.suppname [Supplier], ap.aprawmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnaprawmst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.aprawmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.aprawpaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND ap.aprawmstoid=" + id + " ORDER BY [Request Date] DESC";

                sSqlDtl = "SELECT apd.aprawdtlseq AS [No.], m.matrawlongdesc AS [Mat. Desc], apd.aprawqty AS [DEC_Quantity], g.gendesc AS [Unit], apd.aprawprice AS [DEC_Price], apd.aprawdtlamt AS [DEC_Amount], apd.aprawdtldiscamt AS [DEC_Disc.], apd.aprawdtlnetto AS [DEC_Netto], apd.aprawdtlnote AS [Note] FROM /*QL_trnaprawmst*/QL_trnbelimst ap INNER JOIN QL_trnaprawdtl apd ON ap.cmpcode=apd.cmpcode AND ap.aprawmstoid=apd.aprawmstoid INNER JOIN QL_mstmatraw m ON apd.matrawoid=m.matrawoid INNER JOIN QL_mstgen g ON apd.aprawunitoid=g.genoid INNER JOIN QL_trnmrrawdtl mrd ON mrd.cmpcode=apd.cmpcode AND mrd.mrrawdtloid=apd.mrrawdtloid AND mrd.mrrawmstoid=apd.mrrawmstoid WHERE ap.cmpcode='" + cmp + "' AND ap.aprawmstoid=" + id + " ORDER BY apd.aprawdtlseq";

                sSqlFtr = "SELECT ap.aprawtotalamt AS [Total Amount], ap.aprawtotaltax AS [Total Tax], ap.aprawgrandtotal AS [Grand Total], c.currcode [Currency] FROM /*QL_trnaprawmst*/QL_trnbelimst ap INNER JOIN QL_mstcurr c ON c.curroid=ap.curroid  WHERE ap.cmpcode='" + cmp + "' AND ap.aprawmstoid=" + id;
            }
            else if (tblname == "/*QL_trnapgenmst*/QL_trnbelimst")
            {
                sSqlHdr = "SELECT DISTINCT ap.cmpcode, ap.apgenmstoid AS [Draft No.], ap.apgenno AS [A/P No.], CONVERT(VARCHAR(10), ap.apgendate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apgenpaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apgendate), 101) AS [Due Date], CONVERT(VARCHAR(10), ap.apgendatetakegiro, 101) AS [Date Take Giro], s.suppname [Supplier], ap.apgenmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapgenmst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apgenmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apgenpaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND ap.apgenmstoid=" + id + " ORDER BY [Request Date] DESC";

                sSqlDtl = "SELECT apd.apgendtlseq AS [No.], m.matgenlongdesc AS [Mat. Desc], apd.apgenqty AS [DEC_Quantity], g.gendesc AS [Unit], apd.apgenprice AS [DEC_Price], apd.apgendtlamt AS [DEC_Amount], apd.apgendtldiscamt AS [DEC_Disc.], apd.apgendtlnetto AS [DEC_Netto], apd.apgendtlnote AS [Note] FROM /*QL_trnapgenmst*/QL_trnbelimst ap INNER JOIN QL_trnapgendtl apd ON ap.cmpcode=apd.cmpcode AND ap.apgenmstoid=apd.apgenmstoid INNER JOIN QL_mstmatgen m ON apd.matgenoid=m.matgenoid INNER JOIN QL_mstgen g ON apd.apgenunitoid=g.genoid INNER JOIN QL_trnmrgendtl mrd ON mrd.cmpcode=apd.cmpcode AND mrd.mrgendtloid=apd.mrgendtloid AND mrd.mrgenmstoid=apd.mrgenmstoid WHERE ap.cmpcode='" + cmp + "' AND ap.apgenmstoid=" + id + " ORDER BY apd.apgendtlseq";

                sSqlFtr = "SELECT ap.apgentotalamt AS [Total Amount], ap.apgentotaltax AS [Total Tax], ap.apgengrandtotal AS [Grand Total], c.currcode [Currency] FROM /*QL_trnapgenmst*/QL_trnbelimst ap INNER JOIN QL_mstcurr c ON c.curroid=ap.curroid  WHERE ap.cmpcode='" + cmp + "' AND ap.apgenmstoid=" + id;
            }
            else if (tblname == "/*QL_trnapspmst*/QL_trnbelimst")
            {
                sSqlHdr = "SELECT DISTINCT ap.cmpcode, ap.apspmstoid AS [Draft No.], ap.apspno AS [A/P No.], CONVERT(VARCHAR(10), ap.apspdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apsppaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apspdate), 101) AS [Due Date], CONVERT(VARCHAR(10), ap.apspdatetakegiro, 101) AS [Date Take Giro], s.suppname [Supplier], ap.apspmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapspmst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apspmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apsppaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND ap.apspmstoid=" + id + " ORDER BY [Request Date] DESC";

                sSqlDtl = "SELECT apd.apspdtlseq AS [No.], m.sparepartlongdesc AS [Mat. Desc], apd.apspqty AS [DEC_Quantity], g.gendesc AS [Unit], apd.apspprice AS [DEC_Price], apd.apspdtlamt AS [DEC_Amount], apd.apspdtldiscamt AS [DEC_Disc.], apd.apspdtlnetto AS [DEC_Netto], apd.apspdtlnote AS [Note] FROM /*QL_trnapspmst*/QL_trnbelimst ap INNER JOIN QL_trnapspdtl apd ON ap.cmpcode=apd.cmpcode AND ap.apspmstoid=apd.apspmstoid INNER JOIN QL_mstsparepart m ON apd.sparepartoid=m.sparepartoid INNER JOIN QL_mstgen g ON apd.apspunitoid=g.genoid INNER JOIN QL_trnmrspdtl mrd ON mrd.cmpcode=apd.cmpcode AND mrd.mrspdtloid=apd.mrspdtloid AND mrd.mrspmstoid=apd.mrspmstoid WHERE ap.cmpcode='" + cmp + "' AND ap.apspmstoid=" + id + " ORDER BY apd.apspdtlseq";

                sSqlFtr = "SELECT ap.apsptotalamt AS [Total Amount], ap.apsptotaltax AS [Total Tax], ap.apspgrandtotal AS [Grand Total], c.currcode [Currency] FROM /*QL_trnapspmst*/QL_trnbelimst ap INNER JOIN QL_mstcurr c ON c.curroid=ap.curroid WHERE ap.cmpcode='" + cmp + "' AND ap.apspmstoid=" + id;
            }
            else if (tblname == "/*QL_trnapitemmst*/QL_trnbelimst")
            {
                sSqlHdr = "SELECT DISTINCT ap.cmpcode, ap.apitemmstoid AS [Draft No.], ap.apitemno AS [A/P No.], CONVERT(VARCHAR(10), ap.apitemdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apitempaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apitemdate), 101) AS [Due Date], CONVERT(VARCHAR(10), ap.apitemdatetakegiro, 101) AS [Date Take Giro], s.suppname [Supplier], ap.apitemmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapitemmst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apitemmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apitempaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND ap.apitemmstoid=" + id + " ORDER BY [Request Date] DESC";

                sSqlDtl = "SELECT apd.apitemdtlseq AS [No.], m.itemlongdesc AS [Mat. Desc], apd.apitemqty AS [DEC_Quantity], g.gendesc AS [Unit], apd.apitemprice AS [DEC_Price], apd.apitemdtlamt AS [DEC_Amount], apd.apitemdtldiscamt AS [DEC_Disc.], apd.apitemdtlnetto AS [DEC_Netto], apd.apitemdtlnote AS [Note] FROM /*QL_trnapitemmst*/QL_trnbelimst ap INNER JOIN QL_trnapitemdtl apd ON ap.cmpcode=apd.cmpcode AND ap.apitemmstoid=apd.apitemmstoid INNER JOIN QL_mstitem m ON apd.itemoid=m.itemoid INNER JOIN QL_mstgen g ON apd.apitemunitoid=g.genoid INNER JOIN QL_trnmritemdtl mrd ON mrd.cmpcode=apd.cmpcode AND mrd.mritemdtloid=apd.mritemdtloid AND mrd.mritemmstoid=apd.mritemmstoid WHERE ap.cmpcode='" + cmp + "' AND ap.apitemmstoid=" + id + " ORDER BY apd.apitemdtlseq";

                sSqlFtr = "SELECT ap.apitemtotalamt AS [Total Amount], ap.apitemtotaltax AS [Total Tax], ap.apitemgrandtotal AS [Grand Total], c.currcode [Currency] FROM /*QL_trnapitemmst*/QL_trnbelimst ap INNER JOIN QL_mstcurr c ON c.curroid=ap.curroid WHERE ap.cmpcode='" + cmp + "' AND ap.apitemmstoid=" + id;
            }
            else if (tblname == "/*QL_trnapassetmst*/QL_trnbelimst")
            {
                sSqlHdr = "SELECT DISTINCT ap.cmpcode, ap.apassetmstoid AS [Draft No.], ap.apassetno AS [A/P No.], CONVERT(VARCHAR(10), ap.apassetdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apassetpaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apassetdate), 101) AS [Due Date], CONVERT(VARCHAR(10), ap.apassetdatetakegiro, 101) AS [Date Take Giro], s.suppname [Supplier], ap.apassetmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapassetmst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apassetmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apassetpaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND ap.apassetmstoid=" + id + " ORDER BY [Request Date] DESC";

                sSqlDtl = "SELECT apd.apassetdtlseq AS [No.], (CASE apd.apassetreftype WHEN 'General' THEN (SELECT x.matgenlongdesc FROM QL_mstmatgen x WHERE x.matgenoid=apd.apassetrefoid) WHEN 'Spare Part' THEN (SELECT x.sparepartlongdesc FROM QL_mstsparepart x WHERE x.sparepartoid=apd.apassetrefoid) ELSE '' END) AS [Mat. Desc], apd.apassetqty AS [DEC_Quantity], g.gendesc AS [Unit], apd.apassetprice AS [DEC_Price], apd.apassetdtlamt AS [DEC_Amount], apd.apassetdtldiscamt AS [DEC_Disc.], apd.apassetdtlnetto AS [DEC_Netto], apd.apassetdtlnote AS [Note] FROM /*QL_trnapassetmst*/QL_trnbelimst ap INNER JOIN QL_trnapassetdtl apd ON ap.cmpcode=apd.cmpcode AND ap.apassetmstoid=apd.apassetmstoid INNER JOIN QL_mstgen g ON apd.apassetunitoid=g.genoid INNER JOIN QL_trnmrassetdtl mrd ON mrd.cmpcode=apd.cmpcode AND mrd.mrassetdtloid=apd.mrassetdtloid AND mrd.mrassetmstoid=apd.mrassetmstoid WHERE ap.cmpcode='" + cmp + "' AND ap.apassetmstoid=" + id + " ORDER BY apd.apassetdtlseq";

                sSqlFtr = "SELECT ap.apassettotalamt AS [Total Amount], ap.apassettotaltax AS [Total Tax], ap.apassetgrandtotal AS [Grand Total], c.currcode [Currency] FROM /*QL_trnapassetmst*/QL_trnbelimst ap INNER JOIN QL_mstcurr c ON c.curroid=ap.curroid  WHERE ap.cmpcode='" + cmp + "' AND ap.apassetmstoid=" + id;
            }
            else if (tblname == "ql_trnapservicemst")
            {
                sSqlHdr = "SELECT DISTINCT ap.cmpcode, ap.apservicemstoid [Draft No.], apserviceno [A/P No.], CONVERT(VARCHAR(10), apservicedate, 101) [A/P Date], suppname [Supplier], currcode [Currency], apservicemstnote [A/P Note], ap.upduser [Last Update By], ap.updtime [Last Update On], CONVERT(VARCHAR(10), DATEADD(day, (CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END), apservicedate), 101) [Recom. Due Date] FROM QL_trnapservicemst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_mstcurr c ON c.curroid=ap.curroid INNER JOIN QL_mstgen g ON g.genoid=ap.apservicepaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND ap.apservicemstoid=" + id;

                sSqlDtl = "SELECT apservicedtlseq AS [No.], servicecode [Code], servicelongdesc [Description], apserviceqty [DEC_Qty], g.gendesc [Unit], apserviceprice [DEC_Price], apservicedtlamt [DEC_Amount], apservicedtlnote [Note] FROM QL_trnapservicemst ap INNER JOIN QL_trnapservicedtl apd ON ap.cmpcode=apd.cmpcode AND ap.apservicemstoid=apd.apservicemstoid INNER JOIN QL_mstservice m ON apd.serviceoid=m.serviceoid INNER JOIN QL_mstgen g ON apserviceunitoid=g.genoid WHERE ap.cmpcode='" + cmp + "' AND ap.apservicemstoid=" + id + " ORDER BY apservicedtlseq";

                sSqlFtr = "SELECT apservicetotalamt [Total Amount], apservicetotaltax [Total Tax], apservicegrandtotal [Grand Total], currcode [Currency] FROM QL_trnapservicemst ap INNER JOIN QL_mstcurr c ON c.curroid=ap.curroid WHERE ap.cmpcode='" + cmp + "' AND ap.apservicemstoid=" + id;
            }
            else if (tblname == "/*QL_trnapothermst*/QL_trnbelimst")
            {
                sSqlHdr = "SELECT DISTINCT ap.cmpcode, ap.apothermstoid AS [Draft No.], ap.apotherno AS [A/P No.], CONVERT(VARCHAR(10), ap.apotherdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apotherpaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apotherdate), 101) AS [Due Date], CONVERT(VARCHAR(10), ap.apotherdatetakegiro, 101) AS [Date Take Giro], s.suppname [Supplier], ap.apothermstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapothermst*/QL_trnbelimst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apothermstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apotherpaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND ap.apothermstoid=" + id + " ORDER BY [Request Date] DESC";

                sSqlDtl = "SELECT apd.apotherdtlseq AS [No.], apd.apothermatlongdesc AS [Mat. Desc], apd.apotherqty AS [DEC_Quantity], apd.apotherprice AS [DEC_Price], apd.apotherdtlamt AS [DEC_Amount], apd.apotherdtlnetto AS [DEC_Netto], apd.apotherdtlnote AS [Note] FROM /*QL_trnapothermst*/QL_trnbelimst ap INNER JOIN QL_trnapotherdtl apd ON ap.cmpcode=apd.cmpcode AND ap.apothermstoid=apd.apothermstoid WHERE ap.cmpcode='" + cmp + "' AND ap.apothermstoid=" + id + " ORDER BY apd.apotherdtlseq";

                sSqlFtr = "SELECT ap.apothertotalamt AS [Total Amount], ap.apothertotaltax AS [Total Tax], ap.apothergrandtotal AS [Grand Total], c.currcode [Currency] FROM /*QL_trnapothermst*/QL_trnbelimst ap INNER JOIN QL_mstcurr c ON c.curroid=ap.curroid WHERE ap.cmpcode='" + cmp + "' AND ap.apothermstoid=" + id;
            }
            else if (tblname == "/*QL_trnapcashbankmst*/QL_trncashbankmst")
            {
                sSqlHdr = "SELECT DISTINCT ap.cmpcode, ap.apcashbankmstoid AS [Draft No.], ap.apcashbankno AS [A/P No.], CONVERT(VARCHAR(10), ap.apcashbankdate, 101) AS [A/P Date], (SELECT ga.gendesc FROM QL_mstgen ga WHERE ga.genoid=apcashbankpaytypeoid ) AS [Payment Type], CONVERT(VARCHAR(10),DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apcashbankdate), 101) AS [Due Date], CONVERT(VARCHAR(10), ap.apcashbankdatetakegiro, 101) AS [Date Take Giro], s.suppname [Supplier], ap.apcashbankmstnote AS [A/P Note], apr.requestuser AS [Request User], CONVERT(VARCHAR(10), apr.requestdate, 101) AS [Request Date] FROM /*QL_trnapcashbankmst*/QL_trncashbankmst ap INNER JOIN QL_mstsupp s ON ap.suppoid=s.suppoid INNER JOIN QL_approval apr ON ap.apcashbankmstoid=apr.oid AND apr.statusrequest='New' INNER JOIN QL_mstgen g ON g.genoid=ap.apcashbankpaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND ap.apcashbankmstoid=" + id + " ORDER BY [Request Date] DESC";

                sSqlDtl = "SELECT apd.apcashbankdtlseq AS [No.], apd.apcashbankmatlongdesc AS [Mat. Desc], apd.apcashbankqty AS [DEC_Quantity], apd.apcashbankprice AS [DEC_Price], apd.apcashbankdtlamt AS [DEC_Amount], apd.apcashbankdtlnetto AS [DEC_Netto], apd.apcashbankdtlnote AS [Note] FROM /*QL_trnapcashbankmst*/QL_trncashbankmst ap INNER JOIN QL_trnapcashbankdtl apd ON ap.cmpcode=apd.cmpcode AND ap.apcashbankmstoid=apd.apcashbankmstoid WHERE ap.cmpcode='" + cmp + "' AND ap.apcashbankmstoid=" + id + " ORDER BY apd.apcashbankdtlseq";

                sSqlFtr = "SELECT ap.apcashbanktotalamt AS [Total Amount], ap.apcashbanktotaltax AS [Total Tax], ap.apcashbankgrandtotal AS [Grand Total], c.currcode [Currency] FROM /*QL_trnapcashbankmst*/QL_trncashbankmst ap INNER JOIN QL_mstcurr c ON c.curroid=ap.curroid WHERE ap.cmpcode='" + cmp + "' AND ap.apcashbankmstoid=" + id;
            }
            else if (tblname == "ql_trnsorawmst")
            {
                sSqlHdr = "SELECT so.sorawmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.sorawdate, 101) AS [SO Date], c.custname [Customer], so.sorawmstnote [SO Note], currcode [Currency], rate2res1 AS [Rate To IDR], so.createuser [Create User], so.upduser [Last Update By], so.updtime [Last Update On] FROM QL_trnsorawmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_mstcurr cu ON cu.curroid=so.curroid INNER JOIN QL_mstrate2 r ON r.rate2oid=so.rate2oid WHERE so.cmpcode='" + cmp + "' AND so.sorawmstoid=" + id + "";

                sSqlDtl = "SELECT sod.sorawdtlseq [No.], m.matrawlongdesc AS [Mat. Desc], sod.sorawqty [DEC_Quantity], g.gendesc AS [Unit], ISNULL((SELECT TOP 1 mp.lastsalesprice FROM QL_mstmatrawprice mp WHERE mp.cmpcode=so.cmpcode AND mp.matrawoid=sod.matrawoid AND mp.refname='CUSTOMER' AND mp.curroid=so.curroid ORDER BY mp.updtime DESC), 0.0) AS [DEC_Last Price], sod.sorawprice [DEC_Price], sod.sorawdtlamt [DEC_Amount], sod.sorawdtldiscamt [DEC_Disc.], sod.sorawdtlnetto [DEC_Netto], sod.sorawdtlnote [Note] FROM QL_trnsorawmst so INNER JOIN QL_trnsorawdtl sod ON so.sorawmstoid=sod.sorawmstoid INNER JOIN QL_mstmatraw m ON sod.matrawoid=m.matrawoid INNER JOIN QL_mstgen g ON sod.sorawunitoid=g.genoid WHERE so.cmpcode='" + cmp + "' AND so.sorawmstoid=" + id + " ORDER BY sod.sorawdtlseq";

                sSqlFtr = "SELECT (so.sorawtotalamt - so.sorawtotaldiscdtl) AS [Total], so.sorawmstdiscamt [Header Disc.], so.sorawvat AS [Tax], so.sorawgrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnsorawmst so INNER JOIN QL_mstcurr c ON c.curroid=so.curroid WHERE so.cmpcode='" + cmp + "' AND so.sorawmstoid=" + id;
            }
            else if (tblname == "ql_trnsogenmst")
            {
                sSqlHdr = "SELECT so.sogenmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.sogendate, 101) AS [SO Date], c.custname [Customer], so.sogenmstnote [SO Note], currcode [Currency], rate2res1 AS [Rate To IDR], so.createuser [Create User], so.upduser [Last Update By], so.updtime [Last Update On] FROM QL_trnsogenmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_mstcurr cu ON cu.curroid=so.curroid INNER JOIN QL_mstrate2 r ON r.rate2oid=so.rate2oid WHERE so.cmpcode='" + cmp + "' AND so.sogenmstoid=" + id + "";

                sSqlDtl = "SELECT sod.sogendtlseq [No.], m.matgenlongdesc AS [Mat. Desc], sod.sogenqty [DEC_Quantity], g.gendesc AS [Unit], ISNULL((SELECT TOP 1 mp.lastsalesprice FROM QL_mstmatgenprice mp WHERE mp.cmpcode=so.cmpcode AND mp.matgenoid=sod.matgenoid AND mp.refname='CUSTOMER' AND mp.curroid=so.curroid ORDER BY mp.updtime DESC), 0.0) AS [DEC_Last Price], sod.sogenprice [DEC_Price], sod.sogendtlamt [DEC_Amount], sod.sogendtldiscamt [DEC_Disc.], sod.sogendtlnetto [DEC_Netto], sod.sogendtlnote [Note] FROM QL_trnsogenmst so INNER JOIN QL_trnsogendtl sod ON so.sogenmstoid=sod.sogenmstoid INNER JOIN QL_mstmatgen m ON sod.matgenoid=m.matgenoid INNER JOIN QL_mstgen g ON sod.sogenunitoid=g.genoid WHERE so.cmpcode='" + cmp + "' AND so.sogenmstoid=" + id + " ORDER BY sod.sogendtlseq";

                sSqlFtr = "SELECT (so.sogentotalamt - so.sogentotaldiscdtl) AS [Total], so.sogenmstdiscamt [Header Disc.], so.sogenvat AS [Tax], so.sogengrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnsogenmst so INNER JOIN QL_mstcurr c ON c.curroid=so.curroid WHERE so.cmpcode='" + cmp + "' AND so.sogenmstoid=" + id;
            }
            else if (tblname == "ql_trnsospmst")
            {
                sSqlHdr = "SELECT so.sospmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.sospdate, 101) AS [SO Date], c.custname [Customer], so.sospmstnote [SO Note], currcode [Currency], rate2res1 AS [Rate To IDR], so.createuser [Create User], so.upduser [Last Update By], so.updtime [Last Update On] FROM QL_trnsospmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_mstcurr cu ON cu.curroid=so.curroid INNER JOIN QL_mstrate2 r ON r.rate2oid=so.rate2oid WHERE so.cmpcode='" + cmp + "' AND so.sospmstoid=" + id + "";

                sSqlDtl = "SELECT sod.sospdtlseq [No.], m.sparepartlongdesc AS [Mat. Desc], sod.sospqty [DEC_Quantity], g.gendesc AS [Unit], ISNULL((SELECT TOP 1 mp.lastsalesprice FROM QL_mstsparepartprice mp WHERE mp.cmpcode=so.cmpcode AND mp.sparepartoid=sod.sparepartoid AND mp.refname='CUSTOMER' AND mp.curroid=so.curroid ORDER BY mp.updtime DESC), 0.0) AS [DEC_Last Price], sod.sospprice [DEC_Price], sod.sospdtlamt [DEC_Amount], sod.sospdtldiscamt [DEC_Disc.], sod.sospdtlnetto [DEC_Netto], sod.sospdtlnote [Note] FROM QL_trnsospmst so INNER JOIN QL_trnsospdtl sod ON so.sospmstoid=sod.sospmstoid INNER JOIN QL_mstsparepart m ON sod.sparepartoid=m.sparepartoid INNER JOIN QL_mstgen g ON sod.sospunitoid=g.genoid WHERE so.cmpcode='" + cmp + "' AND so.sospmstoid=" + id + " ORDER BY sod.sospdtlseq";

                sSqlFtr = "SELECT (so.sosptotalamt - so.sosptotaldiscdtl) AS [Total], so.sospmstdiscamt [Header Disc.], so.sospvat AS [Tax], so.sospgrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnsospmst so INNER JOIN QL_mstcurr c ON c.curroid=so.curroid WHERE so.cmpcode='" + cmp + "' AND so.sospmstoid=" + id;
            }
            else if (tblname == "ql_trnsoitemmst")
            {
                sSqlHdr = "SELECT so.soitemmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.soitemdate, 101) AS [SO Date], c.custname [Customer], so.soitemmstnote [SO Note], currcode [Currency], rate2res1 AS [Rate To IDR], so.createuser [Create User], so.upduser [Last Update By], so.updtime [Last Update On] FROM QL_trnsoitemmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_mstcurr cu ON cu.curroid=so.curroid INNER JOIN QL_mstrate2 r ON r.rate2oid=so.rate2oid WHERE so.cmpcode='" + cmp + "' AND so.soitemmstoid=" + id + "";

                sSqlDtl = "SELECT sod.soitemdtlseq [No.], m.itemlongdesc AS [Mat. Desc], sod.soitemqty [DEC_Quantity], g.gendesc AS [Unit], ISNULL((SELECT TOP 1 mp.lastsalesprice FROM QL_mstitemprice mp WHERE mp.cmpcode=so.cmpcode AND mp.itemoid=sod.itemoid AND mp.refname='CUSTOMER' AND mp.curroid=so.curroid ORDER BY mp.updtime DESC), 0.0) AS [DEC_Last Price], sod.soitemprice [DEC_Price], sod.soitemdtlamt [DEC_Amount], sod.soitemdtldiscamt [DEC_Disc.], sod.soitemdtlnetto [DEC_Netto], sod.soitemdtlnote [Note] FROM QL_trnsoitemmst so INNER JOIN QL_trnsoitemdtl sod ON so.soitemmstoid=sod.soitemmstoid INNER JOIN QL_mstitem m ON sod.itemoid=m.itemoid INNER JOIN QL_mstgen g ON sod.soitemunitoid=g.genoid WHERE so.cmpcode='" + cmp + "' AND so.soitemmstoid=" + id + " ORDER BY sod.soitemdtlseq";

                sSqlFtr = "SELECT (so.soitemtotalamt - so.soitemtotaldiscdtl) AS [Total], so.soitemmstdiscamt [Header Disc.], so.soitemvat AS [Tax], so.soitemgrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnsoitemmst so INNER JOIN QL_mstcurr c ON c.curroid=so.curroid WHERE so.cmpcode='" + cmp + "' AND so.soitemmstoid=" + id;
            }
            else if (tblname == "ql_trnsoassetmst")
            {
                sSqlHdr = "SELECT so.soassetmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.soassetdate, 101) AS [SO Date], c.custname [Customer], so.soassetmstnote [SO Note], currcode [Currency], rate2res1 AS [Rate To IDR], so.createuser [Create User], so.upduser [Last Update By], so.updtime [Last Update On] FROM QL_trnsoassetmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_mstcurr cu ON cu.curroid=so.curroid INNER JOIN QL_mstrate2 r ON r.rate2oid=so.rate2oid WHERE so.cmpcode='" + cmp + "' AND so.soassetmstoid=" + id + "";

                sSqlDtl = "SELECT sod.soassetdtlseq [No.], asst.assetno [Assets No.], (CASE asst.reftype WHEN 'General' THEN (SELECT x.matgenlongdesc FROM QL_mstmatgen x WHERE x.matgenoid=asst.refoid) WHEN 'Spare Part' THEN (SELECT x.sparepartlongdesc FROM QL_mstsparepart x WHERE x.sparepartoid=asst.refoid) ELSE '' END) AS [Assets], sod.soassetqty [DEC_Quantity], g.gendesc AS [Unit], (CASE asst.reftype WHEN 'General' THEN (ISNULL((SELECT TOP 1 mp.lastsalesprice FROM QL_mstmatgenprice mp WHERE mp.cmpcode=so.cmpcode AND mp.matgenoid=asst.refoid AND mp.refname='CUSTOMER' AND mp.curroid=so.curroid ORDER BY mp.updtime DESC), 0.0)) WHEN 'Spare Part' THEN (ISNULL((SELECT TOP 1 mp.lastsalesprice FROM QL_mstsparepartprice mp WHERE mp.cmpcode=so.cmpcode AND mp.sparepartoid=asst.refoid AND mp.refname='CUSTOMER' AND mp.curroid=so.curroid ORDER BY mp.updtime DESC), 0.0)) ELSE 0.0 END) AS [DEC_Last Price], sod.soassetprice [DEC_Price], sod.soassetdtlamt [DEC_Amount], sod.soassetdtldiscamt [DEC_Disc.], sod.soassetdtlnetto [DEC_Netto], sod.soassetdtlnote [Note] FROM QL_trnsoassetmst so INNER JOIN QL_trnsoassetdtl sod ON so.soassetmstoid=sod.soassetmstoid INNER JOIN /*QL_assetmst*/QL_mstmat asst ON sod.assetmstoid=asst.assetmstoid INNER JOIN QL_mstgen g ON sod.soassetunitoid=g.genoid WHERE so.cmpcode='" + cmp + "' AND so.soassetmstoid=" + id + " ORDER BY sod.soassetdtlseq";

                sSqlFtr = "SELECT (so.soassettotalamt - so.soassettotaldiscdtl) AS [Total], so.soassetmstdiscamt [Header Disc.], so.soassetvat AS [Tax], so.soassetgrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnsoassetmst so INNER JOIN QL_mstcurr c ON c.curroid=so.curroid WHERE so.cmpcode='" + cmp + "' AND so.soassetmstoid=" + id;
            }
            else if (tblname == "ql_trnsologmst")
            {
                sSqlHdr = "SELECT so.sologmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.sologdate, 101) AS [SO Date], c.custname [Customer], so.sologmstnote [SO Note], currcode [Currency], rate2res1 AS [Rate To IDR], so.createuser [Create User], so.upduser [Last Update By], so.updtime [Last Update On] FROM QL_trnsologmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_mstcurr cu ON cu.curroid=so.curroid INNER JOIN QL_mstrate2 r ON r.rate2oid=so.rate2oid WHERE so.cmpcode='" + cmp + "' AND so.sologmstoid=" + id + "";

                sSqlDtl = "SELECT sod.sologdtlseq [No.], RTRIM((CASE WHEN (LTRIM(cat1shortdesc)='None' OR LTRIM(cat1shortdesc)='') THEN '' ELSE cat1shortdesc + ' ' END) + (CASE WHEN (LTRIM(cat2shortdesc)='None' OR LTRIM(cat2shortdesc)='') THEN '' ELSE cat2shortdesc + ' ' END) + (CASE WHEN (LTRIM(cat3shortdesc)='None' OR LTRIM(cat3shortdesc)='') THEN '' ELSE cat3shortdesc + ' ' END)) AS [Mat. Desc], sod.sologqty [DEC_Quantity], g.gendesc AS [Unit], ISNULL((SELECT TOP 1 mp.lastsalesprice FROM QL_mstcat3price mp WHERE mp.cmpcode=so.cmpcode AND mp.cat3oid=sod.cat3oid AND mp.refname='CUSTOMER' AND mp.curroid=so.curroid ORDER BY mp.updtime DESC), 0.0) AS [DEC_Last Price], sod.sologprice [DEC_Price], sod.sologdtlamt [DEC_Amount], sod.sologdtldiscamt [DEC_Disc.], sod.sologdtlnetto [DEC_Netto], sod.sologdtlnote [Note] FROM QL_trnsologmst so INNER JOIN QL_trnsologdtl sod ON so.sologmstoid=sod.sologmstoid INNER JOIN QL_mstcat3 c3 ON c3.cat3oid=sod.cat3oid INNER JOIN QL_mstcat2 c2 ON c2.cmpcode=c3.cmpcode AND c2.cat2oid=c3.cat2oid AND c2.cat1oid=c3.cat1oid INNER JOIN QL_mstcat1 c1 ON c1.cmpcode=c3.cmpcode AND c1.cat1oid=c3.cat1oid INNER JOIN QL_mstgen g ON sod.sologunitoid=g.genoid WHERE so.cmpcode='" + cmp + "' AND so.sologmstoid=" + id + " ORDER BY sod.sologdtlseq";

                sSqlFtr = "SELECT (so.sologtotalamt - so.sologtotaldiscdtl) AS [Total], so.sologmstdiscamt [Header Disc.], so.sologvat AS [Tax], so.sologgrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnsologmst so INNER JOIN QL_mstcurr c ON c.curroid=so.curroid WHERE so.cmpcode='" + cmp + "' AND so.sologmstoid=" + id;
            }
            else if (tblname == "ql_trnsosawnmst")
            {
                sSqlHdr = "SELECT so.sosawnmstoid AS [Draft No.], CONVERT(VARCHAR(10), so.sosawndate, 101) AS [SO Date], c.custname [Customer], so.sosawnmstnote [SO Note], currcode [Currency], rate2res1 AS [Rate To IDR], so.createuser [Create User], so.upduser [Last Update By], so.updtime [Last Update On] FROM QL_trnsosawnmst so INNER JOIN QL_mstcust c ON so.custoid=c.custoid INNER JOIN QL_mstcurr cu ON cu.curroid=so.curroid INNER JOIN QL_mstrate2 r ON r.rate2oid=so.rate2oid WHERE so.cmpcode='" + cmp + "' AND so.sosawnmstoid=" + id + "";

                sSqlDtl = "SELECT sod.sosawndtlseq [No.], RTRIM((CASE WHEN (LTRIM(cat1shortdesc)='None' OR LTRIM(cat1shortdesc)='') THEN '' ELSE cat1shortdesc + ' ' END) + (CASE WHEN (LTRIM(cat2shortdesc)='None' OR LTRIM(cat2shortdesc)='') THEN '' ELSE cat2shortdesc + ' ' END) + (CASE WHEN (LTRIM(cat3shortdesc)='None' OR LTRIM(cat3shortdesc)='') THEN '' ELSE cat3shortdesc + ' ' END)) AS [Mat. Desc], sod.sosawnqty [DEC_Quantity], g.gendesc AS [Unit], ISNULL((SELECT TOP 1 mp.lastsalesprice FROM QL_mstcat3price mp WHERE mp.cmpcode=so.cmpcode AND mp.cat3oid=sod.cat3oid AND mp.refname='CUSTOMER' AND mp.curroid=so.curroid ORDER BY mp.updtime DESC), 0.0) AS [DEC_Last Price], sod.sosawnprice [DEC_Price], sod.sosawndtlamt [DEC_Amount], sod.sosawndtldiscamt [DEC_Disc.], sod.sosawndtlnetto [DEC_Netto], sod.sosawndtlnote [Note] FROM QL_trnsosawnmst so INNER JOIN QL_trnsosawndtl sod ON so.sosawnmstoid=sod.sosawnmstoid INNER JOIN QL_mstcat3 c3 ON c3.cat3oid=sod.cat3oid INNER JOIN QL_mstcat2 c2 ON c2.cmpcode=c3.cmpcode AND c2.cat2oid=c3.cat2oid AND c2.cat1oid=c3.cat1oid INNER JOIN QL_mstcat1 c1 ON c1.cmpcode=c3.cmpcode AND c1.cat1oid=c3.cat1oid INNER JOIN QL_mstgen g ON sod.sosawnunitoid=g.genoid WHERE so.cmpcode='" + cmp + "' AND so.sosawnmstoid=" + id + " ORDER BY sod.sosawndtlseq";

                sSqlFtr = "SELECT (so.sosawntotalamt - so.sosawntotaldiscdtl) AS [Total], so.sosawnmstdiscamt [Header Disc.], so.sosawnvat AS [Tax], so.sosawngrandtotalamt AS [Grand Total], c.currcode [Currency] FROM QL_trnsosawnmst so INNER JOIN QL_mstcurr c ON c.curroid=so.curroid WHERE so.cmpcode='" + cmp + "' AND so.sosawnmstoid=" + id;
            }
            else if (tblname == "ql_trnshipmentrawmst")
            {
                sSqlHdr = "SELECT sm.shipmentrawmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentrawdate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentrawmstnote [Shipment Note], sm.upduser [Last Update By], sm.updtime [Last Update On] FROM QL_trnshipmentrawmst sm INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE sm.cmpcode='" + cmp + "' AND sm.shipmentrawmstoid=" + id + "";

                sSqlDtl = "SELECT sd.shipmentrawdtlseq [No.], m.matrawcode [Code], m.matrawlongdesc [Description], sd.shipmentrawqty [Qty], g.gendesc AS [Unit], g2.gendesc AS [Warehouse], sd.shipmentrawdtlnote [Note] FROM QL_trnshipmentrawmst sm INNER JOIN QL_trnshipmentrawdtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentrawmstoid=sd.shipmentrawmstoid INNER JOIN QL_mstmatraw m ON sd.matrawoid=m.matrawoid INNER JOIN QL_mstgen g ON sd.shipmentrawunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentrawwhoid=g2.genoid WHERE sd.shipmentrawmstoid=" + id + " ORDER BY sd.shipmentrawdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnshipmentgenmst")
            {
                sSqlHdr = "SELECT sm.shipmentgenmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentgendate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentgenmstnote [Shipment Note], sm.upduser [Last Update By], sm.updtime [Last Update On] FROM QL_trnshipmentgenmst sm INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE sm.cmpcode='" + cmp + "' AND sm.shipmentgenmstoid=" + id + "";

                sSqlDtl = "SELECT sd.shipmentgendtlseq [No.], m.matgencode [Code], m.matgenlongdesc [Description], sd.shipmentgenqty [Qty], g.gendesc AS [Unit], g2.gendesc AS [Warehouse], sd.shipmentgendtlnote [Note] FROM QL_trnshipmentgenmst sm INNER JOIN QL_trnshipmentgendtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentgenmstoid=sd.shipmentgenmstoid INNER JOIN QL_mstmatgen m ON sd.matgenoid=m.matgenoid INNER JOIN QL_mstgen g ON sd.shipmentgenunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentgenwhoid=g2.genoid WHERE sd.shipmentgenmstoid=" + id + " ORDER BY sd.shipmentgendtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnshipmentspmst")
            {
                sSqlHdr = "SELECT sm.shipmentspmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentspdate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentspmstnote [Shipment Note], sm.upduser [Last Update By], sm.updtime [Last Update On] FROM QL_trnshipmentspmst sm INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE sm.cmpcode='" + cmp + "' AND sm.shipmentspmstoid=" + id + "";

                sSqlDtl = "SELECT sd.shipmentspdtlseq [No.], m.sparepartcode [Code], m.sparepartlongdesc [Description], sd.shipmentspqty [Qty], g.gendesc AS [Unit], g2.gendesc AS [Warehouse], sd.shipmentspdtlnote [Note] FROM QL_trnshipmentspmst sm INNER JOIN QL_trnshipmentspdtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentspmstoid=sd.shipmentspmstoid INNER JOIN QL_mstsparepart m ON sd.sparepartoid=m.sparepartoid INNER JOIN QL_mstgen g ON sd.shipmentspunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentspwhoid=g2.genoid WHERE sd.shipmentspmstoid=" + id + " ORDER BY sd.shipmentspdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnshipmentitemmst")
            {
                sSqlHdr = "SELECT sm.shipmentitemmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentitemdate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentitemmstnote [Shipment Note], sm.upduser [Last Update By], sm.updtime [Last Update On] FROM QL_trnshipmentitemmst sm INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE sm.cmpcode='" + cmp + "' AND sm.shipmentitemmstoid=" + id + "";

                sSqlDtl = "SELECT sd.shipmentitemdtlseq [No.], m.itemcode [Code], m.itemlongdesc [Description], sd.shipmentitemqty [Qty], g.gendesc AS [Unit], g2.gendesc AS [Warehouse], sd.shipmentitemdtlnote [Note] FROM QL_trnshipmentitemmst sm INNER JOIN QL_trnshipmentitemdtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentitemmstoid=sd.shipmentitemmstoid INNER JOIN QL_mstitem m ON sd.itemoid=m.itemoid INNER JOIN QL_mstgen g ON sd.shipmentitemunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentitemwhoid=g2.genoid WHERE sd.shipmentitemmstoid=" + id + " ORDER BY sd.shipmentitemdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnshipmentassetmst")
            {
                sSqlHdr = "SELECT sm.shipmentassetmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentassetdate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentassetmstnote [Shipment Note], sm.upduser [Last Update By], sm.updtime [Last Update On] FROM QL_trnshipmentassetmst sm INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE sm.cmpcode='" + cmp + "' AND sm.shipmentassetmstoid=" + id + "";

                sSqlDtl = "SELECT sd.shipmentassetdtlseq [No.], assetno [Asset No.], (CASE m.reftype WHEN 'General' THEN (SELECT x.matgencode FROM QL_mstmatgen x WHERE x.matgenoid=m.refoid) WHEN 'Spare Part' THEN (SELECT x.sparepartcode FROM QL_mstsparepart x WHERE x.sparepartoid=m.refoid) ELSE '' END) [Code], (CASE m.reftype WHEN 'General' THEN (SELECT x.matgenlongdesc FROM QL_mstmatgen x WHERE x.matgenoid=m.refoid) WHEN 'Spare Part' THEN (SELECT x.sparepartlongdesc FROM QL_mstsparepart x WHERE x.sparepartoid=m.refoid) ELSE '' END) [Description], sd.shipmentassetqty [Qty], g.gendesc AS [Unit], g2.gendesc AS [Warehouse], sd.shipmentassetdtlnote [Note] FROM QL_trnshipmentassetmst sm INNER JOIN QL_trnshipmentassetdtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentassetmstoid=sd.shipmentassetmstoid INNER JOIN /*QL_assetmst*/QL_mstmat m ON m.assetmstoid=sd.assetmstoid INNER JOIN QL_mstgen g ON sd.shipmentassetunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentassetwhoid=g2.genoid WHERE sd.shipmentassetmstoid=" + id + " ORDER BY sd.shipmentassetdtlseq";
       
                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnshipmentlogmst")
            {
                sSqlHdr = "SELECT sm.shipmentlogmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentlogdate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentlogmstnote [Shipment Note], sm.upduser [Last Update By], sm.updtime [Last Update On] FROM QL_trnshipmentlogmst sm INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE sm.cmpcode='" + cmp + "' AND sm.shipmentlogmstoid=" + id + "";

                sSqlDtl = "SELECT sd.shipmentlogdtlseq [No.], (matrawcode + '(' + logno + ')') AS [Code], matrawlongdesc AS [Description], sd.shipmentlogqty [Qty], g.gendesc AS [Unit], g2.gendesc AS [Warehouse], sd.shipmentlogdtlnote [Note] FROM QL_trnshipmentlogmst sm INNER JOIN QL_trnshipmentlogdtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentlogmstoid=sd.shipmentlogmstoid INNER JOIN QL_mstlog l ON sd.logoid=l.logoid INNER JOIN QL_mstmatraw m ON matrawoid=l.refoid INNER JOIN QL_mstgen g ON sd.shipmentlogunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentlogwhoid=g2.genoid WHERE sd.shipmentlogmstoid=" + id + " ORDER BY sd.shipmentlogdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnshipmentsawnmst")
            {
                sSqlHdr = "SELECT sm.shipmentsawnmstoid AS [Draft No.], CONVERT(VARCHAR(10), sm.shipmentsawndate, 101) AS [Shipment Date], c.custname [Customer], sm.shipmentsawnmstnote [Shipment Note], sm.upduser [Last Update By], sm.updtime [Last Update On] FROM QL_trnshipmentsawnmst sm INNER JOIN QL_mstcust c ON c.custoid=sm.custoid WHERE sm.cmpcode='" + cmp + "' AND sm.shipmentsawnmstoid=" + id + "";

                sSqlDtl = "SELECT sd.shipmentsawndtlseq [No.], (matrawcode + '(' + palletno + ')') AS [Code], matrawlongdesc AS [Description], sd.shipmentsawnqty [Qty], g.gendesc AS [Unit], g2.gendesc AS [Warehouse], sd.shipmentsawndtlnote [Note] FROM QL_trnshipmentsawnmst sm INNER JOIN QL_trnshipmentsawndtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentsawnmstoid=sd.shipmentsawnmstoid INNER JOIN QL_mstpallet l ON sd.palletoid=l.palletoid INNER JOIN QL_mstmatraw m ON matrawoid=l.refoid INNER JOIN QL_mstgen g ON sd.shipmentsawnunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentsawnwhoid=g2.genoid WHERE sd.shipmentsawnmstoid=" + id + " ORDER BY sd.shipmentsawndtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnsretrawmst")
            {
                sSqlHdr = "SELECT sretrawmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretrawdate, 101) AS [Return Date], custname [Customer], sretrawmstnote AS [Return Note], sretm.upduser [Last Update By], sretm.updtime [Last Update On] FROM QL_trnsretrawmst sretm INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE sretm.sretrawmstoid=" + id;

                sSqlDtl = "SELECT sretrawdtlseq AS [No.], matrawcode AS [Code], matrawlongdesc AS [Description], sretrawqty AS [Qty], gunit.gendesc AS [Unit], gwh.gendesc AS [Warehouse], sretrawdtlnote AS [Note] FROM QL_trnsretrawmst sretm INNER JOIN QL_trnsretrawdtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretrawmstoid=sretm.sretrawmstoid INNER JOIN QL_mstmatraw m ON m.matrawoid=sretd.matrawoid INNER JOIN QL_mstgen gunit ON gunit.genoid=sretrawunitoid INNER JOIN QL_mstgen gwh ON gwh.genoid=sretrawwhoid WHERE sretm.sretrawmstoid=" + id + " ORDER BY sretrawdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnsretgenmst")
            {
                sSqlHdr = "SELECT sretgenmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretgendate, 101) AS [Return Date], custname [Customer], sretgenmstnote AS [Return Note], sretm.upduser [Last Update By], sretm.updtime [Last Update On] FROM QL_trnsretgenmst sretm INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE sretm.sretgenmstoid=" + id;

                sSqlDtl = "SELECT sretgendtlseq AS [No.], matgencode AS [Code], matgenlongdesc AS [Description], sretgenqty AS [Qty], gunit.gendesc AS [Unit], gwh.gendesc AS [Warehouse], sretgendtlnote AS [Note] FROM QL_trnsretgenmst sretm INNER JOIN QL_trnsretgendtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretgenmstoid=sretm.sretgenmstoid INNER JOIN QL_mstmatgen m ON m.matgenoid=sretd.matgenoid INNER JOIN QL_mstgen gunit ON gunit.genoid=sretgenunitoid INNER JOIN QL_mstgen gwh ON gwh.genoid=sretgenwhoid WHERE sretm.sretgenmstoid=" + id + " ORDER BY sretgendtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnsretspmst")
            {
                sSqlHdr = "SELECT sretspmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretspdate, 101) AS [Return Date], custname [Customer], sretspmstnote AS [Return Note], sretm.upduser [Last Update By], sretm.updtime [Last Update On] FROM QL_trnsretspmst sretm INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE sretm.sretspmstoid=" + id;

                sSqlDtl = "SELECT sretspdtlseq AS [No.], sparepartcode AS [Code], sparepartlongdesc AS [Description], sretspqty AS [Qty], gunit.gendesc AS [Unit], gwh.gendesc AS [Warehouse], sretspdtlnote AS [Note] FROM QL_trnsretspmst sretm INNER JOIN QL_trnsretspdtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretspmstoid=sretm.sretspmstoid INNER JOIN QL_mstsparepart m ON m.sparepartoid=sretd.sparepartoid INNER JOIN QL_mstgen gunit ON gunit.genoid=sretspunitoid INNER JOIN QL_mstgen gwh ON gwh.genoid=sretspwhoid WHERE sretm.sretspmstoid=" + id + " ORDER BY sretspdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnsretitemmst")
            {
                sSqlHdr = "SELECT sretitemmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretitemdate, 101) AS [Return Date], custname [Customer], sretitemmstnote AS [Return Note], sretm.upduser [Last Update By], sretm.updtime [Last Update On] FROM QL_trnsretitemmst sretm INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE sretm.sretitemmstoid=" + id;

                sSqlDtl = "SELECT sretitemdtlseq AS [No.], itemcode AS [Code], itemlongdesc AS [Description], sretitemqty AS [Qty], gunit.gendesc AS [Unit], gwh.gendesc AS [Warehouse], sretitemdtlnote AS [Note] FROM QL_trnsretitemmst sretm INNER JOIN QL_trnsretitemdtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretitemmstoid=sretm.sretitemmstoid INNER JOIN QL_mstitem m ON m.itemoid=sretd.itemoid INNER JOIN QL_mstgen gunit ON gunit.genoid=sretitemunitoid INNER JOIN QL_mstgen gwh ON gwh.genoid=sretitemwhoid WHERE sretm.sretitemmstoid=" + id + " ORDER BY sretitemdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnsretassetmst")
            {
                sSqlHdr = "SELECT sretassetmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretassetdate, 101) AS [Return Date], custname [Customer], sretassetmstnote AS [Return Note], sretm.upduser [Last Update By], sretm.updtime [Last Update On] FROM QL_trnsretassetmst sretm INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE sretm.sretassetmstoid=" + id;

                sSqlDtl = "SELECT sretassetdtlseq AS [No.], assetno AS [Asset No.], (CASE am.reftype WHEN 'General' THEN 'General Material' ELSE am.reftype END) AS [Type], (CASE am.reftype WHEN 'General' THEN (SELECT matgencode FROM QL_mstmatgen m WHERE matgenoid=am.refoid) WHEN 'Spare Part' THEN (SELECT sparepartcode FROM QL_mstsparepart m WHERE sparepartoid=am.refoid) ELSE '' END) AS [Code], (CASE am.reftype WHEN 'General' THEN (SELECT matgenlongdesc FROM QL_mstmatgen m WHERE matgenoid=am.refoid) WHEN 'Spare Part' THEN (SELECT sparepartlongdesc FROM QL_mstsparepart m WHERE sparepartoid=am.refoid) ELSE '' END) AS [Description], sretassetqty AS [Qty], gunit.gendesc AS [Unit], gwh.gendesc AS [Warehouse], sretassetdtlnote AS [Note] FROM QL_trnsretassetmst sretm INNER JOIN QL_trnsretassetdtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretassetmstoid=sretm.sretassetmstoid INNER JOIN /*QL_assetmst*/QL_mstmat am ON am.cmpcode=sretd.cmpcode AND am.assetmstoid=sretd.assetmstoid INNER JOIN QL_mstgen gunit ON gunit.genoid=sretassetunitoid INNER JOIN QL_mstgen gwh ON gwh.genoid=sretassetwhoid WHERE sretm.sretassetmstoid=" + id + " ORDER BY sretassetdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnsretlogmst")
            {
                sSqlHdr = "SELECT sretlogmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretlogdate, 101) AS [Return Date], custname [Customer], sretlogmstnote AS [Return Note], sretm.upduser [Last Update By], sretm.updtime [Last Update On] FROM QL_trnsretlogmst sretm INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE sretm.sretlogmstoid=" + id;

                sSqlDtl = "SELECT sretlogdtlseq AS [No.], logno AS [Log No.], matrawcode AS [Code], matrawlongdesc AS [Description], sretlogqty AS [Qty], gunit.gendesc AS [Unit], gwh.gendesc AS [Warehouse], sretlogdtlnote AS [Note] FROM QL_trnsretlogmst sretm INNER JOIN QL_trnsretlogdtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretlogmstoid=sretm.sretlogmstoid INNER JOIN QL_mstlog l ON l.cmpcode=sretd.cmpcode AND l.logoid=sretd.logoid INNER JOIN QL_mstmatraw m ON m.matrawoid=l.refoid INNER JOIN QL_mstgen gunit ON gunit.genoid=sretlogunitoid INNER JOIN QL_mstgen gwh ON gwh.genoid=sretlogwhoid WHERE sretm.sretlogmstoid=" + id + " ORDER BY sretlogdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnsretsawnmst")
            {
                sSqlHdr = "SELECT sretsawnmstoid AS [Draft No.], CONVERT(VARCHAR(10), sretsawndate, 101) AS [Return Date], custname [Customer], sretsawnmstnote AS [Return Note], sretm.upduser [Last Update By], sretm.updtime [Last Update On] FROM QL_trnsretsawnmst sretm INNER JOIN QL_mstcust c ON c.custoid=sretm.custoid WHERE sretm.sretsawnmstoid=" + id;

                sSqlDtl = "SELECT sretsawndtlseq AS [No.], palletno AS [Pallet No.], matrawcode AS [Code], matrawlongdesc AS [Description], sretsawnqty AS [Qty], gunit.gendesc AS [Unit], gwh.gendesc AS [Warehouse], sretsawndtlnote AS [Note] FROM QL_trnsretsawnmst sretm INNER JOIN QL_trnsretsawndtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretsawnmstoid=sretm.sretsawnmstoid INNER JOIN QL_mstpallet l ON l.cmpcode=sretd.cmpcode AND l.palletoid=sretd.palletoid INNER JOIN QL_mstmatraw m ON m.matrawoid=l.refoid INNER JOIN QL_mstgen gunit ON gunit.genoid=sretsawnunitoid INNER JOIN QL_mstgen gwh ON gwh.genoid=sretsawnwhoid WHERE sretm.sretsawnmstoid=" + id + " ORDER BY sretsawndtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "/*QL_trnarrawmst*/QL_trnjualmst")
            {
                sSqlHdr = "SELECT arrawmstoid AS [Draft No.], CONVERT(VARCHAR(10), arrawdate, 101) AS [PEB Date], custname [Customer], ISNULL(arrawmstres3,'') AS [Invoice No.], arrawmstnote AS [A/R Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM /*QL_trnarrawmst*/QL_trnjualmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arrawmstoid=" + id;

                sSqlDtl = "SELECT arrawdtlseq AS [No.], matrawcode AS [Code], matrawlongdesc AS [Description], arrawqty AS [Qty], gendesc AS [Unit], arrawprice AS [Price], arrawdtlamt AS [Amount], arrawdtldiscamt AS [Disc.], arrawdtlnetto AS [Netto], arrawdtlnote AS [Note] FROM /*QL_trnarrawmst*/QL_trnjualmst arm INNER JOIN QL_trnarrawdtl ard ON ard.cmpcode=arm.cmpcode AND ard.arrawmstoid=arm.arrawmstoid INNER JOIN QL_mstmatraw m ON m.matrawoid=ard.matrawoid INNER JOIN QL_mstgen g ON genoid=arrawunitoid WHERE arm.arrawmstoid=" + id + " ORDER BY arrawdtlseq";

                sSqlFtr = "SELECT (arrawtotalamt - arrawtotaldiscdtl) [Total], arrawmstdiscamt [Header Disc.], arrawtaxamt [Tax], arrawgrandtotal [Grand Total], c.currcode [Currency] FROM /*QL_trnarrawmst*/QL_trnjualmst arm INNER JOIN QL_mstcurr c ON c.curroid=arm.curroid WHERE arm.arrawmstoid=" + id;
            }
            else if (tblname == "ql_trnargenmst")
            {
                sSqlHdr = "SELECT argenmstoid AS [Draft No.], CONVERT(VARCHAR(10), argendate, 101) AS [PEB Date], custname [Customer], ISNULL(argenmstres3,'') AS [Invoice No.], argenmstnote AS [A/R Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM QL_trnargenmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.argenmstoid=" + id;

                sSqlDtl = "SELECT argendtlseq AS [No.], matgencode AS [Code], matgenlongdesc AS [Description], argenqty AS [Qty], gendesc AS [Unit], argenprice AS [Price], argendtlamt AS [Amount], argendtldiscamt AS [Disc.], argendtlnetto AS [Netto], argendtlnote AS [Note] FROM QL_trnargenmst arm INNER JOIN QL_trnargendtl ard ON ard.cmpcode=arm.cmpcode AND ard.argenmstoid=arm.argenmstoid INNER JOIN QL_mstmatgen m ON m.matgenoid=ard.matgenoid INNER JOIN QL_mstgen g ON genoid=argenunitoid WHERE arm.argenmstoid=" + id + " ORDER BY argendtlseq";

                sSqlFtr = "SELECT (argentotalamt - argentotaldiscdtl) [Total], argenmstdiscamt [Header Disc.], argentaxamt [Tax], argengrandtotal [Grand Total], c.currcode [Currency] FROM QL_trnargenmst arm INNER JOIN QL_mstcurr c ON c.curroid=arm.curroid WHERE arm.argenmstoid=" + id;
            }
            else if (tblname == "ql_trnarspmst")
            {
                sSqlHdr = "SELECT arspmstoid AS [Draft No.], CONVERT(VARCHAR(10), arspdate, 101) AS [PEB Date], custname [Customer], ISNULL(arspmstres3,'') AS [Invoice No.], arspmstnote AS [A/R Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM QL_trnarspmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arspmstoid=" + id;

                sSqlDtl = "SELECT arspdtlseq AS [No.], sparepartcode AS [Code], sparepartlongdesc AS [Description], arspqty AS [Qty], gendesc AS [Unit], arspprice AS [Price], arspdtlamt AS [Amount], arspdtldiscamt AS [Disc.], arspdtlnetto AS [Netto], arspdtlnote AS [Note] FROM QL_trnarspmst arm INNER JOIN QL_trnarspdtl ard ON ard.cmpcode=arm.cmpcode AND ard.arspmstoid=arm.arspmstoid INNER JOIN QL_mstsparepart m ON m.sparepartoid=ard.sparepartoid INNER JOIN QL_mstgen g ON genoid=arspunitoid WHERE arm.arspmstoid=" + id + " ORDER BY arspdtlseq";

                sSqlFtr = "SELECT (arsptotalamt - arsptotaldiscdtl) [Total], arspmstdiscamt [Header Disc.], arsptaxamt [Tax], arspgrandtotal [Grand Total], c.currcode [Currency] FROM QL_trnarspmst arm INNER JOIN QL_mstcurr c ON c.curroid=arm.curroid WHERE arm.arspmstoid=" + id;
            }
            else if (tblname == "ql_trnaritemmst")
            {
                sSqlHdr = "SELECT aritemmstoid AS [Draft No.], CONVERT(VARCHAR(10), aritemdate, 101) AS [PEB Date], custname [Customer], ISNULL(aritemmstres3,'') AS [Invoice No.], aritemmstnote AS [A/R Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM QL_trnaritemmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.aritemmstoid=" + id;

                sSqlDtl = "SELECT aritemdtlseq AS [No.], itemcode AS [Code], itemlongdesc AS [Description], aritemqty AS [Qty], gendesc AS [Unit], aritemprice AS [Price], aritemdtlamt AS [Amount], aritemdtldiscamt AS [Disc.], aritemdtlnetto AS [Netto], aritemdtlnote AS [Note] FROM QL_trnaritemmst arm INNER JOIN QL_trnaritemdtl ard ON ard.cmpcode=arm.cmpcode AND ard.aritemmstoid=arm.aritemmstoid INNER JOIN QL_mstitem m ON m.itemoid=ard.itemoid INNER JOIN QL_mstgen g ON genoid=aritemunitoid WHERE arm.aritemmstoid=" + id + " ORDER BY aritemdtlseq";

                sSqlFtr = "SELECT (aritemtotalamt - aritemtotaldiscdtl) [Total], aritemmstdiscamt [Header Disc.], aritemtaxamt [Tax], aritemgrandtotal [Grand Total], c.currcode [Currency] FROM QL_trnaritemmst arm INNER JOIN QL_mstcurr c ON c.curroid=arm.curroid WHERE arm.aritemmstoid=" + id;
            }
            else if (tblname == "ql_trnarassetmst")
            {
                sSqlHdr = "SELECT arassetmstoid AS [Draft No.], CONVERT(VARCHAR(10), arassetdate, 101) AS [PEB Date], custname [Customer], ISNULL(arassetmstres3,'') AS [Invoice No.], arassetmstnote AS [A/R Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM QL_trnarassetmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arassetmstoid=" + id;

                sSqlDtl = "SELECT arassetdtlseq AS [No.], assetno [Assets No.], (CASE m.reftype WHEN 'General' THEN (SELECT x.matgenlongdesc FROM QL_mstmatgen x WHERE x.matgenoid=m.refoid) WHEN 'Spare Part' THEN (SELECT x.sparepartlongdesc FROM QL_mstsparepart x WHERE x.sparepartoid=m.refoid) ELSE '' END) AS [Assets Desc.], arassetqty AS [Qty], gendesc AS [Unit], arassetprice AS [Price], arassetdtlamt AS [Amount], arassetdtldiscamt AS [Disc.], arassetdtlnetto AS [Amount], arassetdtlnote AS [Note] FROM QL_trnarassetmst arm INNER JOIN QL_trnarassetdtl ard ON ard.cmpcode=arm.cmpcode AND ard.arassetmstoid=arm.arassetmstoid INNER JOIN /*QL_assetmst*/QL_mstmat m ON m.assetmstoid=ard.assetmstoid INNER JOIN QL_mstgen g ON genoid=arassetunitoid WHERE arm.arassetmstoid=" + id + " ORDER BY arassetdtlseq";

                sSqlFtr = "SELECT (arassettotalamt - arassettotaldiscdtl) [Total], arassetmstdiscamt [Header Disc.], arassettaxamt [Tax], arassetgrandtotal [Grand Total], c.currcode [Currency] FROM QL_trnarassetmst arm INNER JOIN QL_mstcurr c ON c.curroid=arm.curroid WHERE arm.arassetmstoid=" + id;
            }
            else if (tblname == "ql_trnarlogmst")
            {
                sSqlHdr = "SELECT arlogmstoid AS [Draft No.], CONVERT(VARCHAR(10), arlogdate, 101) AS [PEB Date], custname [Customer], ISNULL(arlogmstres3,'') AS [Invoice No.], arlogmstnote AS [A/R Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM QL_trnarlogmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arlogmstoid=" + id;

                sSqlDtl = "SELECT arlogdtlseq AS [No.], matrawcode + ' - ' + logno AS [Code], matrawlongdesc AS [Description], arlogqty AS [Qty], gendesc AS [unit], arlogprice AS [Price], arlogdtlamt AS [Amount], arlogdtldiscamt AS [Disc.], arlogdtlnetto AS [Netto], arlogdtlnote AS [Note] FROM QL_trnarlogmst arm INNER JOIN QL_trnarlogdtl ard ON ard.cmpcode=arm.cmpcode AND ard.arlogmstoid=arm.arlogmstoid INNER JOIN QL_mstlog pl ON pl.cmpcode=ard.cmpcode AND pl.logoid=ard.logoid INNER JOIN QL_mstmatraw m ON m.matrawoid=pl.refoid INNER JOIN QL_mstgen g ON genoid=arlogunitoid WHERE arm.arlogmstoid=" + id + " ORDER BY arlogdtlseq";

                sSqlFtr = "SELECT (arlogtotalamt - arlogtotaldiscdtl) [Total], arlogmstdiscamt [Header Disc.], arlogtaxamt [Tax], arloggrandtotal [Grand Total], c.currcode [Currency] FROM QL_trnarlogmst arm INNER JOIN QL_mstcurr c ON c.curroid=arm.curroid WHERE arm.arlogmstoid=" + id;
            }
            else if (tblname == "/*QL_trnarsawnmst*/QL_trnjualmst")
            {
                sSqlHdr = "SELECT arsawnmstoid AS [Draft No.], CONVERT(VARCHAR(10), arsawndate, 101) AS [PEB Date], custname [Customer], ISNULL(arsawnmstres3,'') AS [Invoice No.], arsawnmstnote AS [A/R Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM /*QL_trnarsawnmst*/QL_trnjualmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arsawnmstoid=" + id;

                sSqlDtl = "SELECT arsawndtlseq AS [No.], matrawcode + ' - ' + palletno AS [Code], matrawlongdesc AS [Description], arsawnqty AS [Qty], gendesc AS [unit], arsawnprice AS [Price], arsawndtlamt AS [Amount], arsawndtldiscamt AS [Disc.], arsawndtlnetto AS [Netto], arsawndtlnote AS [Note] FROM /*QL_trnarsawnmst*/QL_trnjualmst arm INNER JOIN QL_trnarsawndtl ard ON ard.cmpcode=arm.cmpcode AND ard.arsawnmstoid=arm.arsawnmstoid INNER JOIN QL_mstpallet pl ON pl.cmpcode=ard.cmpcode AND pl.palletoid=ard.palletoid INNER JOIN QL_mstmatraw m ON m.matrawoid=pl.refoid INNER JOIN QL_mstgen g ON genoid=arsawnunitoid WHERE arm.arsawnmstoid=" + id + " ORDER BY arsawndtlseq";

                sSqlFtr = "SELECT (arsawntotalamt - arsawntotaldiscdtl) [Total], arsawnmstdiscamt [Header Disc.], arsawntaxamt [Tax], arsawngrandtotal [Grand Total], c.currcode [Currency] FROM /*QL_trnarsawnmst*/QL_trnjualmst arm INNER JOIN QL_mstcurr c ON c.curroid=arm.curroid WHERE arm.arsawnmstoid=" + id;
            }
            else if (tblname == "ql_trnarothermst")
            {
                sSqlHdr = "SELECT arothermstoid AS [Draft No.], CONVERT(VARCHAR(10), arotherdate, 101) AS [PEB Date], custname [Customer], ISNULL(arothermstres3,'') AS [Invoice No.], arothermstnote AS [A/R Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM QL_trnarothermst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arothermstoid=" + id;

                sSqlDtl = "SELECT arotherdtlseq AS [No.], arothermatlongdesc AS [Description], arotherqty AS [Qty], arotherprice AS [Price], arotherdtlamt AS [Amount], arotherdtlnetto AS [Netto], arotherdtlnote AS [Note] FROM QL_trnarothermst arm INNER JOIN QL_trnarotherdtl ard ON ard.cmpcode=arm.cmpcode AND ard.arothermstoid=arm.arothermstoid WHERE arm.arothermstoid=" + id + " ORDER BY arotherdtlseq";

                sSqlFtr = "SELECT (arothertotalamt) [Total], arothertaxamt [Tax], arothergrandtotal [Grand Total], c.currcode [Currency] FROM QL_trnarothermst arm INNER JOIN QL_mstcurr c ON c.curroid=arm.curroid WHERE arm.arothermstoid=" + id;
            }
            else if (tblname == "/*QL_trnarcashbankmst*/QL_trncashbankmst")
            {
                sSqlHdr = "SELECT arcashbankmstoid AS [Draft No.], CONVERT(VARCHAR(10), arcashbankdate, 101) AS [PEB Date], custname [Customer], ISNULL(arcashbankmstres3,'') AS [Invoice No.], arcashbankmstnote AS [A/R Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM /*QL_trnarcashbankmst*/QL_trncashbankmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arcashbankmstoid=" + id;

                sSqlDtl = "SELECT arcashbankdtlseq AS [No.], arcashbankmatlongdesc AS [Description], arcashbankqty AS [Qty], arcashbankprice AS [Price], arcashbankdtlamt AS [Amount], arcashbankdtlnetto AS [Netto], arcashbankdtlnote AS [Note] FROM /*QL_trnarcashbankmst*/QL_trncashbankmst arm INNER JOIN QL_trnarcashbankdtl ard ON ard.cmpcode=arm.cmpcode AND ard.arcashbankmstoid=arm.arcashbankmstoid WHERE arm.arcashbankmstoid=" + id + " ORDER BY arcashbankdtlseq";

                sSqlFtr = "SELECT (arcashbanktotalamt) [Total], arcashbanktaxamt [Tax], arcashbankgrandtotal [Grand Total], c.currcode [Currency] FROM /*QL_trnarcashbankmst*/QL_trncashbankmst arm INNER JOIN QL_mstcurr c ON c.curroid=arm.curroid WHERE arm.arcashbankmstoid=" + id;
            }
            else if (tblname == "/*QL_trnarretrawmst*/QL_trnjualmst")
            {
                sSqlHdr = "SELECT arretrawmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretrawdate, 101) AS [Return Date], custname [Customer], arretrawmstnote AS [Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM /*QL_trnarretrawmst*/QL_trnjualmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arretrawmstoid=" + id;

                sSqlDtl = "SELECT arretrawdtlseq AS [No.], matrawcode AS [Code], matrawlongdesc AS [Description], arretrawqty AS [Qty], gendesc AS [Unit], arretrawprice AS [Price], arretrawamount AS [Amount], arretrawdtlnote AS [Note] FROM /*QL_trnarretrawmst*/QL_trnjualmst arm INNER JOIN QL_trnarretrawdtl ard ON ard.cmpcode=arm.cmpcode AND ard.arretrawmstoid=arm.arretrawmstoid INNER JOIN QL_mstmatraw m ON m.matrawoid=ard.matrawoid INNER JOIN QL_mstgen g ON genoid=arretrawunitoid WHERE arm.arretrawmstoid=" + id + " ORDER BY arretrawdtlseq";

                sSqlFtr = "SELECT arretrawtotalamt [Total], arretrawtax [Tax], arretrawgrandtotal [Grand Total], cu.currcode [Currency] FROM /*QL_trnarretrawmst*/QL_trnjualmst arretm INNER JOIN /*QL_trnarrawmst*/QL_trnjualmst arm ON arm.cmpcode=arretm.cmpcode AND arm.arrawmstoid=arretm.arrawmstoid INNER JOIN QL_mstcurr cu ON cu.curroid=arm.curroid WHERE arretm.arretrawmstoid=" + id;
            }
            else if (tblname == "/*QL_trnarretgenmst*/QL_trnjualmst")
            {
                sSqlHdr = "SELECT arretgenmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretgendate, 101) AS [Return Date], custname [Customer], arretgenmstnote AS [Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM /*QL_trnarretgenmst*/QL_trnjualmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arretgenmstoid=" + id;

                sSqlDtl = "SELECT arretgendtlseq AS [No.], matgencode AS [Code], matgenlongdesc AS [Description], arretgenqty AS [Qty], gendesc AS [Unit], arretgenprice AS [Price], arretgenamount AS [Amount], arretgendtlnote AS [Note] FROM /*QL_trnarretgenmst*/QL_trnjualmst arm INNER JOIN QL_trnarretgendtl ard ON ard.cmpcode=arm.cmpcode AND ard.arretgenmstoid=arm.arretgenmstoid INNER JOIN QL_mstmatgen m ON m.matgenoid=ard.matgenoid INNER JOIN QL_mstgen g ON genoid=arretgenunitoid WHERE arm.arretgenmstoid=" + id + " ORDER BY arretgendtlseq";

                sSqlFtr = "SELECT arretgentotalamt [Total], arretgentax [Tax], arretgengrandtotal [Grand Total], cu.currcode [Currency] FROM /*QL_trnarretgenmst*/QL_trnjualmst arretm INNER JOIN /*QL_trnarrawmst*/QL_trnjualmst arm ON arm.cmpcode=arretm.cmpcode AND arm.arrawmstoid=arretm.argenmstoid INNER JOIN QL_mstcurr cu ON cu.curroid=arm.curroid WHERE arretm.arretgenmstoid=" + id;
            }
            else if (tblname == "ql_trnarretspmst")
            {
                sSqlHdr = "SELECT arretspmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretspdate, 101) AS [Return Date], custname [Customer], arretspmstnote AS [Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM QL_trnarretspmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arretspmstoid=" + id;

                sSqlDtl = "SELECT arretspdtlseq AS [No.], sparepartcode AS [Code], sparepartlongdesc AS [Description], arretspqty AS [Qty], gendesc AS [Unit], arretspprice AS [Price], arretspamount AS [Amount], arretspdtlnote AS [Note] FROM QL_trnarretspmst arm INNER JOIN QL_trnarretspdtl ard ON ard.cmpcode=arm.cmpcode AND ard.arretspmstoid=arm.arretspmstoid INNER JOIN QL_mstsparepart m ON m.sparepartoid=ard.sparepartoid INNER JOIN QL_mstgen g ON genoid=arretspunitoid WHERE arm.arretspmstoid=" + id + " ORDER BY arretspdtlseq";

                sSqlFtr = "SELECT arretsptotalamt [Total], arretsptax [Tax], arretspgrandtotal [Grand Total], cu.currcode [Currency] FROM QL_trnarretspmst arretm INNER JOIN /*QL_trnarrawmst*/QL_trnjualmst arm ON arm.cmpcode=arretm.cmpcode AND arm.arrawmstoid=arretm.arspmstoid INNER JOIN QL_mstcurr cu ON cu.curroid=arm.curroid WHERE arretm.arretspmstoid=" + id;
            }
            else if (tblname == "ql_trnarretitemmst")
            {
                sSqlHdr = "SELECT arretitemmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretitemdate, 101) AS [Return Date], custname [Customer], arretitemmstnote AS [Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM QL_trnarretitemmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arretitemmstoid=" + id;

                sSqlDtl = "SELECT arretitemdtlseq AS [No.], itemcode AS [Code], itemlongdesc AS [Description], arretitemqty AS [Qty], gendesc AS [Unit], arretitemprice AS [Price], arretitemamount AS [Amount], arretitemdtlnote AS [Note] FROM QL_trnarretitemmst arm INNER JOIN QL_trnarretitemdtl ard ON ard.cmpcode=arm.cmpcode AND ard.arretitemmstoid=arm.arretitemmstoid INNER JOIN QL_mstitem m ON m.itemoid=ard.itemoid INNER JOIN QL_mstgen g ON genoid=arretitemunitoid WHERE arm.arretitemmstoid=" + id + " ORDER BY arretitemdtlseq";

                sSqlFtr = "SELECT arretitemtotalamt [Total], arretitemtax [Tax], arretitemgrandtotal [Grand Total], cu.currcode [Currency] FROM QL_trnarretitemmst arretm INNER JOIN /*QL_trnarrawmst*/QL_trnjualmst arm ON arm.cmpcode=arretm.cmpcode AND arm.arrawmstoid=arretm.aritemmstoid INNER JOIN QL_mstcurr cu ON cu.curroid=arm.curroid WHERE arretm.arretitemmstoid=" + id;
            }
            else if (tblname == "/*QL_trnarretlogmst*/QL_trnjualmst")
            {
                sSqlHdr = "SELECT arretlogmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretlogdate, 101) AS [Return Date], custname [Customer], arretlogmstnote AS [Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM /*QL_trnarretlogmst*/QL_trnjualmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arretlogmstoid=" + id;

                sSqlDtl = "SELECT arretlogdtlseq [No.], (matrawcode + ' - ' + logno) [Code], matrawlongdesc [Description], arretlogqty [Qty], gendesc [Unit], arretlogprice [Price], arretlogamount [Amount], arretlogdtlnote [Note] FROM /*QL_trnarretlogmst*/QL_trnjualmst arretm INNER JOIN QL_trnarretlogdtl arretd ON arretd.cmpcode=arretm.cmpcode AND arretd.arretlogmstoid=arretm.arretlogmstoid INNER JOIN QL_mstlog l ON l.cmpcode=arretd.cmpcode AND l.logoid=arretd.logoid INNER JOIN QL_mstmatraw m ON m.matrawoid=l.refoid INNER JOIN QL_mstgen g ON genoid=arretlogunitoid WHERE arm.arretlogmstoid=" + id + " ORDER BY arretlogdtlseq";

                sSqlFtr = "SELECT arretlogtotalamt [Total], arretlogtax [Tax], arretloggrandtotal [Grand Total], cu.currcode [Currency] FROM /*QL_trnarretlogmst*/QL_trnjualmst arretm INNER JOIN /*QL_trnarrawmst*/QL_trnjualmst arm ON arm.cmpcode=arretm.cmpcode AND arm.arrawmstoid=arretm.arlogmstoid INNER JOIN QL_mstcurr cu ON cu.curroid=arm.curroid WHERE arretm.arretlogmstoid=" + id;
            }
            else if (tblname == "/*QL_trnarretsawnmst*/QL_trnjualmst")
            {
                sSqlHdr = "SELECT arretsawnmstoid AS [Draft No.], CONVERT(VARCHAR(10), arretsawndate, 101) AS [Return Date], custname [Customer], arretsawnmstnote AS [Note], arm.upduser [Last Update By], arm.updtime [Last Update On] FROM /*QL_trnarretsawnmst*/QL_trnjualmst arm INNER JOIN QL_mstcust c ON c.custoid=arm.custoid WHERE arm.arretsawnmstoid=" + id;

                sSqlDtl = "SELECT arretsawndtlseq [No.], (matrawcode + ' - ' + palletno) [Code], matrawlongdesc [Description], arretsawnqty [Qty], gendesc [Unit], arretsawnprice [Price], arretsawnamount [Amount], arretsawndtlnote [Note] FROM /*QL_trnarretsawnmst*/QL_trnjualmst arretm INNER JOIN QL_trnarretsawndtl arretd ON arretd.cmpcode=arretm.cmpcode AND arretd.arretsawnmstoid=arretm.arretsawnmstoid INNER JOIN QL_mstpallet l ON l.cmpcode=arretd.cmpcode AND l.palletoid=arretd.palletoid INNER JOIN QL_mstmatraw m ON m.matrawoid=l.refoid INNER JOIN QL_mstgen g ON genoid=arretsawnunitoid WHERE arm.arretsawnmstoid=" + id + " ORDER BY arretsawndtlseq";

                sSqlFtr = "SELECT arretsawntotalamt [Total], arretsawntax [Tax], arretsawngrandtotal [Grand Total], cu.currcode [Currency] FROM /*QL_trnarretsawnmst*/QL_trnjualmst arretm INNER JOIN /*QL_trnarrawmst*/QL_trnjualmst arm ON arm.cmpcode=arretm.cmpcode AND arm.arrawmstoid=arretm.arsawnmstoid INNER JOIN QL_mstcurr cu ON cu.curroid=arm.curroid WHERE arretm.arretsawnmstoid=" + id;
            }
            else if (tblname == "ql_trnstockadj")
            {
                sSqlHdr = "SELECT CAST(resfield1 AS INTEGER) [Draft No.], CONVERT(VARCHAR(10), stockadjdate, 101) [Adj Date], stockadjtype [Type], stockadjmstnote [Header Note] FROM QL_trnstockadj h WHERE h.cmpcode='" + cmp + "' AND CAST(resfield1 AS INTEGER)=" + id + "";

                var sPeriod = ClassFunction.GetDateToPeriodAcctg(ClassFunction.GetServerTime());
                sSqlDtl = "SELECT a.stockadjoid [No], (CASE a.refname WHEN 'RAW MATERIAL' THEN (SELECT m.matrawcode FROM QL_mstmatraw m WHERE m.matrawoid=a.refoid) WHEN 'GENERAL MATERIAL' THEN (SELECT m.matgencode FROM QL_mstmatgen m WHERE m.matgenoid=a.refoid) WHEN 'SPARE PART' THEN (SELECT m.sparepartcode FROM QL_mstsparepart m WHERE m.sparepartoid=a.refoid) WHEN 'FINISH GOOD' THEN (SELECT m.itemcode FROM QL_mstitem m WHERE m.itemoid=a.refoid) WHEN 'LOG' THEN (SELECT (SELECT m.matrawcode FROM QL_mstmatraw m WHERE m.matrawoid=l.refoid) + ' - ' + l.logno FROM QL_mstlog l WHERE l.logoid=a.refoid) WHEN 'PALLET' THEN (SELECT (SELECT m.matrawcode FROM QL_mstmatraw m WHERE m.matrawoid=p.refoid) + ' - ' + p.palletno FROM QL_mstpallet p WHERE p.cmpcode=a.cmpcode AND p.palletoid=a.refoid) ELSE '' END) AS [Mat_Code], (CASE a.refname WHEN 'RAW MATERIAL' THEN (SELECT m.matrawlongdesc FROM QL_mstmatraw m WHERE m.matrawoid=a.refoid) WHEN 'GENERAL MATERIAL' THEN (SELECT m.matgenlongdesc FROM QL_mstmatgen m WHERE m.matgenoid=a.refoid) WHEN 'SPARE PART' THEN (SELECT m.sparepartlongdesc FROM QL_mstsparepart m WHERE m.sparepartoid=a.refoid) WHEN 'FINISH GOOD' THEN (SELECT m.itemlongdesc FROM QL_mstitem m WHERE m.itemoid=a.refoid) WHEN 'LOG' THEN (SELECT (SELECT m.matrawlongdesc FROM QL_mstmatraw m WHERE m.matrawoid=l.refoid) FROM QL_mstlog l WHERE l.logoid=a.refoid) WHEN 'PALLET' THEN (SELECT (SELECT m.matrawlongdesc FROM QL_mstmatraw m WHERE m.matrawoid=p.refoid) FROM QL_mstpallet p WHERE p.cmpcode=a.cmpcode AND p.palletoid=a.refoid) ELSE '' END) AS [Mat_Desc], g1.gendesc AS [Location], a.stockadjqtybefore AS [Current_Qty], a.stockadjqty AS [Adj_Qty], a.stockadjqtyafter AS [New_Qty], g2.gendesc AS [Unit], (CASE stockadjtype WHEN 'ADJUSTMENT' THEN ISNULL((SELECT SUM(ISNULL(st.stockqty, 0) * ISNULL(st.stockvalueidr, 0)) / NULLIF(SUM(ISNULL(st.stockqty, 0)), 0) FROM QL_stockvalue st WHERE st.cmpcode=a.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=a.refoid AND st.refname=a.refname AND closeflag=''), 0.0) ELSE 0.0 END) AS [Value], stockadjnote [Detail_Note] FROM QL_trnstockadj a INNER JOIN QL_mstgen g1 ON g1.genoid=a.mtrwhoid INNER JOIN QL_mstgen g2 ON g2.genoid=a.stockadjunit WHERE a.cmpcode='" + cmp + "' AND CAST(a.resfield1 AS INTEGER)='" + id + "' ORDER BY a.stockadjoid";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trnbrtacaramst")
            {
                sSqlHdr = "SELECT ba.acaramstoid [Draft No.], CONVERT(VARCHAR(10), acaradate, 101) [BA Date], acaratype [Type], wono [KIK No.], deptname [Dept.], acaramstnote [Header Note], ba.upduser [Last Update By], ba.updtime [Last Update On] FROM QL_trnbrtacaramst ba INNER JOIN QL_trnwomst wom ON wom.cmpcode=ba.cmpcode AND wom.womstoid=ba.womstoid INNER JOIN QL_mstdept d ON d.deptoid=ba.deptoid WHERE ba.cmpcode='" + cmp + "' AND ba.acaramstoid=" + id;

                sSqlDtl = "SELECT bad.acaradtlseq [No.], bad.acarareftype [Type], (CASE bad.acarareftype WHEN 'Raw' THEN (SELECT m.matrawcode FROM QL_mstmatraw m WHERE m.matrawoid=bad.acararefoid) WHEN 'General' THEN (SELECT m.matgencode FROM QL_mstmatgen m WHERE m.matgenoid=bad.acararefoid) WHEN 'Spare Part' THEN (SELECT m.sparepartcode FROM QL_mstsparepart m WHERE m.sparepartoid=bad.acararefoid) WHEN 'Log' THEN (SELECT m.logno FROM QL_mstlog m WHERE m.logoid=bad.acararefoid) WHEN 'Sawn Timber' THEN (SELECT m.palletno FROM QL_mstpallet m WHERE m.cmpcode=bad.cmpcode AND m.palletoid=bad.acararefoid) ELSE '' END) AS [Code], (CASE bad.acarareftype WHEN 'Raw' THEN (SELECT m.matrawlongdesc FROM QL_mstmatraw m WHERE m.matrawoid=bad.acararefoid) WHEN 'General' THEN (SELECT m.matgenlongdesc FROM QL_mstmatgen m WHERE m.matgenoid=bad.acararefoid) WHEN 'Spare Part' THEN (SELECT m.sparepartlongdesc FROM QL_mstsparepart m WHERE m.sparepartoid=bad.acararefoid) WHEN 'Log' THEN (SELECT mx.matrawlongdesc FROM QL_mstlog m INNER JOIN QL_mstmatraw mx ON mx.matrawoid=m.refoid WHERE m.logoid=bad.acararefoid) WHEN 'Sawn Timber' THEN (SELECT m.palletlongdesc FROM QL_mstpallet m WHERE m.cmpcode=bad.cmpcode AND m.palletoid=bad.acararefoid) ELSE '' END) AS [Description], bad.acaraqty [Qty], g.gendesc AS [Unit], bad.acaradtlnote [Note] FROM QL_trnbrtacaradtl bad INNER JOIN QL_mstgen g ON g.genoid=bad.acaraunitoid WHERE bad.acaramstoid=" + id + " AND bad.cmpcode='" + cmp + "' ORDER BY bad.acaradtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else if (tblname == "ql_trntransmst")
            {
                sSqlHdr = "SELECT trm.transmstoid [Draft No.], CONVERT(VARCHAR(10), transdate, 101) [Trans. Date], transmstnote [Header Note], trm.upduser [Last Update By], trm.updtime [Last Update On] FROM QL_trntransmst trm WHERE trm.cmpcode='" + cmp + "' AND trm.transmstoid=" + id;

                var sPeriod = ClassFunction.GetDateToPeriodAcctg(ClassFunction.GetServerTime());
                sSqlDtl = "SELECT transdtlseq [No], transreftype [Type], dbo.GetMaterialCode(transreftype, transrefoid, td.cmpcode) [Code], dbo.GetMaterialDesc(transreftype, transrefoid, td.cmpcode) [Description], transqty [Qty], ISNULL((SELECT SUM(saldoakhir) FROM QL_crdmtr crd WHERE crd.cmpcode=td.cmpcode AND crd.refname=dbo.GetMaterialStockType(transreftype) AND crd.refoid=transrefoid AND mtrwhoid=transfromwhoid AND ISNULL(closeuser, '')='' AND crd.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "')), 0.0) [Stock_Qty], gu.gendesc [Unit], gf.gendesc [From_Warehouse], gt.gendesc [To_Warehouse], ISNULL((SELECT SUM(ISNULL(st.stockqty, 0) * ISNULL(st.stockvalueidr, 0)) / NULLIF(SUM(ISNULL(st.stockqty, 0)), 0) FROM QL_stockvalue st WHERE st.cmpcode=td.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=td.transrefoid AND st.refname=dbo.GetMaterialStockType(transreftype) AND closeflag=''), 0.0) [Value_IDR_Per_Unit], ISNULL((SELECT SUM(ISNULL(st.stockqty, 0) * ISNULL(st.stockvalueusd, 0)) / NULLIF(SUM(ISNULL(st.stockqty, 0)), 0) FROM QL_stockvalue st WHERE st.cmpcode=td.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=td.transrefoid AND st.refname=dbo.GetMaterialStockType(transreftype) AND closeflag=''), 0.0) [Value_USD_Per_Unit], ISNULL((SELECT SUM(ISNULL(st.stockqty, 0) * ISNULL(st.stockvalueidr, 0)) / NULLIF(SUM(ISNULL(st.stockqty, 0)), 0) FROM QL_stockvalue st WHERE st.cmpcode=td.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=td.transrefoid AND st.refname=dbo.GetMaterialStockType(transreftype) AND closeflag=''), 0.0) [Price_IDR_Per_Unit], transdtlnote [Detail_Note] FROM QL_trntransdtl td INNER JOIN QL_mstgen gu ON gu.genoid=transunitoid INNER JOIN QL_mstgen gf ON gf.genoid=transfromwhoid INNER JOIN QL_mstgen gt ON gt.genoid=transtowhoid WHERE td.cmpcode='" + cmp + "' AND td.transmstoid=" + id + " ORDER BY transdtlseq";

                sSqlFtr = "SELECT '' [No Footer]";
            }
            else
                msg = "Approval action haven't be set";

            if (msg == "")
            {
                // Process Data for Header
                DataTable tblhdr = new ClassConnection().GetDataTable(sSqlHdr, tblname + "_hdr");
                List<modelforapp> rowshdr = new List<modelforapp>();
                if (tblhdr.Rows.Count > 0)
                {
                    foreach (DataRow dr in tblhdr.Rows)
                    {
                        foreach (DataColumn col in tblhdr.Columns)
                        {
                            var item = dr[col].ToString();
                            rowshdr.Add(new modelforapp()
                            {
                                caption = col.ColumnName,
                                value = item
                            });
                        }
                    }
                }
                else
                    msg = "Data Header Not Found";

                // Process Data for Detail
                DataTable tbldtl = new ClassConnection().GetDataTable(sSqlDtl, tblname + "_dtl");
                if (Session["QL_trntransdtl_approval"] != null)
                {
                    List<mattransdtl> dtDtl = (List<mattransdtl>)Session["QL_trntransdtl_approval"];
                    if (dtDtl != null)
                    {
                        if (tblname == "ql_trntransmst")
                        {
                            if (tbldtl != null)
                            {
                                for (var i = 0; i < tbldtl.Rows.Count; i++)
                                {
                                    var dtlprice = dtDtl.Where(x => x.transdtloid == (int)tbldtl.Rows[i]["No"]).Select(y => y.transprice).FirstOrDefault();
                                    tbldtl.Rows[i]["Price_IDR_Per_Unit"] = dtlprice;
                                }
                            }
                        }
                    }
                    tbldtl.AcceptChanges();
                }
                List<string> colsdtl = new List<string>();
                List<Dictionary<string, object>> rowsdtl = new List<Dictionary<string, object>>();
                if (msg == "" && tbldtl.Rows.Count > 0)
                {
                    Dictionary<string, object> row;
                    foreach (DataRow dr in tbldtl.Rows)
                    {
                        row = new Dictionary<string, object>();
                        Int32 i = 0;
                        foreach (DataColumn col in tbldtl.Columns)
                        {
                            i++;
                            var item = dr[col].ToString();
                            decimal decval = 0;
                            try
                            {
                                //if (col.ColumnName.StartsWith("DEC_") && Decimal.TryParse(item, out decval))
                                if (i!=1 && Decimal.TryParse(item, out decval))
                                {
                                    if (decval == 0)
                                        item = "0.00";
                                    else
                                        item = decval.ToString("#,##0.00");
                                }
                            }
                            catch
                            {
                                item = dr[col].ToString();
                            }
                            row.Add(col.ColumnName.Replace("DEC_", ""), item);
                            if (!colsdtl.Contains(col.ColumnName.Replace("DEC_", "")))
                                colsdtl.Add(col.ColumnName.Replace("DEC_", ""));
                        }
                        rowsdtl.Add(row);
                    }
                }
                else
                    msg = "Data Detail Not Found";

                // Process Data for Footer
                DataTable tblftr = new ClassConnection().GetDataTable(sSqlFtr, tblname + "_ftr");
                List<modelforapp> rowsftr = new List<modelforapp>();
                var curr = "";
                if (msg == "" && tblftr.Rows.Count > 0)
                {
                    foreach (DataRow dr in tblftr.Rows)
                    {
                        foreach (DataColumn col in tblftr.Columns)
                        {
                            var item = dr[col].ToString();
                            if (col.ColumnName.StartsWith("Currency"))
                            {
                                curr = item;
                            }
                        }
                            foreach (DataColumn col in tblftr.Columns)
                        {
                            var item = dr[col].ToString();
                            decimal decval = 0;

                            if (!col.ColumnName.StartsWith("Currency"))
                            {
                                if (!string.IsNullOrEmpty(item) && Decimal.TryParse(item, out decval))
                                    item = decval.ToString("#,##0.00");
                                if (col.ColumnName == "Grand Total")
                                {
                                    item =  "(" + curr + ") " + item;
                                }
                                if (col.ColumnName != "No Footer")
                                {
                                    rowsftr.Add(new modelforapp()
                                    {
                                        caption = col.ColumnName,
                                        value = item
                                    });
                                }
                            }
                        }
                    }
                }

                if (msg == "")
                    return Json(new { msg, info, rowshdr, colsdtl, rowsdtl, rowsftr }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { msg }, JsonRequestBehavior.AllowGet);
        }

        private void SendEmail(string status, string transname, string transoid, string createuser, string updateuser, out string error)
        {
            error = "";
            HRMEntities db = new HRMEntities();
            var email = db.Database.SqlQuery<string>("SELECT DISTINCT p.personemail FROM QL_mstprof b INNER JOIN QL_mstperson p on b.personoid=p.personoid WHERE b.profoid='" + updateuser + "'").FirstOrDefault();
            var nama = Session["UserName"].ToString();
            var sSubject = transname;
            if (!string.IsNullOrEmpty(email))
            {
                try
                {
                    //sSubject = ClassFunction.Left(transname, (transname.Length) - 6);
                    //sSubject = ClassFunction.Right(sSubject, (sSubject.Length) - 2);

                    var subject = status + " Approval " + sSubject + " " + Session["UserID"].ToString();
                    // Update User
                    var sUserName = "";
                    sSql = "SELECT DISTINCT g.gendesc+ ' ' + p.personname FROM QL_mstprof b INNER JOIN QL_mstperson p on b.personoid=p.personoid INNER JOIN QL_mstgen g on p.persontitleoid=g.genoid AND g.gengroup='PERSON TITLE' WHERE b.profoid='" + updateuser + "'";
                    sUserName = db.Database.SqlQuery<string>(sSql).FirstOrDefault();

                    // Approval User
                    var sAppName = "";
                    sSql = "SELECT DISTINCT g.gendesc+ ' ' + p.personname FROM QL_approvalperson a INNER JOIN QL_mstprof b on a.approvaluser=b.profoid INNER JOIN QL_mstperson p on b.personoid=p.personoid INNER JOIN QL_mstgen g ON p.persontitleoid=g.genoid AND g.gengroup='PERSON TITLE' WHERE a.approvaluser='" + Session["UserID"].ToString() + "'";
                    sAppName = db.Database.SqlQuery<string>(sSql).FirstOrDefault();

                    var sNote = "";
                    var nl = System.Environment.NewLine;
                    sNote = "";
                    sNote = "Dear, " + sUserName + nl;
                    sNote += nl;
                    sNote += sSubject + " draft no. " + transoid + " has been >> " + status.ToUpper() + " << by " + sAppName + nl;
                    sNote += nl;
                    sNote += "This is an automated email. Please do not reply." + nl;

                    ClassFunction.SendingEmail(nama.ToString(), email, subject, sNote);
                }
                catch (Exception e) { error = e.ToString(); }
            }

            if (!string.IsNullOrEmpty(createuser))
            {
                if (createuser != updateuser)
                {
                    email = db.Database.SqlQuery<string>("SELECT DISTINCT p.personemail FROM QL_mstprof b INNER JOIN QL_mstperson p on b.personoid=p.personoid WHERE b.profoid='" + updateuser + "'").FirstOrDefault();
                    if (!string.IsNullOrEmpty(email))
                    {
                        try
                        {
                            //sSubject = ClassFunction.Left(transname, (transname.Length) - 6);
                            //sSubject = ClassFunction.Right(sSubject, (sSubject.Length) - 2);

                            var subject = status + " Approval " + sSubject + " " + Session["UserID"].ToString();
                            // Update User
                            var sCreateUserName = "";
                            sSql = "SELECT DISTINCT g.gendesc+ ' ' + p.personname FROM QL_mstprof b INNER JOIN QL_mstperson p on b.personoid=p.personoid INNER JOIN QL_mstgen g on p.persontitleoid=g.genoid AND g.gengroup='PERSON TITLE' WHERE b.profoid='" + createuser + "'";
                            sCreateUserName = db.Database.SqlQuery<string>(sSql).FirstOrDefault();

                            // Approval User
                            var sAppName = "";
                            sSql = "SELECT DISTINCT g.gendesc+ ' ' + p.personname FROM QL_approvalperson a INNER JOIN QL_mstprof b on a.approvaluser=b.profoid INNER JOIN QL_mstperson p on b.personoid=p.personoid INNER JOIN QL_mstgen g ON p.persontitleoid=g.genoid AND g.gengroup='PERSON TITLE' WHERE a.approvaluser='" + Session["UserID"].ToString() + "'";
                            sAppName = db.Database.SqlQuery<string>(sSql).FirstOrDefault();

                            var sNote = "";
                            var nl = System.Environment.NewLine;
                            sNote = "";
                            sNote = "Dear, " + sCreateUserName + nl;
                            sNote += nl;
                            sNote += sSubject + " draft no. " + transoid + " has been >> " + status.ToUpper() + " << by " + sAppName + nl;
                            sNote += nl;
                            sNote += "This is an automated email. Please do not reply." + nl;

                            ClassFunction.SendingEmail(nama.ToString(), email, subject, sNote);
                        }
                        catch (Exception e) { error = e.ToString(); }
                    }
                }
            }
        }

        private void SendEmailPDF(string transoid, string transname, out string error)
        {
            error = "";
            ReportDocument report = new ReportDocument();
            if (ClassFunction.Left(transname, 3) == "PO ")
            {
                try
                {
                    var SuppType = db.Database.SqlQuery<string>("SELECT sup.supptype FROM QL_trnporawmst pom INNER JOIN QL_mstsupp sup ON pom.suppoid=sup.suppoid WHERE pom.porawmstoid='" + transoid + "'").FirstOrDefault();
                    report.Load(Path.Combine(Server.MapPath("~/Report"), "rptPO_TrnEn.rpt"));
                    if (SuppType == "LOCAL")
                        report.Load(Path.Combine(Server.MapPath("~/Report"), "rptPO_Trn.rpt"));

                    sSql = "SELECT pom.cmpcode [CMPCODE], (SELECT d.divname FROM QL_mstdivision d WHERE d.cmpcode=pom.cmpcode) AS [BU Name], (SELECT d.divaddress FROM QL_mstdivision d WHERE d.cmpcode=pom.cmpcode) AS [BU Address], (SELECT g3.gendesc FROM QL_mstdivision d INNER JOIN QL_mstgen g3 ON g3.genoid=d.divcityoid WHERE d.cmpcode=pom.cmpcode) AS [BU City], (SELECT g4.gendesc FROM QL_mstdivision d INNER JOIN QL_mstgen g3 ON g3.genoid=d.divcityoid INNER JOIN QL_mstgen g4 ON g4.cmpcode=g3.cmpcode AND g4.genoid=CONVERT(INT, g3.genother1) WHERE d.cmpcode=pom.cmpcode) AS [BU Province], (SELECT d.divphone FROM QL_mstdivision d WHERE d.cmpcode=pom.cmpcode) AS [BU Phone], (SELECT d.divemail FROM QL_mstdivision d WHERE d.cmpcode=pom.cmpcode) AS [BU Email], (SELECT d.divphone2 FROM QL_mstdivision d WHERE d.cmpcode=pom.cmpcode) AS [BU Phone2], (SELECT d.divpostcode FROM QL_mstdivision d WHERE d.cmpcode=pom.cmpcode) AS [BU PostCode], (SELECT d.divfax1 FROM QL_mstdivision d WHERE d.cmpcode=pom.cmpcode) AS [BU Fax1], (SELECT d.divfax2 FROM QL_mstdivision d WHERE d.cmpcode=pom.cmpcode)	AS [BU Fax2], (SELECT g5.gendesc FROM QL_mstdivision d INNER JOIN QL_mstgen g3 ON g3.genoid=d.divcityoid INNER JOIN QL_mstgen g5 ON g5.cmpcode=g3.cmpcode AND g5.genoid=CONVERT(INT, g3.genother2) WHERE d.cmpcode=pom.cmpcode) AS [BU Country], pom.porawmstoid [Oid], CONVERT(VARCHAR(10), pom.porawmstoid) AS [Draft No.], pom.porawno [PO No.], pom.porawdate [PO Date], pom.porawmstnote [Header Note], pom.porawmststatus [Status], pom.suppoid [Suppoid], (SELECT s.suppname FROM QL_mstsupp s  WHERE s.suppoid=pom.suppoid) AS [Supp Name], (SELECT s.suppcode FROM QL_mstsupp s  WHERE s.suppoid=pom.suppoid) AS [Supp Code], g1.gendesc AS [Payment Type], pom.porawmstdisctype [Disc Type], '' AS [Disc Value], ISNULL(pom.porawmstdiscamt, 0) AS [Disc Amount], pom.porawtotalnetto [Total Netto], pom.porawtaxtype [Tax Type], CONVERT(VARCHAR(10), pom.porawtaxamt) AS [Tax Amount], ISNULL(pom.porawvat, 0) AS [VAT], ISNULL(pom.porawdeliverycost, 0) AS [Delivery Cost], ISNULL(pom.porawothercost, 0) AS [Other Cost], pom.porawgrandtotalamt [Grand Total], pod.porawdtloid [DtlOid], m.matrawcode AS [Code], m.matrawlongdesc AS [Material], prm.prrawno AS [PR No.], prm.prrawdate AS [PR Date], pod.porawqty AS [Qty], g2.gendesc AS [Unit], pod.porawprice AS [Price], pod.porawdtlamt AS [Amount], ISNULL(pod.porawdtldiscamt, 0) AS [Detail Disc.], pod.porawdtlnetto AS [Netto], pod.porawdtlnote AS [Note], pom.porawtype AS [POType], c.currcode AS [CurrCode], c.currdesc AS [CurrDesc], pom.porawsuppref AS [SuppReff], pod.porawdtldisctype AS [DtlDiscType], ISNULL(pod.porawdtldiscvalue,0) AS [DtlDiscValue], pod.porawdtlnote AS [DetailNote], pom.approvaldatetime AS [DateTime], pom.approvaluser AS [UserIDApproved], pa.profname AS [UserNameApproved], prd.prrawarrdatereq AS [ArrDateReq], pom.createuser AS [CreateUserID], pc.profname AS [CreateUserName], pom.approvaldatetime AS [ApprovalDate], currsymbol AS [CurrSymbol] FROM QL_trnporawmst pom INNER JOIN QL_mstgen g1 ON g1.genoid=pom.porawpaytypeoid INNER JOIN QL_trnporawdtl pod ON pod.cmpcode=pom.cmpcode AND pod.porawmstoid=pom.porawmstoid INNER JOIN QL_mstmatraw m ON m.matrawoid=pod.matrawoid LEFT JOIN QL_prrawmst prm ON prm.cmpcode=pod.cmpcode AND prm.prrawmstoid=pod.prrawmstoid LEFT JOIN QL_prrawdtl prd ON prd.cmpcode=pod.cmpcode AND prd.prrawmstoid=pod.prrawmstoid AND prd.prrawdtloid=pod.prrawdtloid INNER JOIN QL_mstgen g2 ON g2.genoid=pod.porawunitoid INNER JOIN QL_mstcurr c ON c.curroid=pom.curroid LEFT JOIN QL_mstprof pa ON pa.profoid=pom.approvaluser INNER JOIN QL_mstprof pc ON pc.profoid=pom.createuser ";
                    if (Session["CompnyCode"].ToString() != CompnyCode)
                        sSql += "WHERE pom.cmpcode IN ('" + Session["CompnyCode"].ToString() + "')";
                    else
                        sSql += "WHERE pom.cmpcode LIKE '%'";
                    sSql += " AND pom.porawmstoid IN (" + transoid + ") ORDER BY pom.cmpcode, pom.porawmstoid, pod.porawdtlseq";

                    var objtype = new ReportModels.FullFormType(transname.Replace("PO ", ""));
                    if (objtype.flagtype == "A" && objtype.reftype.ToLower() != "raw")
                    {
                        sSql = sSql.Replace("matraw", objtype.mattype.ToLower()).Replace("raw", objtype.reftype.ToLower());
                    }
                    else if (objtype.flagtype == "B")
                    {
                        sSql = sSql.Replace("m.matrawcode", "(CASE pod.poassetreftype WHEN 'General' THEN 'GM' WHEN 'Spare Part' THEN 'SP' ELSE '' END) + '-' + (CASE pod.poassetreftype WHEN 'General' THEN (SELECT x.matgencode FROM QL_mstmatgen x WHERE x.matgenoid=pod.poassetrefoid) WHEN 'Spare Part' THEN (SELECT x.sparepartcode FROM QL_mstsparepart x WHERE x.sparepartoid=pod.poassetrefoid) ELSE '' END)").Replace("m.matrawlongdesc", "(CASE pod.poassetreftype WHEN 'General' THEN (SELECT x.matgenlongdesc FROM QL_mstmatgen x WHERE x.matgenoid=pod.poassetrefoid) WHEN 'Spare Part' THEN (SELECT x.sparepartlongdesc FROM QL_mstsparepart x WHERE x.sparepartoid=pod.poassetrefoid) ELSE '' END)").Replace(" INNER JOIN QL_mstmatraw m ON m.matrawoid=pod.matrawoid", "").Replace("raw", objtype.reftype.ToLower());
                    }

                    DataTable dtRpt = new ClassConnection().GetDataTable(sSql, "QL_trnpomst");
                    report.SetDataSource(dtRpt);
                    report.SetParameterValue("userID", Session["UserID"].ToString());
                    report.SetParameterValue("userName", Session["UserName"].ToString());

                    sSql = "SELECT div.divname, pom.porawno pono, g1.gencode + ' ' + sup.suppname suppname, sup.suppemail email, ISNULL(sup.suppemailpo2,'') email2, ISNULL(sup.suppemailpo3,'') email3, pom.createuser FROM QL_trnporawmst pom INNER JOIN QL_mstsupp sup ON pom.suppoid=sup.suppoid INNER JOIN QL_mstdivision div ON pom.cmpcode=div.cmpcode INNER JOIN QL_mstgen g1 ON sup.suppprefixoid=g1.genoid AND g1.gengroup='PREFIX NAME' WHERE pom.porawmstoid = '" + transoid + "'";

                    if (objtype.flagtype == "A" && objtype.reftype.ToLower() != "raw")
                        sSql = sSql.Replace("matraw", objtype.mattype.ToLower()).Replace("raw", objtype.reftype.ToLower());
                    DataTable dtBU = new ClassConnection().GetDataTable(sSql, "QL_mstdivision");

                    if (dtBU != null)
                    {
                        var sPO = dtBU.Rows[0]["pono"].ToString();
                        var sEmail = dtBU.Rows[0]["email"].ToString();
                        var sEmail2 = dtBU.Rows[0]["email2"].ToString();
                        var sEmail3 = dtBU.Rows[0]["email3"].ToString();
                        var sBU = dtBU.Rows[0]["divname"].ToString();
                        var sSupp = dtBU.Rows[0]["suppname"].ToString();
                        var sReplayTo = db.Database.SqlQuery<string>("SELECT personemail FROM QL_mstprof mp INNER JOIN QL_mstperson em ON mp.personoid=em.personoid WHERE profoid='" + dtBU.Rows[0]["createuser"].ToString() + "'").FirstOrDefault();
                        var sCreateUser = db.Database.SqlQuery<string>("SELECT profname FROM QL_mstprof WHERE profoid='" + dtBU.Rows[0]["createuser"].ToString() + "'").FirstOrDefault();

                        string[] sEmailList = new string[] { sEmail, sEmail2, sEmail3 };
                        for (var i = 0; i < sEmailList.Count(); i++)
                        {
                            if (sEmailList[i] != "")
                            {
                                var sNote = "";
                                sNote = "Kepada " + sSupp + " yang terhormat, <br/> <br/>";
                                sNote += "Terlampir adalah bukti pembelian dari kami dengan P.O#" + sPO + "<br/>";
                                sNote += "Untuk melihat arsip bukti pembelian lain, Anda dapat mengunjungi dan login ke http://mis.integragroup-indonesia.com <br/><br/>";
                                sNote += "Mohon mengirimkan dokumen konfirmasi  Anda kepada kami. <br/><br/><br/>";
                                sNote += "Salam Hangat, <br/><br/>";
                                sNote += sCreateUser + "<br/>";
                                sNote += sBU + "<br/><br/><br/>";
                                sNote += "Dear " + sSupp + ", <br/> <br/>";
                                sNote += "Please find attached our new purchase order: P.O#" + sPO + ", <br/>";
                                sNote += "To view other purchase orders conveniently and securely, you can visit us at http://mis.integragroup-indonesia.com <br/><br/>";
                                sNote += "We look forward to receiving your confirmation order. <br/><br/><br/>";
                                sNote += "Warm Regards, <br/><br/>";
                                sNote += sCreateUser + "<br/>";
                                sNote += sBU + "<br/><br/><br/>";

                                var mm = new MailMessage(new MailAddress("noreply@iil.co.id", sBU), new MailAddress(sEmailList[i], sSupp));
                                using (mm)
                                {
                                    if (sReplayTo != "")
                                        //mm.ReplyTo = new MailAddress(sReplayTo);
                                        mm.ReplyToList.Add(new MailAddress(sReplayTo));
                                    mm.Subject = sPO;
                                    mm.Body = sNote;
                                    mm.Attachments.Add(new Attachment(report.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat), sPO + ".pdf"));
                                    mm.IsBodyHtml = true;
                                    var smtp = new SmtpClient();
                                    smtp.Host = "mail.iil.co.id";
                                    var credential = new NetworkCredential();
                                    credential.UserName = "hris";
                                    credential.Password = "Integra12345";
                                    smtp.UseDefaultCredentials = true;
                                    smtp.Credentials = credential;
                                    smtp.Port = 25;
                                    smtp.Send(mm);
                                }
                            }
                        }
                    }
                }
                catch (Exception e) { error = e.ToString(); }
            }
        }

        // POST: WaitingAction/Form
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Form(waitactmodel tbl, string action, string transname)
        {
            if (Session["UserID"] == null)
                return RedirectToAction("Login", "Profile");
            
            var error = "";
            var transnofld = tbl.tblname.ToLower().Replace("ql_trn", "").Replace("ql_", "").Replace("mst", "").Replace("brt", "") + "no";
            var transoidfld = tbl.tblname.ToLower().Replace("ql_trn", "").Replace("ql_", "").Replace("brt", "") + "oid";
            var transno = "";
            try { transno = (action == "Approved" ? db.Database.SqlQuery<string>("SELECT " + transnofld + " FROM " + tbl.tblname + " WHERE cmpcode='" + tbl.cmpcode + "' AND " + transoidfld + "=" + tbl.mstoid + "").FirstOrDefault() : ""); }
            catch (Exception e) { error = e.ToString(); }
            if (action == "Approved" && string.IsNullOrEmpty(transno))
            {
                try
                {
                    var prefix = db.Database.SqlQuery<string>("SELECT TOP 1 SUBSTRING(" + transnofld + ", 1, CHARINDEX('-', " + transnofld + ") - 1) FROM " + tbl.tblname + " WHERE " + transnofld + "<>'' ORDER BY " + transoidfld + " DESC").FirstOrDefault();
                    if (tbl.tblname.ToLower() == "ql_trntransmst")
                        prefix = "TRANS";
                    if (tbl.tblname.ToLower() == "/*QL_trnapothermst*/QL_trnbelimst")
                        prefix = "APLL";
                    if (tbl.tblname.ToLower() == "/*QL_trnarcashbankmst*/QL_trncashbankmst")
                        prefix = "LEND";
                    transno = GenerateTransNo(prefix, tbl.cmpcode, tbl.tblname, transnofld);
                }
                catch (Exception e) { error = e.ToString(); }
            }

            ////PR Approval
            //if (tbl.tblname.ToLower() == "ql_prrawmst")
            //    ApprovalPRRM(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_prgenmst")
            //    ApprovalPRGM(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_prspmst")
            //    ApprovalPRSP(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_pritemmst")
            //    ApprovalPRFG(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_prassetmst")
            //    ApprovalPRFA(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            ////PO Approval
            //else if (tbl.tblname.ToLower() == "ql_trnporawmst")
            //    ApprovalPORM(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnpogenmst")
            //    ApprovalPOGM(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnpospmst")
            //    ApprovalPOSP(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnpoitemmst")
            //    ApprovalPOFG(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnpoassetmst")
            //    ApprovalPOFA(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnposervicemst")
            //    ApprovalPOService(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnposubconmst")
            //    ApprovalPOSubcon(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            ////Purchase Return Approval
            //else if (tbl.tblname.ToLower() == "ql_trnpretrawmst")
            //    ApprovalPretRM(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnpretgenmst")
            //    ApprovalPretGM(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnpretspmst")
            //    ApprovalPretSP(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnpretitemmst")
            //    ApprovalPretFG(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnpretassetmst")
            //    ApprovalPretFA(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnpretservicemst")
            //    ApprovalPretService(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            ////AP Approval
            //else if (tbl.tblname.ToLower() == "/*QL_trnaprawmst*/QL_trnbelimst")
            //    ApprovalAPRM(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnapgenmst*/QL_trnbelimst")
            //    ApprovalAPGM(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnapspmst*/QL_trnbelimst")
            //    ApprovalAPSP(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnapitemmst*/QL_trnbelimst")
            //    ApprovalAPFG(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnapassetmst*/QL_trnbelimst")
            //    ApprovalAPFA(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnapservicemst")
            //    ApprovalAPService(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnapothermst*/QL_trnbelimst")
            //    ApprovalAPOther(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnapcashbankmst*/QL_trncashbankmst")
            //    ApprovalAPCashBank(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            ////SO Approval
            //else if (tbl.tblname.ToLower() == "ql_trnsorawmst")
            //    ApprovalSORaw(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsogenmst")
            //    ApprovalSOGen(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsospmst")
            //    ApprovalSOSP(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsoitemmst")
            //    ApprovalSOFG(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsoassetmst")
            //    ApprovalSOAssets(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsologmst")
            //    ApprovalSOLog(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsosawnmst")
            //    ApprovalSOSawn(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            ////Shipment Approval
            //else if (tbl.tblname.ToLower() == "ql_trnshipmentrawmst")
            //    ApprovalShipmentRaw(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnshipmentgenmst")
            //    ApprovalShipmentGen(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnshipmentspmst")
            //    ApprovalShipmentSP(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnshipmentitemmst")
            //    ApprovalShipmentFG(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnshipmentassetmst")
            //    ApprovalShipmentAssets(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnshipmentlogmst")
            //    ApprovalShipmentLog(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnshipmentsawnmst")
            //    ApprovalShipmentSawn(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            ////Sales Return Approval
            //else if (tbl.tblname.ToLower() == "ql_trnsretrawmst")
            //    ApprovalSretRaw(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsretgenmst")
            //    ApprovalSretGen(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsretspmst")
            //    ApprovalSretSP(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsretitemmst")
            //    ApprovalSretFG(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsretlogmst")
            //    ApprovalSretLog(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnsretsawnmst")
            //    ApprovalSretSawn(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            ////AR Approval
            //else if (tbl.tblname.ToLower() == "/*QL_trnarrawmst*/QL_trnjualmst")
            //    ApprovalARRaw(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnargenmst")
            //    ApprovalARGen(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnarspmst")
            //    ApprovalARSP(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnaritemmst")
            //    ApprovalARFG(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnarassetmst")
            //    ApprovalARAssets(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnarlogmst")
            //    ApprovalARLog(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnarsawnmst*/QL_trnjualmst")
            //    ApprovalARSawn(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnarothermst")
            //    ApprovalAROther(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnarcashbankmst*/QL_trncashbankmst")
            //    ApprovalARCashBank(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            ////AR Return Approval
            //else if (tbl.tblname.ToLower() == "/*QL_trnarretrawmst*/QL_trnjualmst")
            //    ApprovalARRetRaw(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnarretgenmst*/QL_trnjualmst")
            //    ApprovalARRetGen(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnarretspmst")
            //    ApprovalARRetSP(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "ql_trnarretitemmst")
            //    ApprovalARRetFG(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnarretlogmst*/QL_trnjualmst")
            //    ApprovalARRetLog(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            //else if (tbl.tblname.ToLower() == "/*QL_trnarretsawnmst*/QL_trnjualmst")
            //    ApprovalARRetSawn(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            ////Berita Acara
            //else if (tbl.tblname.ToLower() == "ql_trnbrtacaramst")
            //    ApprovalBeritaAcara(tbl.mstoid, tbl.cmpcode, transno, action, out error);
            ////Material Transfer
            //else if (tbl.tblname.ToLower() == "ql_trntransmst")
            //    ApprovalMatTransfer(tbl.mstoid, tbl.cmpcode, transno, action, out error);

            if (string.IsNullOrEmpty(error))
            {
                try
                {
                    var createuser = db.Database.SqlQuery<string>("SELECT DISTINCT createuser FROM " + tbl.tblname + " WHERE " + transoidfld + "=" + tbl.mstoid + "").FirstOrDefault();
                    var updateuser = db.Database.SqlQuery<string>("SELECT DISTINCT upduser FROM " + tbl.tblname + " WHERE " + transoidfld + "=" + tbl.mstoid + "").FirstOrDefault();
                    if (updateuser != "")
                        SendEmail(action, transname, tbl.mstoid.ToString(), createuser, updateuser, out error);
                    if (AutoEmail == "True" && action == "Approved")
                        SendEmailPDF(tbl.mstoid.ToString(), transname, out error);
                }
                catch (Exception e) { error = e.ToString(); }
            }

            return Json(error, JsonRequestBehavior.AllowGet);
        }

        public class stockadj
        {
            public int stockadjoid { get; set; }
            public decimal stockvalue { get; set; }
        }

        public class mattransdtl
        {
            public int transdtloid { get; set; }
            public decimal transprice { get; set; }
        }

        [HttpPost]
        public JsonResult SetDataDetails(List<stockadj> dtDtl)
        {
            Session["QL_trnstockadj"] = dtDtl;
            return Json("", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult SetDataMatTransDetails(List<mattransdtl> dtDtl)
        {
            Session["QL_trntransdtl_approval"] = dtDtl;
            return Json("", JsonRequestBehavior.AllowGet);
        }

        private string GenerateTransNo(string prefix, string cmp, string tblname, string transnofld)
        {
            var sNo = prefix + "-" + ClassFunction.GetServerTime().ToString("yyyy.MM") + "-";
            sSql = "SELECT ISNULL(MAX(CAST(RIGHT(" + transnofld + ", 6) AS INTEGER)) + 1, 1) AS IDNEW FROM " + tblname + " WHERE cmpcode='" + cmp + "' AND " + transnofld + " LIKE '" + sNo + "%'";
            sNo = sNo + ClassFunction.GenNumberString(db.Database.SqlQuery<int>(sSql).FirstOrDefault(), int.Parse(NumberCounter));
            return sNo;
        }

        //#region Approval PR
        //private void ApprovalPRRM(int id, string cmp, string transno, string action, out string error)
        //{
        //    var servertime = ClassFunction.GetServerTime();
        //    error = "";
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            sSql = "UPDATE QL_prrawmst SET prrawno='" + transno + "', prrawmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND prrawmststatus='In Approval' AND prrawmstoid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_prrawmst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            objTrans.Commit();
        //        }
        //        catch(Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalPRGM(int id, string cmp, string transno, string action, out string error)
        //{
        //    var servertime = ClassFunction.GetServerTime();
        //    error = "";
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            sSql = "UPDATE QL_prgenmst SET prgenno='" + transno + "', prgenmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND prgenmststatus='In Approval' AND prgenmstoid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_prgenmst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalPRSP(int id, string cmp, string transno, string action, out string error)
        //{
        //    var servertime = ClassFunction.GetServerTime();
        //    error = "";
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            sSql = "UPDATE QL_prspmst SET prspno='" + transno + "', prspmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND prspmststatus='In Approval' AND prspmstoid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_prspmst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalPRFG(int id, string cmp, string transno, string action, out string error)
        //{
        //    var servertime = ClassFunction.GetServerTime();
        //    error = "";
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            sSql = "UPDATE QL_pritemmst SET pritemno='" + transno + "', pritemmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND pritemmststatus='In Approval' AND pritemmstoid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_pritemmst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalPRFA(int id, string cmp, string transno, string action, out string error)
        //{
        //    var servertime = ClassFunction.GetServerTime();
        //    error = "";
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            sSql = "UPDATE QL_prassetmst SET prassetno='" + transno + "', prassetmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND prassetmststatus='In Approval' AND prassetmstoid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_prassetmst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //#endregion

        //#region Approval Purchase Order
        //private void ApprovalPORM(int id, string cmp, string transno, string action, out string error)
        //{
        //    var servertime = ClassFunction.GetServerTime();
        //    var iPriceOid = ClassFunction.GenerateID("QL_MSTMATRAWPRICE");
        //    error = "";
        //    var cRate = new ClassRate();
        //    var curroid = db.Database.SqlQuery<int>("SELECT curroid FROM QL_trnporawmst WHERE cmpcode='" + cmp + "' AND porawmstoid=" + id).FirstOrDefault();
        //    var suppoid = db.Database.SqlQuery<int>("SELECT suppoid FROM QL_trnporawmst WHERE cmpcode='" + cmp + "' AND porawmstoid=" + id).FirstOrDefault();
        //    var podate = db.Database.SqlQuery<DateTime>("SELECT porawdate FROM QL_trnporawmst WHERE cmpcode='" + cmp + "' AND porawmstoid=" + id).FirstOrDefault();
        //    //List<QL_trnporawdtl> tbldtl = db.QL_trnporawdtl.Where(x => x.cmpcode == cmp && x.porawmstoid == id).ToList();
        //    //if (action == "Approved")
        //    //{
        //    cRate.SetRateValue(curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));

        //    //    if (cRate.GetRateDailyLastError != "")
        //    //        error = cRate.GetRateDailyLastError;
        //    //    if (cRate.GetRateMonthlyLastError != "")
        //    //        error = cRate.GetRateMonthlyLastError;
        //    //}            
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {

        //            if (action != "Approved")
        //                transno = "";

        //            sSql = "UPDATE QL_trnporawmst SET porawno='" + transno + "', porawmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime=CURRENT_TIMESTAMP, upduser='" + Session["UserID"].ToString() + "', updtime=CURRENT_TIMESTAMP, rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid + ", porawratetoidrchar='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', porawratetousdchar='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', porawrate2toidrchar='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', porawrate2tousdchar='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "' WHERE porawmststatus='In Approval' AND porawmstoid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnporawmst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            if (action == "Rejected")
        //            {
        //                sSql = "UPDATE QL_prrawdtl SET prrawdtlstatus='' WHERE cmpcode='" + cmp + "' AND prrawdtloid IN (SELECT prrawdtloid FROM QL_trnporawdtl WHERE cmpcode='" + cmp + "' AND porawmstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_prrawmst SET prrawmststatus='Approved' WHERE cmpcode='" + cmp + "' AND prrawmstoid IN (SELECT DISTINCT prrawmstoid FROM QL_trnporawdtl WHERE cmpcode='" + cmp + "' AND porawmstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();
        //            }

        //            if (action == "Approved")
        //            {
        //                //for (int i = 0; i < tbldtl.Count; i++)
        //                //{
        //                    //var matoid = tbldtl[i].matrawoid;
        //                    //QL_mstmatrawprice tblMatPrice = db.QL_mstmatrawprice.Where(x => x.cmpcode == cmp && x.matrawoid == matoid && x.refoid == suppoid && x.refname == "SUPPLIER" && x.curroid== curroid).FirstOrDefault();

        //                    //if (tblMatPrice != null)
        //                    //{
        //                    //    tblMatPrice.totalpurchaseqty = (tblMatPrice.totalpurchaseqty + tbldtl[i].porawqty);
        //                    //    tblMatPrice.avgpurchaseprice = ((tblMatPrice.avgpurchaseprice * tblMatPrice.totalpurchaseqty) + tbldtl[i].porawdtlamt) / (tblMatPrice.totalpurchaseqty + tbldtl[i].porawqty);
        //                    //    tblMatPrice.lastpurchaseprice = tbldtl[i].porawprice;
        //                    //    tblMatPrice.lasttrans = "QL_trnporawmst";
        //                    //    tblMatPrice.lasttransoid = id;
        //                    //    tblMatPrice.lasttransno = transno;
        //                    //    tblMatPrice.lasttransdate = podate;
        //                    //    tblMatPrice.upduser = Session["UserID"].ToString();
        //                    //    tblMatPrice.updtime = servertime;
        //                    //    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                    //    db.Entry(tblMatPrice).State = EntityState.Modified;
        //                    //}
        //                    //else
        //                    //{
        //                    //    tblMatPrice = new QL_mstmatrawprice();
        //                    //    tblMatPrice.cmpcode = cmp;
        //                    //    tblMatPrice.matrawpriceoid = iPriceOid;
        //                    //    tblMatPrice.matrawoid = tbldtl[i].matrawoid;
        //                    //    tblMatPrice.refoid = suppoid;
        //                    //    tblMatPrice.refname = "SUPPLIER";
        //                    //    tblMatPrice.totalpurchaseqty = tbldtl[i].porawqty;
        //                    //    tblMatPrice.totalsalesqty = 0;
        //                    //    tblMatPrice.avgpurchaseprice = tbldtl[i].porawprice;
        //                    //    tblMatPrice.lastpurchaseprice = tbldtl[i].porawprice;
        //                    //    tblMatPrice.avgsalesprice = 0;
        //                    //    tblMatPrice.lastsalesprice = 0;
        //                    //    tblMatPrice.lasttrans = "QL_trnporawmst";
        //                    //    tblMatPrice.lasttransoid = id;
        //                    //    tblMatPrice.lasttransno = transno;
        //                    //    tblMatPrice.lasttransdate = podate;
        //                    //    tblMatPrice.note = "";
        //                    //    tblMatPrice.res1 = "";
        //                    //    tblMatPrice.res2 = "";
        //                    //    tblMatPrice.res3 = "";
        //                    //    tblMatPrice.upduser = Session["UserID"].ToString();
        //                    //    tblMatPrice.updtime = servertime;
        //                    //    tblMatPrice.curroid = curroid;
        //                    //    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                    //    db.QL_mstmatrawprice.Add(tblMatPrice);
        //                    //}

        //                //    iPriceOid++;
        //                //}
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTMATRAWPRICE'";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //            }

        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalPOGM(int id, string cmp, string transno, string action, out string error)
        //{
        //    var servertime = ClassFunction.GetServerTime();
        //    var iPriceOid = ClassFunction.GenerateID("QL_MSTMATGENPRICE");
        //    error = "";
        //    var cRate = new ClassRate();
        //    var curroid = db.Database.SqlQuery<int>("SELECT curroid FROM QL_trnpogenmst WHERE cmpcode='" + cmp + "' AND pogenmstoid=" + id).FirstOrDefault();
        //    var suppoid = db.Database.SqlQuery<int>("SELECT suppoid FROM QL_trnpogenmst WHERE cmpcode='" + cmp + "' AND pogenmstoid=" + id).FirstOrDefault();
        //    var podate = db.Database.SqlQuery<DateTime>("SELECT pogendate FROM QL_trnpogenmst WHERE cmpcode='" + cmp + "' AND pogenmstoid=" + id).FirstOrDefault();
        //    //List<QL_trnpogendtl> tbldtl = db.QL_trnpogendtl.Where(x => x.cmpcode == cmp && x.pogenmstoid == id).ToList();
        //    //if (action == "Approved")
        //    //{
        //    cRate.SetRateValue(curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));

        //    //    if (cRate.GetRateDailyLastError != "")
        //    //        error = cRate.GetRateDailyLastError;
        //    //    if (cRate.GetRateMonthlyLastError != "")
        //    //        error = cRate.GetRateMonthlyLastError;
        //    //}            
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {

        //            if (action != "Approved")
        //                transno = "";

        //            sSql = "UPDATE QL_trnpogenmst SET pogenno='" + transno + "', pogenmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime=CURRENT_TIMESTAMP, upduser='" + Session["UserID"].ToString() + "', updtime=CURRENT_TIMESTAMP, rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid + ", pogenratetoidrchar='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', pogenratetousdchar='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', pogenrate2toidrchar='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', pogenrate2tousdchar='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "' WHERE pogenmststatus='In Approval' AND pogenmstoid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnpogenmst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            if (action == "Rejected")
        //            {
        //                sSql = "UPDATE QL_prgendtl SET prgendtlstatus='' WHERE cmpcode='" + cmp + "' AND prgendtloid IN (SELECT prgendtloid FROM QL_trnpogendtl WHERE cmpcode='" + cmp + "' AND pogenmstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_prgenmst SET prgenmststatus='Approved' WHERE cmpcode='" + cmp + "' AND prgenmstoid IN (SELECT DISTINCT prgenmstoid FROM QL_trnpogendtl WHERE cmpcode='" + cmp + "' AND pogenmstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();
        //            }

        //            if (action == "Approved")
        //            {
        //                //for (int i = 0; i < tbldtl.Count; i++)
        //                //{
        //                //    var matoid = tbldtl[i].matgenoid;
        //                //    QL_mstmatgenprice tblMatPrice = new HRMEntities().QL_mstmatgenprice.Where(x => x.cmpcode == cmp && x.matgenoid == matoid && x.refoid == suppoid && x.refname == "SUPPLIER" && x.curroid == curroid).FirstOrDefault();

        //                //    if (tblMatPrice != null)
        //                //    {
        //                //        tblMatPrice.totalpurchaseqty = (tblMatPrice.totalpurchaseqty + tbldtl[i].pogenqty);
        //                //        tblMatPrice.avgpurchaseprice = ((tblMatPrice.avgpurchaseprice * tblMatPrice.totalpurchaseqty) + tbldtl[i].pogendtlamt) / (tblMatPrice.totalpurchaseqty + tbldtl[i].pogenqty);
        //                //        tblMatPrice.lastpurchaseprice = tbldtl[i].pogenprice;
        //                //        tblMatPrice.lasttrans = "QL_trnpogenmst";
        //                //        tblMatPrice.lasttransoid = id;
        //                //        tblMatPrice.lasttransno = transno;
        //                //        tblMatPrice.lasttransdate = podate;
        //                //        tblMatPrice.upduser = Session["UserID"].ToString();
        //                //        tblMatPrice.updtime = servertime;
        //                //        tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                //        db.Entry(tblMatPrice).State = EntityState.Modified;
        //                //    }
        //                //    else
        //                //    {
        //                //        tblMatPrice = new QL_mstmatgenprice();
        //                //        tblMatPrice.cmpcode = cmp;
        //                //        tblMatPrice.matgenpriceoid = iPriceOid;
        //                //        tblMatPrice.matgenoid = tbldtl[i].matgenoid;
        //                //        tblMatPrice.refoid = suppoid;
        //                //        tblMatPrice.refname = "SUPPLIER";
        //                //        tblMatPrice.totalpurchaseqty = tbldtl[i].pogenqty;
        //                //        tblMatPrice.totalsalesqty = 0;
        //                //        tblMatPrice.avgpurchaseprice = tbldtl[i].pogenprice;
        //                //        tblMatPrice.lastpurchaseprice = tbldtl[i].pogenprice;
        //                //        tblMatPrice.avgsalesprice = 0;
        //                //        tblMatPrice.lastsalesprice = 0;
        //                //        tblMatPrice.lasttrans = "QL_trnpogenmst";
        //                //        tblMatPrice.lasttransoid = id;
        //                //        tblMatPrice.lasttransno = transno;
        //                //        tblMatPrice.lasttransdate = podate;
        //                //        tblMatPrice.note = "";
        //                //        tblMatPrice.res1 = "";
        //                //        tblMatPrice.res2 = "";
        //                //        tblMatPrice.res3 = "";
        //                //        tblMatPrice.upduser = Session["UserID"].ToString();
        //                //        tblMatPrice.updtime = servertime;
        //                //        tblMatPrice.curroid = curroid;
        //                //        tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                //        db.QL_mstmatgenprice.Add(tblMatPrice);
        //                //    }

        //                //    iPriceOid++;
        //                //}
        //                db.SaveChanges();


        //                sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTMATGENPRICE'";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //            }

        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalPOSP(int id, string cmp, string transno, string action, out string error)
        //{
        //    var servertime = ClassFunction.GetServerTime();
        //    var iPriceOid = ClassFunction.GenerateID("QL_MSTSPAREPARTPRICE");
        //    error = "";
        //    var cRate = new ClassRate();
        //    var curroid = db.Database.SqlQuery<int>("SELECT curroid FROM QL_trnpospmst WHERE cmpcode='" + cmp + "' AND pospmstoid=" + id).FirstOrDefault();
        //    var suppoid = db.Database.SqlQuery<int>("SELECT suppoid FROM QL_trnpospmst WHERE cmpcode='" + cmp + "' AND pospmstoid=" + id).FirstOrDefault();
        //    var podate = db.Database.SqlQuery<DateTime>("SELECT pospdate FROM QL_trnpospmst WHERE cmpcode='" + cmp + "' AND pospmstoid=" + id).FirstOrDefault();
        //    //List<QL_trnpospdtl> tbldtl = db.QL_trnpospdtl.Where(x => x.cmpcode == cmp && x.pospmstoid == id).ToList();
        //    //if (action == "Approved")
        //    //{
        //    cRate.SetRateValue(curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));

        //    //    if (cRate.GetRateDailyLastError != "")
        //    //        error = cRate.GetRateDailyLastError;
        //    //    if (cRate.GetRateMonthlyLastError != "")
        //    //        error = cRate.GetRateMonthlyLastError;
        //    //}            
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {

        //            if (action != "Approved")
        //                transno = "";

        //            sSql = "UPDATE QL_trnpospmst SET pospno='" + transno + "', pospmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime=CURRENT_TIMESTAMP, upduser='" + Session["UserID"].ToString() + "', updtime=CURRENT_TIMESTAMP, rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid + ", pospratetoidrchar='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', pospratetousdchar='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', posprate2toidrchar='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', posprate2tousdchar='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "' WHERE pospmststatus='In Approval' AND pospmstoid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnpospmst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            if (action == "Rejected")
        //            {
        //                sSql = "UPDATE QL_prspdtl SET prspdtlstatus='' WHERE cmpcode='" + cmp + "' AND prspdtloid IN (SELECT prspdtloid FROM QL_trnpospdtl WHERE cmpcode='" + cmp + "' AND pospmstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_prspmst SET prspmststatus='Approved' WHERE cmpcode='" + cmp + "' AND prspmstoid IN (SELECT DISTINCT prspmstoid FROM QL_trnpospdtl WHERE cmpcode='" + cmp + "' AND pospmstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();
        //            }

        //            if (action == "Approved")
        //            {
        //                //for (int i = 0; i < tbldtl.Count; i++)
        //                //{
        //                //    var matoid = tbldtl[i].sparepartoid;
        //                //    QL_mstsparepartprice tblMatPrice = new HRMEntities().QL_mstsparepartprice.Where(x => x.cmpcode == cmp && x.sparepartoid == matoid && x.refoid == suppoid && x.refname == "SUPPLIER" && x.curroid == curroid).FirstOrDefault();

        //                //    if (tblMatPrice != null)
        //                //    {
        //                //        tblMatPrice.totalpurchaseqty = (tblMatPrice.totalpurchaseqty + tbldtl[i].pospqty);
        //                //        tblMatPrice.avgpurchaseprice = ((tblMatPrice.avgpurchaseprice * tblMatPrice.totalpurchaseqty) + tbldtl[i].pospdtlamt) / (tblMatPrice.totalpurchaseqty + tbldtl[i].pospqty);
        //                //        tblMatPrice.lastpurchaseprice = tbldtl[i].pospprice;
        //                //        tblMatPrice.lasttrans = "QL_trnpospmst";
        //                //        tblMatPrice.lasttransoid = id;
        //                //        tblMatPrice.lasttransno = transno;
        //                //        tblMatPrice.lasttransdate = podate;
        //                //        tblMatPrice.upduser = Session["UserID"].ToString();
        //                //        tblMatPrice.updtime = servertime;
        //                //        tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                //        db.Entry(tblMatPrice).State = EntityState.Modified;
        //                //    }
        //                //    else
        //                //    {
        //                //        tblMatPrice = new QL_mstsparepartprice();
        //                //        tblMatPrice.cmpcode = cmp;
        //                //        tblMatPrice.sparepartpriceoid = iPriceOid;
        //                //        tblMatPrice.sparepartoid = tbldtl[i].sparepartoid;
        //                //        tblMatPrice.refoid = suppoid;
        //                //        tblMatPrice.refname = "SUPPLIER";
        //                //        tblMatPrice.totalpurchaseqty = tbldtl[i].pospqty;
        //                //        tblMatPrice.totalsalesqty = 0;
        //                //        tblMatPrice.avgpurchaseprice = tbldtl[i].pospprice;
        //                //        tblMatPrice.lastpurchaseprice = tbldtl[i].pospprice;
        //                //        tblMatPrice.avgsalesprice = 0;
        //                //        tblMatPrice.lastsalesprice = 0;
        //                //        tblMatPrice.lasttrans = "QL_trnpospmst";
        //                //        tblMatPrice.lasttransoid = id;
        //                //        tblMatPrice.lasttransno = transno;
        //                //        tblMatPrice.lasttransdate = podate;
        //                //        tblMatPrice.note = "";
        //                //        tblMatPrice.res1 = "";
        //                //        tblMatPrice.res2 = "";
        //                //        tblMatPrice.res3 = "";
        //                //        tblMatPrice.upduser = Session["UserID"].ToString();
        //                //        tblMatPrice.updtime = servertime;
        //                //        tblMatPrice.curroid = curroid;
        //                //        tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                //        db.QL_mstsparepartprice.Add(tblMatPrice);
        //                //    }

        //                //    iPriceOid++;
        //                //}
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTSPAREPARTPRICE'";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //            }

        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalPOFG(int id, string cmp, string transno, string action, out string error)
        //{
        //    var servertime = ClassFunction.GetServerTime();
        //    var iPriceOid = ClassFunction.GenerateID("QL_MSTITEMPRICE");
        //    error = "";
        //    var cRate = new ClassRate();
        //    var curroid = db.Database.SqlQuery<int>("SELECT curroid FROM QL_trnpoitemmst WHERE cmpcode='" + cmp + "' AND poitemmstoid=" + id).FirstOrDefault();
        //    var suppoid = db.Database.SqlQuery<int>("SELECT suppoid FROM QL_trnpoitemmst WHERE cmpcode='" + cmp + "' AND poitemmstoid=" + id).FirstOrDefault();
        //    var podate = db.Database.SqlQuery<DateTime>("SELECT poitemdate FROM QL_trnpoitemmst WHERE cmpcode='" + cmp + "' AND poitemmstoid=" + id).FirstOrDefault();
        //    //List<QL_trnpoitemdtl> tbldtl = db.QL_trnpoitemdtl.Where(x => x.cmpcode == cmp && x.poitemmstoid == id).ToList();
        //    //if (action == "Approved")
        //    //{
        //    cRate.SetRateValue(curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));

        //    //    if (cRate.GetRateDailyLastError != "")
        //    //        error = cRate.GetRateDailyLastError;
        //    //    if (cRate.GetRateMonthlyLastError != "")
        //    //        error = cRate.GetRateMonthlyLastError;
        //    //}            
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {

        //            if (action != "Approved")
        //                transno = "";

        //            sSql = "UPDATE QL_trnpoitemmst SET poitemno='" + transno + "', poitemmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime=CURRENT_TIMESTAMP, upduser='" + Session["UserID"].ToString() + "', updtime=CURRENT_TIMESTAMP, rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid + ", poitemratetoidrchar='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', poitemratetousdchar='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', poitemrate2toidrchar='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', poitemrate2tousdchar='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "' WHERE poitemmststatus='In Approval' AND poitemmstoid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnpoitemmst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            if (action == "Rejected")
        //            {
        //                sSql = "UPDATE QL_pritemdtl SET pritemdtlstatus='' WHERE cmpcode='" + cmp + "' AND pritemdtloid IN (SELECT pritemdtloid FROM QL_trnpoitemdtl WHERE cmpcode='" + cmp + "' AND poitemmstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_pritemmst SET pritemmststatus='Approved' WHERE cmpcode='" + cmp + "' AND pritemmstoid IN (SELECT DISTINCT pritemmstoid FROM QL_trnpoitemdtl WHERE cmpcode='" + cmp + "' AND poitemmstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();
        //            }

        //            if (action == "Approved")
        //            {
        //                //for (int i = 0; i < tbldtl.Count; i++)
        //                //{
        //                    //var matoid = tbldtl[i].itemoid;
        //                    //QL_mstitemprice tblMatPrice = new HRMEntities().QL_mstitemprice.Where(x => x.cmpcode == cmp && x.itemoid == matoid && x.refoid == suppoid && x.refname == "SUPPLIER" && x.curroid == curroid).FirstOrDefault();

        //                    //if (tblMatPrice != null)
        //                    //{
        //                        //tblMatPrice.totalpurchaseqty = (tblMatPrice.totalpurchaseqty + tbldtl[i].poitemqty);
        //                        //tblMatPrice.avgpurchaseprice = ((tblMatPrice.avgpurchaseprice * tblMatPrice.totalpurchaseqty) + tbldtl[i].poitemdtlamt) / (tblMatPrice.totalpurchaseqty + tbldtl[i].poitemqty);
        //                        //tblMatPrice.lastpurchaseprice = tbldtl[i].poitemprice;
        //                        //tblMatPrice.lasttrans = "QL_trnpoitemmst";
        //                        //tblMatPrice.lasttransoid = id;
        //                        //tblMatPrice.lasttransno = transno;
        //                        //tblMatPrice.lasttransdate = podate;
        //                        //tblMatPrice.upduser = Session["UserID"].ToString();
        //                        //tblMatPrice.updtime = servertime;
        //                        //tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                    //    db.Entry(tblMatPrice).State = EntityState.Modified;
        //                    //}
        //                    //else
        //                    //{
        //                    //    tblMatPrice = new QL_mstitemprice();
        //                    //    tblMatPrice.cmpcode = cmp;
        //                    //    tblMatPrice.itempriceoid = iPriceOid;
        //                        //tblMatPrice.itemoid = tbldtl[i].itemoid;
        //                        //tblMatPrice.refoid = suppoid;
        //                        //tblMatPrice.refname = "SUPPLIER";
        //                        //tblMatPrice.totalpurchaseqty = tbldtl[i].poitemqty;
        //                        //tblMatPrice.totalsalesqty = 0;
        //                        //tblMatPrice.avgpurchaseprice = tbldtl[i].poitemprice;
        //                        //tblMatPrice.lastpurchaseprice = tbldtl[i].poitemprice;
        //                        //tblMatPrice.avgsalesprice = 0;
        //                        //tblMatPrice.lastsalesprice = 0;
        //                        //tblMatPrice.lasttrans = "QL_trnpoitemmst";
        //                        //tblMatPrice.lasttransoid = id;
        //                        //tblMatPrice.lasttransno = transno;
        //                        //tblMatPrice.lasttransdate = podate;
        //                        //tblMatPrice.note = "";
        //                        //tblMatPrice.res1 = "";
        //                        //tblMatPrice.res2 = "";
        //                        //tblMatPrice.res3 = "";
        //                        //tblMatPrice.upduser = Session["UserID"].ToString();
        //                        //tblMatPrice.updtime = servertime;
        //                        //tblMatPrice.curroid = curroid;
        //                        //tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                //        db.QL_mstitemprice.Add(tblMatPrice);
        //                //    }

        //                //    iPriceOid++;
        //                //}
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTITEMPRICE'";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //            }

        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalPOFA(int id, string cmp, string transno, string action, out string error)
        //{
        //    var servertime = ClassFunction.GetServerTime();
        //    var iPriceGenOid = ClassFunction.GenerateID("QL_MSTMATGENPRICE");
        //    var iPriceSPOid = ClassFunction.GenerateID("QL_MSTSPAREPARTPRICE");
        //    error = "";
        //    var cRate = new ClassRate();
        //    var curroid = db.Database.SqlQuery<int>("SELECT curroid FROM QL_trnpoassetmst WHERE cmpcode='" + cmp + "' AND poassetmstoid=" + id).FirstOrDefault();
        //    var suppoid = db.Database.SqlQuery<int>("SELECT suppoid FROM QL_trnpoassetmst WHERE cmpcode='" + cmp + "' AND poassetmstoid=" + id).FirstOrDefault();
        //    var podate = db.Database.SqlQuery<DateTime>("SELECT poassetdate FROM QL_trnpoassetmst WHERE cmpcode='" + cmp + "' AND poassetmstoid=" + id).FirstOrDefault();
        //    //List<QL_trnpoassetdtl> tbldtl = db.QL_trnpoassetdtl.Where(x => x.cmpcode == cmp && x.poassetmstoid == id).ToList();
        //    //if (action == "Approved")
        //    //{
        //    cRate.SetRateValue(curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));

        //    //    if (cRate.GetRateDailyLastError != "")
        //    //        error = cRate.GetRateDailyLastError;
        //    //    if (cRate.GetRateMonthlyLastError != "")
        //    //        error = cRate.GetRateMonthlyLastError;
        //    //}            
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {

        //            if (action != "Approved")
        //                transno = "";

        //            sSql = "UPDATE QL_trnpoassetmst SET poassetno='" + transno + "', poassetmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime=CURRENT_TIMESTAMP, upduser='" + Session["UserID"].ToString() + "', updtime=CURRENT_TIMESTAMP, rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid + ", poassetratetoidrchar='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', poassetratetousdchar='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', poassetrate2toidrchar='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', poassetrate2tousdchar='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "' WHERE poassetmststatus='In Approval' AND poassetmstoid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnpoassetmst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);
        //            db.SaveChanges();

        //            if (action == "Rejected")
        //            {
        //                sSql = "UPDATE QL_prassetdtl SET prassetdtlstatus='' WHERE cmpcode='" + cmp + "' AND prassetdtloid IN (SELECT prassetdtloid FROM QL_trnpoassetdtl WHERE cmpcode='" + cmp + "' AND poassetmstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_prassetmst SET prassetmststatus='Approved' WHERE cmpcode='" + cmp + "' AND prassetmstoid IN (SELECT DISTINCT prassetmstoid FROM QL_trnpoassetdtl WHERE cmpcode='" + cmp + "' AND poassetmstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();
        //            }

        //            if (action == "Approved")
        //            {
        //                //for (int i = 0; i < tbldtl.Count; i++)
        //                //{
        //                //    QL_mstmatgenprice tblMatPriceGen = null;
        //                //    QL_mstsparepartprice tblMatPriceSP = null;

        //                //    var matoid = tbldtl[i].poassetrefoid;
        //                //    if (tbldtl[i].poassetreftype.ToUpper() == "GENERAL")
        //                //    {
        //                //        tblMatPriceGen = db.QL_mstmatgenprice.Where(x => x.cmpcode == cmp && x.matgenoid == matoid && x.refoid == suppoid && x.refname == "SUPPLIER" && x.curroid == curroid).FirstOrDefault();
        //                //    }
        //                //    else
        //                //    {
        //                //        tblMatPriceSP = db.QL_mstsparepartprice.Where(x => x.cmpcode == cmp && x.sparepartoid == matoid && x.refoid == suppoid && x.refname == "SUPPLIER" && x.curroid == curroid).FirstOrDefault();
        //                //    }
                           

        //                //    if (tblMatPriceGen != null)
        //                //    {
        //                //        tblMatPriceGen.totalpurchaseqty = (tblMatPriceGen.totalpurchaseqty + tbldtl[i].poassetqty);
        //                //        tblMatPriceGen.avgpurchaseprice = ((tblMatPriceGen.avgpurchaseprice * tblMatPriceGen.totalpurchaseqty) + tbldtl[i].poassetdtlamt) / (tblMatPriceGen.totalpurchaseqty + tbldtl[i].poassetqty);
        //                //        tblMatPriceGen.lastpurchaseprice = tbldtl[i].poassetprice;
        //                //        tblMatPriceGen.lasttrans = "QL_trnpoassetmst";
        //                //        tblMatPriceGen.lasttransoid = id;
        //                //        tblMatPriceGen.lasttransno = transno;
        //                //        tblMatPriceGen.lasttransdate = podate;
        //                //        tblMatPriceGen.upduser = Session["UserID"].ToString();
        //                //        tblMatPriceGen.updtime = servertime;
        //                //        tblMatPriceGen.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                //        db.Entry(tblMatPriceGen).State = EntityState.Modified;
        //                //    }
        //                //    else if (tblMatPriceSP != null)
        //                //    {
        //                //        tblMatPriceSP.totalpurchaseqty = (tblMatPriceSP.totalpurchaseqty + tbldtl[i].poassetqty);
        //                //        tblMatPriceSP.avgpurchaseprice = ((tblMatPriceSP.avgpurchaseprice * tblMatPriceSP.totalpurchaseqty) + tbldtl[i].poassetdtlamt) / (tblMatPriceSP.totalpurchaseqty + tbldtl[i].poassetqty);
        //                //        tblMatPriceSP.lastpurchaseprice = tbldtl[i].poassetprice;
        //                //        tblMatPriceSP.lasttrans = "QL_trnpoassetmst";
        //                //        tblMatPriceSP.lasttransoid = id;
        //                //        tblMatPriceSP.lasttransno = transno;
        //                //        tblMatPriceSP.lasttransdate = podate;
        //                //        tblMatPriceSP.upduser = Session["UserID"].ToString();
        //                //        tblMatPriceSP.updtime = servertime;
        //                //        tblMatPriceSP.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                //        db.Entry(tblMatPriceSP).State = EntityState.Modified;
        //                //    }
        //                //    else 
        //                //    {
        //                //        if (tbldtl[i].poassetreftype.ToUpper() == "GENERAL")
        //                //        {
        //                //            tblMatPriceGen = new QL_mstmatgenprice();
        //                //            tblMatPriceGen.cmpcode = cmp;
        //                //            tblMatPriceGen.matgenpriceoid = iPriceGenOid;
        //                //            tblMatPriceGen.matgenoid = tbldtl[i].poassetrefoid;
        //                //            tblMatPriceGen.refoid = suppoid;
        //                //            tblMatPriceGen.refname = "SUPPLIER";
        //                //            tblMatPriceGen.totalpurchaseqty = tbldtl[i].poassetqty;
        //                //            tblMatPriceGen.totalsalesqty = 0;
        //                //            tblMatPriceGen.avgpurchaseprice = tbldtl[i].poassetprice;
        //                //            tblMatPriceGen.lastpurchaseprice = tbldtl[i].poassetprice;
        //                //            tblMatPriceGen.avgsalesprice = 0;
        //                //            tblMatPriceGen.lastsalesprice = 0;
        //                //            tblMatPriceGen.lasttrans = "QL_trnpoassetmst";
        //                //            tblMatPriceGen.lasttransoid = id;
        //                //            tblMatPriceGen.lasttransno = transno;
        //                //            tblMatPriceGen.lasttransdate = podate;
        //                //            tblMatPriceGen.note = "";
        //                //            tblMatPriceGen.res1 = "";
        //                //            tblMatPriceGen.res2 = "";
        //                //            tblMatPriceGen.res3 = "";
        //                //            tblMatPriceGen.upduser = Session["UserID"].ToString();
        //                //            tblMatPriceGen.updtime = servertime;
        //                //            tblMatPriceGen.curroid = curroid;
        //                //            tblMatPriceGen.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                //            db.QL_mstmatgenprice.Add(tblMatPriceGen);

        //                //            iPriceGenOid++;
        //                //        }
        //                //        else
        //                //        {
        //                //            tblMatPriceSP = new QL_mstsparepartprice();
        //                //            tblMatPriceSP.cmpcode = cmp;
        //                //            tblMatPriceSP.sparepartpriceoid = iPriceSPOid;
        //                //            tblMatPriceSP.sparepartoid = tbldtl[i].poassetrefoid;
        //                //            tblMatPriceSP.refoid = suppoid;
        //                //            tblMatPriceSP.refname = "SUPPLIER";
        //                //            tblMatPriceSP.totalpurchaseqty = tbldtl[i].poassetqty;
        //                //            tblMatPriceSP.totalsalesqty = 0;
        //                //            tblMatPriceSP.avgpurchaseprice = tbldtl[i].poassetprice;
        //                //            tblMatPriceSP.lastpurchaseprice = tbldtl[i].poassetprice;
        //                //            tblMatPriceSP.avgsalesprice = 0;
        //                //            tblMatPriceSP.lastsalesprice = 0;
        //                //            tblMatPriceSP.lasttrans = "QL_trnpoassetmst";
        //                //            tblMatPriceSP.lasttransoid = id;
        //                //            tblMatPriceSP.lasttransno = transno;
        //                //            tblMatPriceSP.lasttransdate = podate;
        //                //            tblMatPriceSP.note = "";
        //                //            tblMatPriceSP.res1 = "";
        //                //            tblMatPriceSP.res2 = "";
        //                //            tblMatPriceSP.res3 = "";
        //                //            tblMatPriceSP.upduser = Session["UserID"].ToString();
        //                //            tblMatPriceSP.updtime = servertime;
        //                //            tblMatPriceSP.curroid = curroid;
        //                //            tblMatPriceSP.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                //            db.QL_mstsparepartprice.Add(tblMatPriceSP);

        //                //            iPriceSPOid++;
        //                //        }
        //                //    }

                            
        //                //}
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceGenOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTMATGENPRICE'";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceSPOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTSPAREPARTPRICE'";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //            }

        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalPOService(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    var servertime = ClassFunction.GetServerTime();
        //    var tbl = db.QL_trnposervicemst.Where(x => x.cmpcode == cmp && x.poservicemstoid == id && x.poservicemststatus == "In Approval").First();
        //    if (tbl == null)
        //    {
        //        error = "Please select data for approval!";
        //        return;
        //    }
        //    List<QL_trnposervicedtl> tbldtl = db.QL_trnposervicedtl.Where(x => x.cmpcode == cmp && x.poservicemstoid == id).ToList();
        //    if (tbldtl == null || tbldtl.Count == 0)
        //    {
        //        error = "Please select data for approval!";
        //        return;
        //    }
        //    var cRate = new ClassRate();
        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tbl.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //        {
        //            error = cRate.GetRateDailyLastError;
        //            return;
        //        }
        //        if (cRate.GetRateMonthlyLastError != "")
        //        {
        //            error = cRate.GetRateMonthlyLastError;
        //            return;
        //        }
        //    }
        //    var iPriceOid = ClassFunction.GenerateID("QL_CRDSERVICE");
        //    var periodacctg = ClassFunction.GetDateToPeriodAcctg(servertime);
                       
        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            tbl.poservicemststatus = action;
        //            tbl.upduser = Session["UserID"].ToString();
        //            tbl.updtime = servertime;
        //            tbl.approvaluser = Session["UserID"].ToString();
        //            tbl.approvaldatetime = servertime;
        //            if (action == "Approved")
        //            {
        //                tbl.poserviceno = transno;
        //                tbl.rateoid = cRate.GetRateDailyOid;
        //                tbl.rate2oid = cRate.GetRateMonthlyOid;
        //            }
        //            db.Entry(tbl).State = EntityState.Modified;

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnposervicemst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);

        //            if (action == "Approved")
        //            {
        //                for (int i = 0; i < tbldtl.Count; i++)
        //                {
        //                    var xxx = tbldtl[i].serviceoid;
        //                    var crdprice = new HRMEntities().QL_crdservice.Where(c => c.cmpcode == cmp && c.periodacctg == periodacctg && c.serviceoid == xxx && c.suppoid == tbl.suppoid && c.curroid == tbl.curroid).FirstOrDefault();

        //                    if (crdprice != null)
        //                    {
        //                        crdprice.avgprice = (crdprice.avgprice + tbldtl[i].poserviceprice) / 2;
        //                        crdprice.avgperiodprice = (crdprice.avgperiodprice + tbldtl[i].poserviceprice) / 2;
        //                        crdprice.lastprice = tbldtl[i].poserviceprice;
        //                        crdprice.lasttransoid = id;
        //                        crdprice.lasttranstype = "QL_trnposervicemst";
        //                        crdprice.lasttransdate = tbl.poservicedate;
        //                        crdprice.upduser = Session["UserID"].ToString();
        //                        crdprice.updtime = servertime;
        //                        db.Entry(crdprice).State = EntityState.Modified;
        //                    }
        //                    else
        //                    {
        //                        crdprice = new QL_crdservice();
        //                        crdprice.cmpcode = cmp;
        //                        crdprice.crdserviceoid = iPriceOid;
        //                        crdprice.periodacctg = periodacctg;
        //                        crdprice.serviceoid = tbldtl[i].serviceoid;
        //                        crdprice.suppoid = tbl.suppoid;
        //                        crdprice.avgprice = tbldtl[i].poserviceprice;
        //                        crdprice.avgperiodprice = tbldtl[i].poserviceprice;
        //                        crdprice.lastprice = tbldtl[i].poserviceprice;
        //                        crdprice.lasttransoid = id;
        //                        crdprice.lasttranstype = "QL_trnpoitemmst";
        //                        crdprice.lasttransdate = tbl.poservicedate;
        //                        crdprice.upduser = Session["UserID"].ToString();
        //                        crdprice.updtime = servertime;
        //                        crdprice.curroid = tbl.curroid;
        //                        db.QL_crdservice.Add(crdprice);
        //                    }
        //                    iPriceOid++;
        //                }
        //                sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_CRDSERVICE'";
        //                db.Database.ExecuteSqlCommand(sSql);
        //            }

        //            db.SaveChanges();
        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalPOSubcon(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    var servertime = ClassFunction.GetServerTime();
        //    //var tbl = db.QL_trnposubconmst.Where(x => x.cmpcode == cmp && x.posubconmstoid == id && x.posubconmststatus == "In Approval").First();
        //    //if (tbl == null)
        //    //{
        //    //    error = "Please select data for approval!";
        //    //    return;
        //    //}
        //    //List<QL_trnposubcondtl1> tbldtl = db.QL_trnposubcondtl1.Where(x => x.cmpcode == cmp && x.posubconmstoid == id).ToList();
        //    //if (tbldtl == null || tbldtl.Count == 0)
        //    //{
        //    //    error = "Please select data for approval!";
        //    //    return;
        //    //}
        //    //List<QL_trnposubcondtl2> tbldtl2 = db.QL_trnposubcondtl2.Where(x => x.cmpcode == cmp && x.posubconmstoid == id).ToList();
        //    //if (tbldtl2 == null || tbldtl2.Count == 0)
        //    //{
        //    //    error = "Please select data for approval!";
        //    //    return;
        //    //}
        //    var cRate = new ClassRate();
        //    if (action == "Approved")
        //    {
        //        var curroid = (from c in db.QL_mstcurr where c.activeflag == "ACTIVE" && c.currcode == "IDR" select c.curroid).FirstOrDefault();
        //        cRate.SetRateValue(curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //        {
        //            error = cRate.GetRateDailyLastError;
        //            return;
        //        }
        //        if (cRate.GetRateMonthlyLastError != "")
        //        {
        //            error = cRate.GetRateMonthlyLastError;
        //            return;
        //        }
        //    }
        //    var periodacctg = ClassFunction.GetDateToPeriodAcctg(servertime);

        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            //tbl.posubconmststatus = action;
        //            //tbl.upduser = Session["UserID"].ToString();
        //            //tbl.updtime = servertime;
        //            //tbl.approvaluser = Session["UserID"].ToString();
        //            //tbl.approvaldatetime = servertime;
        //            //if (action == "Approved")
        //            //{
        //            //    tbl.posubconno = transno;
        //            //    tbl.posubcontotalcostusd = tbl.posubcontotalcost * cRate.GetRateMonthlyUSDValue;
        //            //    tbl.posubcondppusd = tbl.posubcondpp * cRate.GetRateMonthlyUSDValue;
        //            //    tbl.posubcontaxamtusd = tbl.posubcontaxamt * cRate.GetRateMonthlyUSDValue;
        //            //}
        //            //db.Entry(tbl).State = EntityState.Modified;

        //            //sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnposubconmst' AND oid=" + id;
        //            //db.Database.ExecuteSqlCommand(sSql);

        //            //if (action == "Rejected")
        //            //{
        //            //    if (tbl.posubconflag != "")
        //            //    {
        //            //        var sPRType = "raw";
        //            //        if (tbl.posubconref == "General")
        //            //            sPRType = "gen";
        //            //        else if (tbl.posubconref == "Spare Part")
        //            //            sPRType = "sp";
        //            //        else if (tbl.posubconref == "Log")
        //            //            sPRType = "wip";
        //            //        else if (tbl.posubconref == "Sawn")
        //            //            sPRType = "sawn";

        //            //        sSql = "UPDATE QL_pr" + sPRType + "mst SET pr" + sPRType + "mststatus='Approved' WHERE cmpcode='" + cmp + "' AND pr" + sPRType + "mstoid IN (SELECT prsubconmstoid FROM QL_trnposubcondtl2 WHERE cmpcode='" + cmp + "' AND posubconmstoid=" + id + ")";
        //            //        db.Database.ExecuteSqlCommand(sSql);
        //            //        sSql = "UPDATE QL_pr" + sPRType + "dtl SET pr" + sPRType + "dtlstatus='' WHERE cmpcode='" + cmp + "' AND pr" + sPRType + "dtloid IN (SELECT prsubcondtloid FROM QL_trnposubcondtl2 WHERE cmpcode='" + cmp + "' AND posubconmstoid=" + id + ")";
        //            //        db.Database.ExecuteSqlCommand(sSql);
        //            //    }
        //            //}

        //            db.SaveChanges();
        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}
        //#endregion

        //#region Approval Purchase Return
        //private void ApprovalPretRM(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    // Interface Validation
        //    if (!ClassFunction.IsInterfaceExists("VAR_STOCK_RM", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_STOCK_RM");
        //    if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PURC_RECEIVED", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_PURC_RECEIVED");
        //    if (error == "" && !ClassFunction.IsInterfaceExists("VAR_SELISIH_EFISIENSI", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_SELISIH_EFISIENSI");

        //    sSql = "SELECT pretd.cmpcode, pretrawdtloid, pretrawmstoid, pretrawdtlseq, pretd.mrrawmstoid, pretd.mrrawdtloid, pretrawwhoid, pretd.matrawoid, pretrawqty, pretrawunitoid, pretrawdtlstatus, pretrawdtlnote, pretrawdtlres1, pretrawdtlres2, pretrawdtlres3, pretd.upduser, pretd.updtime, mrrawvalue pretrawvalue, mrrawvalueidr pretrawvalueidr, mrrawvalueusd pretrawvalueusd, reasonoid, pretrawvalueidr_stock, pretrawvalueusd_stock FROM QL_trnpretrawdtl pretd INNER JOIN QL_trnmrrawdtl mrd ON mrd.cmpcode=pretd.cmpcode AND mrd.mrrawmstoid=pretd.mrrawmstoid AND mrd.mrrawdtloid=pretd.mrrawdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretrawmstoid=" + id + " ORDER BY pretrawdtlseq";
        //    List<QL_trnpretrawdtl> tbldtl = db.Database.SqlQuery<QL_trnpretrawdtl>(sSql).ToList();

        //    // Available Stock Validation & Stock Value Assignment
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
           
        //    for (int i = 0; i < tbldtl.Count; i++)
        //    {
        //        var totalqty = tbldtl.Where(x => x.matrawoid == tbldtl[i].matrawoid && x.pretrawwhoid == tbldtl[i].pretrawwhoid).Sum(x => x.pretrawqty);
        //        if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].matrawoid, tbldtl[i].pretrawwhoid, totalqty, "RAW MATERIAL"))
        //        {
        //            error = "Every Return Qty must be less than Stock Qty!";
        //            break;
        //        }
        //        else
        //        {
        //            tbldtl[i].pretrawvalueidr_stock = ClassFunction.GetStockValueIDR(cmp, sPeriod, "RAW MATERIAL", tbldtl[i].matrawoid);
        //            tbldtl[i].pretrawvalueusd_stock = ClassFunction.GetStockValueUSD(cmp, sPeriod, "RAW MATERIAL", tbldtl[i].matrawoid);
        //        }
                
        //    }

        //    var podtloid = "";
        //    var pomstoid = "";
        //    for (int i = 0; i < tbldtl.Count; i++)
        //    {
        //        sSql = "SELECT regd.* FROM QL_trnregisterdtl regd INNER JOIN QL_trnmrrawdtl mrd ON mrd.cmpcode=regd.cmpcode AND mrd.registerdtloid=regd.registerdtloid INNER JOIN QL_trnpretrawdtl pretd ON pretd.cmpcode=mrd.cmpcode AND pretd.mrrawdtloid=mrd.mrrawdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretrawdtloid=" + tbldtl[i].pretrawdtloid;
        //        List<QL_trnregisterdtl> tbldtlPOD = db.Database.SqlQuery<QL_trnregisterdtl>(sSql).ToList();
        //        for (int j = 0; j < tbldtlPOD.Count; j++)
        //        {
        //            podtloid += tbldtlPOD[j].porefdtloid + "," ;
                        
        //        }
        //    sSql = "SELECT regd.* FROM QL_trnregisterdtl regd INNER JOIN QL_trnmrrawdtl mrd ON mrd.cmpcode=regd.cmpcode AND mrd.registerdtloid=regd.registerdtloid INNER JOIN QL_trnpretrawdtl pretd ON pretd.cmpcode=mrd.cmpcode AND pretd.mrrawdtloid=mrd.mrrawdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretrawdtloid=" + tbldtl[i].pretrawdtloid;
        //        List<QL_trnregisterdtl> tbldtlPOM = db.Database.SqlQuery<QL_trnregisterdtl>(sSql).ToList();
        //        for (int j = 0; j < tbldtlPOM.Count; j++)
        //        {
        //            pomstoid += tbldtlPOM[j].porefmstoid + ",";

        //        }
        //    }
        //    podtloid = ClassFunction.Left(podtloid, podtloid.Length - 1);
        //    pomstoid = ClassFunction.Left(pomstoid, pomstoid.Length - 1);

        //    if (error == "")
        //    {
        //        var conmtroid = ClassFunction.GenerateID("QL_conmat");
        //        var crdmatoid = ClassFunction.GenerateID("QL_crdmtr");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var stockvalueoid = ClassFunction.GenerateID("QL_stockvalue");
        //        var iVAR_STOCK_RM = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_RM", cmp));
        //        var iVAR_PURC_RECEIVED = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PURC_RECEIVED", cmp));
        //        var iVAR_SELISIH_EFISIENSI = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_SELISIH_EFISIENSI", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                sSql = "UPDATE QL_trnpretrawmst SET pretrawno='" + transno + "', pretrawmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND pretrawmststatus='In Approval' AND pretrawmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnpretrawmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnmrrawdtl SET mrrawdtlres1='' WHERE cmpcode='" + cmp + "' AND mrrawdtloid IN (SELECT mrrawdtloid FROM QL_trnpretrawdtl WHERE cmpcode='" + cmp + "' AND pretrawmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnmrrawmst SET mrrawmstres1='' WHERE cmpcode='" + cmp + "' AND mrrawmstoid IN (SELECT mrrawmstoid FROM QL_trnpretrawdtl WHERE cmpcode='" + cmp + "' AND pretrawmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    QL_trnpretrawdtl tbltmp;
        //                    for (int i = 0; i < tbldtl.Count; i++)
        //                    {
        //                        // Update Stock Value in Detail Table
        //                        tbltmp = tbldtl[i];
        //                        tbltmp.pretrawvalue = tbldtl[i].pretrawvalue;
        //                        tbltmp.pretrawvalueidr = tbldtl[i].pretrawvalueidr;
        //                        tbltmp.pretrawvalueusd = tbldtl[i].pretrawvalueusd;
        //                        tbltmp.pretrawvalueidr_stock = tbldtl[i].pretrawvalueidr_stock;
        //                        tbltmp.pretrawvalueusd_stock = tbldtl[i].pretrawvalueusd_stock;
        //                        db.Entry(tbltmp).State = EntityState.Modified;
        //                        db.SaveChanges();

        //                        // Insert QL_conmat
        //                        db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "PRETRM", "QL_trnpretrawdtl", tbldtl[i].pretrawmstoid, tbldtl[i].matrawoid, "RAW MATERIAL", tbldtl[i].pretrawwhoid, tbldtl[i].pretrawqty * -1, "Purchase Return Raw Material", transno, Session["UserID"].ToString(), null, tbldtl[i].pretrawvalueidr_stock, tbldtl[i].pretrawvalueusd_stock, 0, null, tbldtl[i].pretrawdtloid));
        //                        db.SaveChanges();

        //                        // Update/Insert QL_crdmtr
        //                        var flagcrd = "";
        //                        QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matrawoid, "RAW MATERIAL", tbldtl[i].pretrawwhoid, tbldtl[i].pretrawqty * -1, 0, "QL_trnpretrawdtl", Session["UserID"].ToString(), null, tbldtl[i].pretrawvalueidr_stock * tbldtl[i].pretrawqty * -1, tbldtl[i].pretrawvalueusd_stock * tbldtl[i].pretrawqty * -1, out flagcrd);
        //                        if (flagcrd == "Update")
        //                            db.Entry(crdmtr).State = EntityState.Modified;
        //                        else
        //                        {
        //                            db.QL_crdmtr.Add(crdmtr);
        //                            crdmatoid++;
        //                        }
        //                        db.SaveChanges();

        //                        // Update/Insert QL_stockvalue
        //                        var flagstval = "";
        //                        QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvalueoid, tbldtl[i].matrawoid, "RAW MATERIAL", tbldtl[i].pretrawqty * -1, tbldtl[i].pretrawvalueidr_stock, tbldtl[i].pretrawvalueusd_stock, "QL_trnpretrawdtl", null, Session["UserID"].ToString(), out flagstval);
        //                        if (flagstval == "Update")
        //                            db.Entry(stockvalue).State = EntityState.Modified;
        //                        else
        //                        {
        //                            db.QL_stockvalue.Add(stockvalue);
        //                            stockvalueoid++;
        //                        }
        //                        db.SaveChanges();
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "PRet Raw|No. " + transno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, 0, 0, 0, 0, 0, 0));
        //                    db.SaveChanges();

        //                    decimal glamt = tbldtl.Sum(x => x.pretrawqty * x.pretrawvalue);
        //                    decimal glamtidr = tbldtl.Sum(x => x.pretrawqty * x.pretrawvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.pretrawqty * x.pretrawvalueusd);
        //                    decimal glamtidr_st = tbldtl.Sum(x => x.pretrawqty * x.pretrawvalueidr_stock);
        //                    decimal glamtusd_st = tbldtl.Sum(x => x.pretrawqty * x.pretrawvalueusd_stock);
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", glamt, transno, "PRet Raw|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtidr, glamtusd, "QL_trnpretrawmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    var glamtidr_def = glamtidr - glamtidr_st;
        //                    if (glamtidr_def != 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_SELISIH_EFISIENSI, glamtidr_def > 0? "C": "D", 0, transno, "PRet Raw|No. " + transno, "Post", Session["UserID"].ToString(), servertime, Math.Abs(glamtidr_def), 0, "QL_trnpretrawmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    var glamtusd_def = glamtusd - glamtusd_st;
        //                    if (glamtusd_def != 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_SELISIH_EFISIENSI, glamtusd_def > 0 ? "C" : "D", 0, transno, "PRet Raw|No. " + transno, "Post", Session["UserID"].ToString(), servertime, 0, Math.Abs(glamtusd_def), "QL_trnpretrawmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_STOCK_RM, "C", glamt, transno, "PRet Raw|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtidr_st, glamtusd_st, "QL_trnpretrawmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    glmstoid++;

        //                    sSql = "UPDATE QL_trnporawdtl SET porawdtlstatus='', closeqty=0 WHERE cmpcode='" + cmp + "' AND porawdtloid IN (" + podtloid + ")" ;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnporawmst SET porawmststatus='Approved' WHERE cmpcode='" + cmp + "' AND porawmstoid IN (" + pomstoid + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvalueoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalPretGM(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    // Interface Validation
        //    if (!ClassFunction.IsInterfaceExists("VAR_STOCK_GM", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_STOCK_GM");
        //    if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PURC_RECEIVED", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_PURC_RECEIVED");
        //    if (error == "" && !ClassFunction.IsInterfaceExists("VAR_SELISIH_EFISIENSI", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_SELISIH_EFISIENSI");

        //    sSql = "SELECT pretd.cmpcode, pretgendtloid, pretgenmstoid, pretgendtlseq, pretd.mrgenmstoid, pretd.mrgendtloid, pretgenwhoid, pretd.matgenoid, pretgenqty, pretgenunitoid, pretgendtlstatus, pretgendtlnote, pretgendtlres1, pretgendtlres2, pretgendtlres3, pretd.upduser, pretd.updtime, mrgenvalue pretgenvalue, mrgenvalueidr pretgenvalueidr, mrgenvalueusd pretgenvalueusd, reasonoid, pretgenvalueidr_stock, pretgenvalueusd_stock FROM QL_trnpretgendtl pretd INNER JOIN QL_trnmrgendtl mrd ON mrd.cmpcode=pretd.cmpcode AND mrd.mrgenmstoid=pretd.mrgenmstoid AND mrd.mrgendtloid=pretd.mrgendtloid WHERE pretd.cmpcode='" + cmp + "' AND pretgenmstoid=" + id + " ORDER BY pretgendtlseq";
        //    List<QL_trnpretgendtl> tbldtl = db.Database.SqlQuery<QL_trnpretgendtl>(sSql).ToList();

        //    // Available Stock Validation & Stock Value Assignment
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    for (int i = 0; i < tbldtl.Count; i++)
        //    {
        //        var totalqty = tbldtl.Where(x => x.matgenoid == tbldtl[i].matgenoid && x.pretgenwhoid == tbldtl[i].pretgenwhoid).Sum(x => x.pretgenqty);
        //        if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].matgenoid, tbldtl[i].pretgenwhoid, totalqty, "GENERAL MATERIAL"))
        //        {
        //            error = "Every Return Qty must be less than Stock Qty!";
        //            break;
        //        }
        //        else
        //        {
        //            tbldtl[i].pretgenvalueidr_stock = ClassFunction.GetStockValueIDR(cmp, sPeriod, "GENERAL MATERIAL", tbldtl[i].matgenoid);
        //            tbldtl[i].pretgenvalueusd_stock = ClassFunction.GetStockValueUSD(cmp, sPeriod, "GENERAL MATERIAL", tbldtl[i].matgenoid);
        //        }
        //    }

        //    var podtloid = "";
        //    var pomstoid = "";
        //    for (int i = 0; i < tbldtl.Count; i++)
        //    {
        //        sSql = "SELECT regd.* FROM QL_trnregisterdtl regd INNER JOIN QL_trnmrgendtl mrd ON mrd.cmpcode=regd.cmpcode AND mrd.registerdtloid=regd.registerdtloid INNER JOIN QL_trnpretgendtl pretd ON pretd.cmpcode=mrd.cmpcode AND pretd.mrgendtloid=mrd.mrgendtloid WHERE pretd.cmpcode='" + cmp + "' AND pretgendtloid=" + tbldtl[i].pretgendtloid;
        //        List<QL_trnregisterdtl> tbldtlPOD = db.Database.SqlQuery<QL_trnregisterdtl>(sSql).ToList();
        //        for (int j = 0; j < tbldtlPOD.Count; j++)
        //        {
        //            podtloid += tbldtlPOD[j].porefdtloid + ",";

        //        }
        //        sSql = "SELECT regd.* FROM QL_trnregisterdtl regd INNER JOIN QL_trnmrgendtl mrd ON mrd.cmpcode=regd.cmpcode AND mrd.registerdtloid=regd.registerdtloid INNER JOIN QL_trnpretgendtl pretd ON pretd.cmpcode=mrd.cmpcode AND pretd.mrgendtloid=mrd.mrgendtloid WHERE pretd.cmpcode='" + cmp + "' AND pretgendtloid=" + tbldtl[i].pretgendtloid;
        //        List<QL_trnregisterdtl> tbldtlPOM = db.Database.SqlQuery<QL_trnregisterdtl>(sSql).ToList();
        //        for (int j = 0; j < tbldtlPOM.Count; j++)
        //        {
        //            pomstoid += tbldtlPOM[j].porefmstoid + ",";

        //        }
        //    }
        //    podtloid = ClassFunction.Left(podtloid, podtloid.Length - 1);
        //    pomstoid = ClassFunction.Left(pomstoid, pomstoid.Length - 1);

        //    if (error == "")
        //    {
        //        var conmtroid = ClassFunction.GenerateID("QL_conmat");
        //        var crdmatoid = ClassFunction.GenerateID("QL_crdmtr");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var stockvalueoid = ClassFunction.GenerateID("QL_stockvalue");
        //        var iVAR_STOCK_GM = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_GM", cmp));
        //        var iVAR_PURC_RECEIVED = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PURC_RECEIVED", cmp));
        //        var iVAR_SELISIH_EFISIENSI = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_SELISIH_EFISIENSI", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                sSql = "UPDATE QL_trnpretgenmst SET pretgenno='" + transno + "', pretgenmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND pretgenmststatus='In Approval' AND pretgenmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnpretgenmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnmrgendtl SET mrgendtlres1='' WHERE cmpcode='" + cmp + "' AND mrgendtloid IN (SELECT mrgendtloid FROM QL_trnpretgendtl WHERE cmpcode='" + cmp + "' AND pretgenmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnmrgenmst SET mrgenmstres1='' WHERE cmpcode='" + cmp + "' AND mrgenmstoid IN (SELECT mrgenmstoid FROM QL_trnpretgendtl WHERE cmpcode='" + cmp + "' AND pretgenmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    QL_trnpretgendtl tbltmp;
        //                    for (int i = 0; i < tbldtl.Count; i++)
        //                    {
        //                        // Update Stock Value in Detail Table
        //                        tbltmp = tbldtl[i];
        //                        tbltmp.pretgenvalue = tbldtl[i].pretgenvalue;
        //                        tbltmp.pretgenvalueidr = tbldtl[i].pretgenvalueidr;
        //                        tbltmp.pretgenvalueusd = tbldtl[i].pretgenvalueusd;
        //                        tbltmp.pretgenvalueidr_stock = tbldtl[i].pretgenvalueidr_stock;
        //                        tbltmp.pretgenvalueusd_stock = tbldtl[i].pretgenvalueusd_stock;
        //                        db.Entry(tbltmp).State = EntityState.Modified;
        //                        db.SaveChanges();

        //                        // Insert QL_conmat
        //                        db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "PRETGM", "QL_trnpretgendtl", tbldtl[i].pretgenmstoid, tbldtl[i].matgenoid, "GENERAL MATERIAL", tbldtl[i].pretgenwhoid, tbldtl[i].pretgenqty * -1, "Purchase Return General Material", transno, Session["UserID"].ToString(), null, tbldtl[i].pretgenvalueidr_stock, tbldtl[i].pretgenvalueusd_stock, 0, null, tbldtl[i].pretgendtloid));
        //                        db.SaveChanges();

        //                        // Update/Insert QL_crdmtr
        //                        var flagcrd = "";
        //                        QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matgenoid, "GENERAL MATERIAL", tbldtl[i].pretgenwhoid, tbldtl[i].pretgenqty * -1, 0, "QL_trnpretgendtl", Session["UserID"].ToString(), null, tbldtl[i].pretgenvalueidr_stock * tbldtl[i].pretgenqty * -1, tbldtl[i].pretgenvalueusd_stock * tbldtl[i].pretgenqty * -1, out flagcrd);
        //                        if (flagcrd == "Update")
        //                            db.Entry(crdmtr).State = EntityState.Modified;
        //                        else
        //                        {
        //                            db.QL_crdmtr.Add(crdmtr);
        //                            crdmatoid++;
        //                        }
        //                        db.SaveChanges();

        //                        // Update/Insert QL_stockvalue
        //                        var flagstval = "";
        //                        QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvalueoid, tbldtl[i].matgenoid, "GENERAL MATERIAL", tbldtl[i].pretgenqty * -1, tbldtl[i].pretgenvalueidr_stock, tbldtl[i].pretgenvalueusd_stock, "QL_trnpretgendtl", null, Session["UserID"].ToString(), out flagstval);
        //                        if (flagstval == "Update")
        //                            db.Entry(stockvalue).State = EntityState.Modified;
        //                        else
        //                        {
        //                            db.QL_stockvalue.Add(stockvalue);
        //                            stockvalueoid++;
        //                        }
        //                        db.SaveChanges();
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "PRet Gen|No. " + transno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, 0, 0, 0, 0, 0, 0));
        //                    db.SaveChanges();

        //                    decimal glamt = tbldtl.Sum(x => x.pretgenqty * x.pretgenvalue);
        //                    decimal glamtidr = tbldtl.Sum(x => x.pretgenqty * x.pretgenvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.pretgenqty * x.pretgenvalueusd);
        //                    decimal glamtidr_st = tbldtl.Sum(x => x.pretgenqty * x.pretgenvalueidr_stock);
        //                    decimal glamtusd_st = tbldtl.Sum(x => x.pretgenqty * x.pretgenvalueusd_stock);
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", glamt, transno, "PRet Gen|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtidr, glamtusd, "QL_trnpretgenmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    var glamtidr_def = glamtidr - glamtidr_st;
        //                    if (glamtidr_def != 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_SELISIH_EFISIENSI, glamtidr_def > 0 ? "C" : "D", 0, transno, "PRet Gen|No. " + transno, "Post", Session["UserID"].ToString(), servertime, Math.Abs(glamtidr_def), 0, "QL_trnpretgenmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    var glamtusd_def = glamtusd - glamtusd_st;
        //                    if (glamtusd_def != 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_SELISIH_EFISIENSI, glamtusd_def > 0 ? "C" : "D", 0, transno, "PRet Gen|No. " + transno, "Post", Session["UserID"].ToString(), servertime, 0, Math.Abs(glamtusd_def), "QL_trnpretgenmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_STOCK_GM, "C", glamt, transno, "PRet Gen|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtidr_st, glamtusd_st, "QL_trnpretgenmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    glmstoid++;

        //                    sSql = "UPDATE QL_trnpogendtl SET pogendtlstatus='', closeqty=0 WHERE cmpcode='" + cmp + "' AND pogendtloid IN (" + podtloid + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnpogenmst SET pogenmststatus='Approved' WHERE cmpcode='" + cmp + "' AND pogenmstoid IN (" + pomstoid + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvalueoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalPretSP(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    // Interface Validation
        //    if (!ClassFunction.IsInterfaceExists("VAR_STOCK_SP", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_STOCK_SP");
        //    if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PURC_RECEIVED", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_PURC_RECEIVED");
        //    if (error == "" && !ClassFunction.IsInterfaceExists("VAR_SELISIH_EFISIENSI", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_SELISIH_EFISIENSI");

        //    sSql = "SELECT pretd.cmpcode, pretspdtloid, pretspmstoid, pretspdtlseq, pretd.mrspmstoid, pretd.mrspdtloid, pretspwhoid, pretd.sparepartoid, pretspqty, pretspunitoid, pretspdtlstatus, pretspdtlnote, pretspdtlres1, pretspdtlres2, pretspdtlres3, pretd.upduser, pretd.updtime, mrspvalue pretspvalue, mrspvalueidr pretspvalueidr, mrspvalueusd pretspvalueusd, reasonoid, pretspvalueidr_stock, pretspvalueusd_stock FROM QL_trnpretspdtl pretd INNER JOIN QL_trnmrspdtl mrd ON mrd.cmpcode=pretd.cmpcode AND mrd.mrspmstoid=pretd.mrspmstoid AND mrd.mrspdtloid=pretd.mrspdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretspmstoid=" + id + " ORDER BY pretspdtlseq";
        //    List<QL_trnpretspdtl> tbldtl = db.Database.SqlQuery<QL_trnpretspdtl>(sSql).ToList();

        //    // Available Stock Validation & Stock Value Assignment
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    for (int i = 0; i < tbldtl.Count; i++)
        //    {
        //        var totalqty = tbldtl.Where(x => x.sparepartoid == tbldtl[i].sparepartoid && x.pretspwhoid == tbldtl[i].pretspwhoid).Sum(x => x.pretspqty);
        //        if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].sparepartoid, tbldtl[i].pretspwhoid, totalqty, "SPARE PART"))
        //        {
        //            error = "Every Return Qty must be less than Stock Qty!";
        //            break;
        //        }
        //        else
        //        {
        //            tbldtl[i].pretspvalueidr_stock = ClassFunction.GetStockValueIDR(cmp, sPeriod, "SPARE PART", tbldtl[i].sparepartoid);
        //            tbldtl[i].pretspvalueusd_stock = ClassFunction.GetStockValueUSD(cmp, sPeriod, "SPARE PART", tbldtl[i].sparepartoid);
        //        }
        //    }

        //    var podtloid = "";
        //    var pomstoid = "";
        //    for (int i = 0; i < tbldtl.Count; i++)
        //    {
        //        sSql = "SELECT regd.* FROM QL_trnregisterdtl regd INNER JOIN QL_trnmrspdtl mrd ON mrd.cmpcode=regd.cmpcode AND mrd.registerdtloid=regd.registerdtloid INNER JOIN QL_trnpretspdtl pretd ON pretd.cmpcode=mrd.cmpcode AND pretd.mrspdtloid=mrd.mrspdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretspdtloid=" + tbldtl[i].pretspdtloid;
        //        List<QL_trnregisterdtl> tbldtlPOD = db.Database.SqlQuery<QL_trnregisterdtl>(sSql).ToList();
        //        for (int j = 0; j < tbldtlPOD.Count; j++)
        //        {
        //            podtloid += tbldtlPOD[j].porefdtloid + ",";

        //        }
        //        sSql = "SELECT regd.* FROM QL_trnregisterdtl regd INNER JOIN QL_trnmrspdtl mrd ON mrd.cmpcode=regd.cmpcode AND mrd.registerdtloid=regd.registerdtloid INNER JOIN QL_trnpretspdtl pretd ON pretd.cmpcode=mrd.cmpcode AND pretd.mrspdtloid=mrd.mrspdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretspdtloid=" + tbldtl[i].pretspdtloid;
        //        List<QL_trnregisterdtl> tbldtlPOM = db.Database.SqlQuery<QL_trnregisterdtl>(sSql).ToList();
        //        for (int j = 0; j < tbldtlPOM.Count; j++)
        //        {
        //            pomstoid += tbldtlPOM[j].porefmstoid + ",";

        //        }
        //    }
        //    podtloid = ClassFunction.Left(podtloid, podtloid.Length - 1);
        //    pomstoid = ClassFunction.Left(pomstoid, pomstoid.Length - 1);

        //    if (error == "")
        //    {
        //        var conmtroid = ClassFunction.GenerateID("QL_conmat");
        //        var crdmatoid = ClassFunction.GenerateID("QL_crdmtr");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var stockvalueoid = ClassFunction.GenerateID("QL_stockvalue");
        //        var iVAR_STOCK_SP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_SP", cmp));
        //        var iVAR_PURC_RECEIVED = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PURC_RECEIVED", cmp));
        //        var iVAR_SELISIH_EFISIENSI = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_SELISIH_EFISIENSI", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                sSql = "UPDATE QL_trnpretspmst SET pretspno='" + transno + "', pretspmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND pretspmststatus='In Approval' AND pretspmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnpretspmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnmrspdtl SET mrspdtlres1='' WHERE cmpcode='" + cmp + "' AND mrspdtloid IN (SELECT mrspdtloid FROM QL_trnpretspdtl WHERE cmpcode='" + cmp + "' AND pretspmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnmrspmst SET mrspmstres1='' WHERE cmpcode='" + cmp + "' AND mrspmstoid IN (SELECT mrspmstoid FROM QL_trnpretspdtl WHERE cmpcode='" + cmp + "' AND pretspmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    QL_trnpretspdtl tbltmp;
        //                    for (int i = 0; i < tbldtl.Count; i++)
        //                    {
        //                        // Update Stock Value in Detail Table
        //                        tbltmp = tbldtl[i];
        //                        tbltmp.pretspvalue = tbldtl[i].pretspvalue;
        //                        tbltmp.pretspvalueidr = tbldtl[i].pretspvalueidr;
        //                        tbltmp.pretspvalueusd = tbldtl[i].pretspvalueusd;
        //                        tbltmp.pretspvalueidr_stock = tbldtl[i].pretspvalueidr_stock;
        //                        tbltmp.pretspvalueusd_stock = tbldtl[i].pretspvalueusd_stock;
        //                        db.Entry(tbltmp).State = EntityState.Modified;
        //                        db.SaveChanges();

        //                        // Insert QL_conmat
        //                        db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "PRETSP", "QL_trnpretspdtl", tbldtl[i].pretspmstoid, tbldtl[i].sparepartoid, "SPARE PART", tbldtl[i].pretspwhoid, tbldtl[i].pretspqty * -1, "Purchase Return Spare Part", transno, Session["UserID"].ToString(), null, tbldtl[i].pretspvalueidr_stock, tbldtl[i].pretspvalueusd_stock, 0, null, tbldtl[i].pretspdtloid));
        //                        db.SaveChanges();

        //                        // Update/Insert QL_crdmtr
        //                        var flagcrd = "";
        //                        QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].sparepartoid, "SPARE PART", tbldtl[i].pretspwhoid, tbldtl[i].pretspqty * -1, 0, "QL_trnpretspdtl", Session["UserID"].ToString(), null, tbldtl[i].pretspvalueidr_stock * tbldtl[i].pretspqty * -1, tbldtl[i].pretspvalueusd_stock * tbldtl[i].pretspqty * -1, out flagcrd);
        //                        if (flagcrd == "Update")
        //                            db.Entry(crdmtr).State = EntityState.Modified;
        //                        else
        //                        {
        //                            db.QL_crdmtr.Add(crdmtr);
        //                            crdmatoid++;
        //                        }
        //                        db.SaveChanges();

        //                        // Update/Insert QL_stockvalue
        //                        var flagstval = "";
        //                        QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvalueoid, tbldtl[i].sparepartoid, "SPARE PART", tbldtl[i].pretspqty * -1, tbldtl[i].pretspvalueidr_stock, tbldtl[i].pretspvalueusd_stock, "QL_trnpretspdtl", null, Session["UserID"].ToString(), out flagstval);
        //                        if (flagstval == "Update")
        //                            db.Entry(stockvalue).State = EntityState.Modified;
        //                        else
        //                        {
        //                            db.QL_stockvalue.Add(stockvalue);
        //                            stockvalueoid++;
        //                        }
        //                        db.SaveChanges();
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "PRet SP|No. " + transno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, 0, 0, 0, 0, 0, 0));
        //                    db.SaveChanges();

        //                    decimal glamt = tbldtl.Sum(x => x.pretspqty * x.pretspvalue);
        //                    decimal glamtidr = tbldtl.Sum(x => x.pretspqty * x.pretspvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.pretspqty * x.pretspvalueusd);
        //                    decimal glamtidr_st = tbldtl.Sum(x => x.pretspqty * x.pretspvalueidr_stock);
        //                    decimal glamtusd_st = tbldtl.Sum(x => x.pretspqty * x.pretspvalueusd_stock);
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", glamt, transno, "PRet SP|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtidr, glamtusd, "QL_trnpretspmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    var glamtidr_def = glamtidr - glamtidr_st;
        //                    if (glamtidr_def != 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_SELISIH_EFISIENSI, glamtidr_def > 0 ? "C" : "D", 0, transno, "PRet SP|No. " + transno, "Post", Session["UserID"].ToString(), servertime, Math.Abs(glamtidr_def), 0, "QL_trnpretspmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    var glamtusd_def = glamtusd - glamtusd_st;
        //                    if (glamtusd_def != 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_SELISIH_EFISIENSI, glamtusd_def > 0 ? "C" : "D", 0, transno, "PRet SP|No. " + transno, "Post", Session["UserID"].ToString(), servertime, 0, Math.Abs(glamtusd_def), "QL_trnpretspmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_STOCK_SP, "C", glamt, transno, "PRet SP|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtidr_st, glamtusd_st, "QL_trnpretspmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    glmstoid++;

        //                    sSql = "UPDATE QL_trnpospdtl SET pospdtlstatus='', closeqty=0 WHERE cmpcode='" + cmp + "' AND pospdtloid IN (" + podtloid + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnpospmst SET pospmststatus='Approved' WHERE cmpcode='" + cmp + "' AND pospmstoid IN (" + pomstoid + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvalueoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalPretFG(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    // Interface Validation
        //    if (!ClassFunction.IsInterfaceExists("VAR_STOCK_FG", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_STOCK_FG");
        //    if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PURC_RECEIVED", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_PURC_RECEIVED");
        //    if (error == "" && !ClassFunction.IsInterfaceExists("VAR_SELISIH_EFISIENSI", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_SELISIH_EFISIENSI");

        //    sSql = "SELECT pretd.cmpcode, pretitemdtloid, pretitemmstoid, pretitemdtlseq, pretd.mritemmstoid, pretd.mritemdtloid, pretitemwhoid, pretd.itemoid, pretitemqty, pretitemunitoid, pretitemdtlstatus, pretitemdtlnote, pretitemdtlres1, pretitemdtlres2, pretitemdtlres3, pretd.upduser, pretd.updtime, mritemvalue pretitemvalue, mritemvalueidr pretitemvalueidr, mritemvalueusd pretitemvalueusd, reasonoid, pretitemvalueidr_stock, pretitemvalueusd_stock FROM QL_trnpretitemdtl pretd INNER JOIN QL_trnmritemdtl mrd ON mrd.cmpcode=pretd.cmpcode AND mrd.mritemmstoid=pretd.mritemmstoid AND mrd.mritemdtloid=pretd.mritemdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretitemmstoid=" + id + " ORDER BY pretitemdtlseq";
        //    List<QL_trnpretitemdtl> tbldtl = db.Database.SqlQuery<QL_trnpretitemdtl>(sSql).ToList();

        //    // Available Stock Validation & Stock Value Assignment
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    for (int i = 0; i < tbldtl.Count; i++)
        //    {
        //        var totalqty = tbldtl.Where(x => x.itemoid == tbldtl[i].itemoid && x.pretitemwhoid == tbldtl[i].pretitemwhoid).Sum(x => x.pretitemqty);
        //        if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].itemoid, tbldtl[i].pretitemwhoid, totalqty, "FINISH GOOD"))
        //        {
        //            error = "Every Return Qty must be less than Stock Qty!";
        //            break;
        //        }
        //        else
        //        {
        //            tbldtl[i].pretitemvalueidr_stock = ClassFunction.GetStockValueIDR(cmp, sPeriod, "FINISH GOOD", tbldtl[i].itemoid);
        //            tbldtl[i].pretitemvalueusd_stock = ClassFunction.GetStockValueUSD(cmp, sPeriod, "FINISH GOOD", tbldtl[i].itemoid);
        //        }
        //    }

        //    var podtloid = "";
        //    var pomstoid = "";
        //    for (int i = 0; i < tbldtl.Count; i++)
        //    {
        //        sSql = "SELECT regd.* FROM QL_trnregisterdtl regd INNER JOIN QL_trnmritemdtl mrd ON mrd.cmpcode=regd.cmpcode AND mrd.registerdtloid=regd.registerdtloid INNER JOIN QL_trnpretitemdtl pretd ON pretd.cmpcode=mrd.cmpcode AND pretd.mritemdtloid=mrd.mritemdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretitemdtloid=" + tbldtl[i].pretitemdtloid;
        //        List<QL_trnregisterdtl> tbldtlPOD = db.Database.SqlQuery<QL_trnregisterdtl>(sSql).ToList();
        //        for (int j = 0; j < tbldtlPOD.Count; j++)
        //        {
        //            podtloid += tbldtlPOD[j].porefdtloid + ",";

        //        }
        //        sSql = "SELECT regd.* FROM QL_trnregisterdtl regd INNER JOIN QL_trnmritemdtl mrd ON mrd.cmpcode=regd.cmpcode AND mrd.registerdtloid=regd.registerdtloid INNER JOIN QL_trnpretitemdtl pretd ON pretd.cmpcode=mrd.cmpcode AND pretd.mritemdtloid=mrd.mritemdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretitemdtloid=" + tbldtl[i].pretitemdtloid;
        //        List<QL_trnregisterdtl> tbldtlPOM = db.Database.SqlQuery<QL_trnregisterdtl>(sSql).ToList();
        //        for (int j = 0; j < tbldtlPOM.Count; j++)
        //        {
        //            pomstoid += tbldtlPOM[j].porefmstoid + ",";

        //        }
        //    }
        //    podtloid = ClassFunction.Left(podtloid, podtloid.Length - 1);
        //    pomstoid = ClassFunction.Left(pomstoid, pomstoid.Length - 1);

        //    if (error == "")
        //    {
        //        var conmtroid = ClassFunction.GenerateID("QL_conmat");
        //        var crdmatoid = ClassFunction.GenerateID("QL_crdmtr");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var stockvalueoid = ClassFunction.GenerateID("QL_stockvalue");
        //        var iVAR_STOCK_FG = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_FG", cmp));
        //        var iVAR_PURC_RECEIVED = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PURC_RECEIVED", cmp));
        //        var iVAR_SELISIH_EFISIENSI = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_SELISIH_EFISIENSI", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                sSql = "UPDATE QL_trnpretitemmst SET pretitemno='" + transno + "', pretitemmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND pretitemmststatus='In Approval' AND pretitemmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnpretitemmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnmritemdtl SET mritemdtlres1='' WHERE cmpcode='" + cmp + "' AND mritemdtloid IN (SELECT mritemdtloid FROM QL_trnpretitemdtl WHERE cmpcode='" + cmp + "' AND pretitemmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnmritemmst SET mritemmstres1='' WHERE cmpcode='" + cmp + "' AND mritemmstoid IN (SELECT mritemmstoid FROM QL_trnpretitemdtl WHERE cmpcode='" + cmp + "' AND pretitemmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    QL_trnpretitemdtl tbltmp;
        //                    for (int i = 0; i < tbldtl.Count; i++)
        //                    {
        //                        // Update Stock Value in Detail Table
        //                        tbltmp = tbldtl[i];
        //                        tbltmp.pretitemvalue = tbldtl[i].pretitemvalue;
        //                        tbltmp.pretitemvalueidr = tbldtl[i].pretitemvalueidr;
        //                        tbltmp.pretitemvalueusd = tbldtl[i].pretitemvalueusd;
        //                        tbltmp.pretitemvalueidr_stock = tbldtl[i].pretitemvalueidr_stock;
        //                        tbltmp.pretitemvalueusd_stock = tbldtl[i].pretitemvalueusd_stock;
        //                        db.Entry(tbltmp).State = EntityState.Modified;
        //                        db.SaveChanges();

        //                        // Insert QL_conmat
        //                        db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "PRETFG", "QL_trnpretitemdtl", tbldtl[i].pretitemmstoid, tbldtl[i].itemoid, "FINISH GOOD", tbldtl[i].pretitemwhoid, tbldtl[i].pretitemqty * -1, "Purchase Return Finish Good", transno, Session["UserID"].ToString(), null, tbldtl[i].pretitemvalueidr_stock, tbldtl[i].pretitemvalueusd_stock, 0, null, tbldtl[i].pretitemdtloid));
        //                        db.SaveChanges();

        //                        // Update/Insert QL_crdmtr
        //                        var flagcrd = "";
        //                        QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].itemoid, "FINISH GOOD", tbldtl[i].pretitemwhoid, tbldtl[i].pretitemqty * -1, 0, "QL_trnpretitemdtl", Session["UserID"].ToString(), null, tbldtl[i].pretitemvalueidr_stock * tbldtl[i].pretitemqty * -1, tbldtl[i].pretitemvalueusd_stock * tbldtl[i].pretitemqty * -1, out flagcrd);
        //                        if (flagcrd == "Update")
        //                            db.Entry(crdmtr).State = EntityState.Modified;
        //                        else
        //                        {
        //                            db.QL_crdmtr.Add(crdmtr);
        //                            crdmatoid++;
        //                        }
        //                        db.SaveChanges();

        //                        // Update/Insert QL_stockvalue
        //                        var flagstval = "";
        //                        QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvalueoid, tbldtl[i].itemoid, "FINISH GOOD", tbldtl[i].pretitemqty * -1, tbldtl[i].pretitemvalueidr_stock, tbldtl[i].pretitemvalueusd_stock, "QL_trnpretitemdtl", null, Session["UserID"].ToString(), out flagstval);
        //                        if (flagstval == "Update")
        //                            db.Entry(stockvalue).State = EntityState.Modified;
        //                        else
        //                        {
        //                            db.QL_stockvalue.Add(stockvalue);
        //                            stockvalueoid++;
        //                        }
        //                        db.SaveChanges();
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "PRet Raw|No. " + transno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, 0, 0, 0, 0, 0, 0));
        //                    db.SaveChanges();

        //                    decimal glamt = tbldtl.Sum(x => x.pretitemqty * x.pretitemvalue);
        //                    decimal glamtidr = tbldtl.Sum(x => x.pretitemqty * x.pretitemvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.pretitemqty * x.pretitemvalueusd);
        //                    decimal glamtidr_st = tbldtl.Sum(x => x.pretitemqty * x.pretitemvalueidr_stock);
        //                    decimal glamtusd_st = tbldtl.Sum(x => x.pretitemqty * x.pretitemvalueusd_stock);
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", glamt, transno, "PRet FG|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtidr, glamtusd, "QL_trnpretitemmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    var glamtidr_def = glamtidr - glamtidr_st;
        //                    if (glamtidr_def != 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_SELISIH_EFISIENSI, glamtidr_def > 0 ? "C" : "D", 0, transno, "PRet FG|No. " + transno, "Post", Session["UserID"].ToString(), servertime, Math.Abs(glamtidr_def), 0, "QL_trnpretitemmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    var glamtusd_def = glamtusd - glamtusd_st;
        //                    if (glamtusd_def != 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_SELISIH_EFISIENSI, glamtusd_def > 0 ? "C" : "D", 0, transno, "PRet FG|No. " + transno, "Post", Session["UserID"].ToString(), servertime, 0, Math.Abs(glamtusd_def), "QL_trnpretitemmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_STOCK_FG, "C", glamt, transno, "PRet FG|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtidr_st, glamtusd_st, "QL_trnpretitemmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    glmstoid++;

        //                    sSql = "UPDATE QL_trnpoitemdtl SET poitemdtlstatus='', closeqty=0 WHERE cmpcode='" + cmp + "' AND poitemdtloid IN (" + podtloid + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnpoitemmst SET poitemmststatus='Approved' WHERE cmpcode='" + cmp + "' AND poitemmstoid IN (" + pomstoid + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvalueoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalPretFA(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    // Interface Validation
        //    if (!ClassFunction.IsInterfaceExists("VAR_STOCK_GM", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_STOCK_GM");
        //    if (!ClassFunction.IsInterfaceExists("VAR_STOCK_SP", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_STOCK_SP");
        //    if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PURC_RECEIVED", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_PURC_RECEIVED");
        //    if (error == "" && !ClassFunction.IsInterfaceExists("VAR_SELISIH_EFISIENSI", cmp))
        //        error = ClassFunction.GetInterfaceWarning("VAR_SELISIH_EFISIENSI");

        //    sSql = "SELECT pretd.cmpcode, pretassetdtloid, pretassetmstoid, pretassetdtlseq, pretd.mrassetmstoid, pretd.mrassetdtloid, pretassetwhoid, pretd.pretassetreftype, pretd.pretassetrefoid, pretassetqty, pretassetunitoid, pretassetdtlstatus, pretassetdtlnote, pretassetdtlres1, pretassetdtlres2, pretassetdtlres3, pretd.upduser, pretd.updtime, mrassetvalue pretassetvalue, mrassetvalueidr pretassetvalueidr, mrassetvalueusd pretassetvalueusd, reasonoid, pretassetvalueidr_stock, pretassetvalueusd_stock FROM QL_trnpretassetdtl pretd INNER JOIN QL_trnmrassetdtl mrd ON mrd.cmpcode=pretd.cmpcode AND mrd.mrassetmstoid=pretd.mrassetmstoid AND mrd.mrassetdtloid=pretd.mrassetdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretassetmstoid=" + id + " ORDER BY pretassetdtlseq";
        //    List<QL_trnpretassetdtl> tbldtl = db.Database.SqlQuery<QL_trnpretassetdtl>(sSql).ToList();

        //    // Available Stock Validation & Stock Value Assignment
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var sRefName = "";
        //    for (int i = 0; i < tbldtl.Count; i++)
        //    {
        //        if (tbldtl[i].pretassetreftype.ToUpper() == "GENERAL")
        //            sRefName = "GENERAL MATERIAL";
        //        else
        //            sRefName = "SPARE PART";

        //        var totalqty = tbldtl.Where(x => x.pretassetreftype == tbldtl[i].pretassetreftype &&  x.pretassetrefoid == tbldtl[i].pretassetrefoid && x.pretassetwhoid == tbldtl[i].pretassetwhoid).Sum(x => x.pretassetqty);
        //        if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].pretassetrefoid, tbldtl[i].pretassetwhoid, totalqty, sRefName))
        //        {
        //            error = "Every Return Qty must be less than Stock Qty!";
        //            break;
        //        }
        //        else
        //        {
        //            tbldtl[i].pretassetvalueidr_stock = ClassFunction.GetStockValueIDR(cmp, sPeriod, sRefName, tbldtl[i].pretassetrefoid);
        //            tbldtl[i].pretassetvalueusd_stock = ClassFunction.GetStockValueUSD(cmp, sPeriod, sRefName, tbldtl[i].pretassetrefoid);
        //        }
        //    }

        //    var podtloid = "";
        //    var pomstoid = "";
        //    for (int i = 0; i < tbldtl.Count; i++)
        //    {
        //        sSql = "SELECT regd.* FROM QL_trnregisterdtl regd INNER JOIN QL_trnmrassetdtl mrd ON mrd.cmpcode=regd.cmpcode AND mrd.registerdtloid=regd.registerdtloid INNER JOIN QL_trnpretassetdtl pretd ON pretd.cmpcode=mrd.cmpcode AND pretd.mrassetdtloid=mrd.mrassetdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretassetdtloid=" + tbldtl[i].pretassetdtloid;
        //        List<QL_trnregisterdtl> tbldtlPOD = db.Database.SqlQuery<QL_trnregisterdtl>(sSql).ToList();
        //        for (int j = 0; j < tbldtlPOD.Count; j++)
        //        {
        //            podtloid += tbldtlPOD[j].porefdtloid + ",";

        //        }
        //        sSql = "SELECT regd.* FROM QL_trnregisterdtl regd INNER JOIN QL_trnmrassetdtl mrd ON mrd.cmpcode=regd.cmpcode AND mrd.registerdtloid=regd.registerdtloid INNER JOIN QL_trnpretassetdtl pretd ON pretd.cmpcode=mrd.cmpcode AND pretd.mrassetdtloid=mrd.mrassetdtloid WHERE pretd.cmpcode='" + cmp + "' AND pretassetdtloid=" + tbldtl[i].pretassetdtloid;
        //        List<QL_trnregisterdtl> tbldtlPOM = db.Database.SqlQuery<QL_trnregisterdtl>(sSql).ToList();
        //        for (int j = 0; j < tbldtlPOM.Count; j++)
        //        {
        //            pomstoid += tbldtlPOM[j].porefmstoid + ",";

        //        }
        //    }
        //    podtloid = ClassFunction.Left(podtloid, podtloid.Length - 1);
        //    pomstoid = ClassFunction.Left(pomstoid, pomstoid.Length - 1);

        //    if (error == "")
        //    {
        //        var conmtroid = ClassFunction.GenerateID("QL_conmat");
        //        var crdmatoid = ClassFunction.GenerateID("QL_crdmtr");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var stockvalueoid = ClassFunction.GenerateID("QL_stockvalue");
        //        var iVAR_STOCK_GM = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_GM", cmp));
        //        var iVAR_STOCK_SP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_SP", cmp));
        //        var iVAR_PURC_RECEIVED = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PURC_RECEIVED", cmp));
        //        var iVAR_SELISIH_EFISIENSI = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_SELISIH_EFISIENSI", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                sSql = "UPDATE QL_trnpretassetmst SET pretassetno='" + transno + "', pretassetmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND pretassetmststatus='In Approval' AND pretassetmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnpretassetmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnmrassetdtl SET mrassetdtlres1='' WHERE cmpcode='" + cmp + "' AND mrassetdtloid IN (SELECT mrassetdtloid FROM QL_trnpretassetdtl WHERE cmpcode='" + cmp + "' AND pretassetmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnmrassetmst SET mrassetmstres1='' WHERE cmpcode='" + cmp + "' AND mrassetmstoid IN (SELECT mrassetmstoid FROM QL_trnpretassetdtl WHERE cmpcode='" + cmp + "' AND pretassetmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    QL_trnpretassetdtl tbltmp;
        //                    for (int i = 0; i < tbldtl.Count; i++)
        //                    {
        //                        if (tbldtl[i].pretassetreftype.ToUpper() == "GENERAL")
        //                            sRefName = "GENERAL MATERIAL";
        //                        else
        //                            sRefName = "SPARE PART";

        //                        // Update Stock Value in Detail Table
        //                        tbltmp = tbldtl[i];
        //                        tbltmp.pretassetvalue = tbldtl[i].pretassetvalue;
        //                        tbltmp.pretassetvalueidr = tbldtl[i].pretassetvalueidr;
        //                        tbltmp.pretassetvalueusd = tbldtl[i].pretassetvalueusd;
        //                        tbltmp.pretassetvalueidr_stock = tbldtl[i].pretassetvalueidr_stock;
        //                        tbltmp.pretassetvalueusd_stock = tbldtl[i].pretassetvalueusd_stock;
        //                        db.Entry(tbltmp).State = EntityState.Modified;
        //                        db.SaveChanges();

        //                        // Insert QL_conmat
        //                        db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "PRETFA", "QL_trnpretassetdtl", tbldtl[i].pretassetmstoid, tbldtl[i].pretassetrefoid, sRefName, tbldtl[i].pretassetwhoid, tbldtl[i].pretassetqty * -1, "Purchase Return Fixed Assets", transno, Session["UserID"].ToString(), null, tbldtl[i].pretassetvalueidr_stock, tbldtl[i].pretassetvalueusd_stock, 0, null, tbldtl[i].pretassetdtloid));
        //                        db.SaveChanges();

        //                        // Update/Insert QL_crdmtr
        //                        var flagcrd = "";
        //                        QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].pretassetrefoid, sRefName, tbldtl[i].pretassetwhoid, tbldtl[i].pretassetqty * -1, 0, "QL_trnpretassetdtl", Session["UserID"].ToString(), null, tbldtl[i].pretassetvalueidr_stock * tbldtl[i].pretassetqty * -1, tbldtl[i].pretassetvalueusd_stock * tbldtl[i].pretassetqty * -1, out flagcrd);
        //                        if (flagcrd == "Update")
        //                            db.Entry(crdmtr).State = EntityState.Modified;
        //                        else
        //                        {
        //                            db.QL_crdmtr.Add(crdmtr);
        //                            crdmatoid++;
        //                        }
        //                        db.SaveChanges();

        //                        // Update/Insert QL_stockvalue
        //                        var flagstval = "";
        //                        QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvalueoid, tbldtl[i].pretassetrefoid, sRefName, tbldtl[i].pretassetqty * -1, tbldtl[i].pretassetvalueidr_stock, tbldtl[i].pretassetvalueusd_stock, "QL_trnpretassetdtl", null, Session["UserID"].ToString(), out flagstval);
        //                        if (flagstval == "Update")
        //                            db.Entry(stockvalue).State = EntityState.Modified;
        //                        else
        //                        {
        //                            db.QL_stockvalue.Add(stockvalue);
        //                            stockvalueoid++;
        //                        }
        //                        db.SaveChanges();
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "PRet Asset|No. " + transno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, 0, 0, 0, 0, 0, 0));
        //                    db.SaveChanges();
                            
        //                    decimal glamtGen = tbldtl.Where(x => x.pretassetreftype.ToUpper() == "GENERAL").Sum(x => x.pretassetqty * x.pretassetvalue);
        //                    decimal glamtSP = tbldtl.Where(x => x.pretassetreftype.ToUpper() == "SPARE PART").Sum(x => x.pretassetqty * x.pretassetvalue);
        //                    decimal glamtGenidr = tbldtl.Where(x => x.pretassetreftype.ToUpper() == "GENERAL").Sum(x => x.pretassetqty * x.pretassetvalueidr);
        //                    decimal glamtSPidr = tbldtl.Where(x => x.pretassetreftype.ToUpper() == "SPARE PART").Sum(x => x.pretassetqty * x.pretassetvalueidr);
        //                    decimal glamtGenusd = tbldtl.Where(x => x.pretassetreftype.ToUpper() == "GENERAL").Sum(x => x.pretassetqty * x.pretassetvalueusd);
        //                    decimal glamtSPusd = tbldtl.Where(x => x.pretassetreftype.ToUpper() == "SPARE PART").Sum(x => x.pretassetqty * x.pretassetvalueusd);
        //                    decimal glamtGenidr_st = tbldtl.Where(x => x.pretassetreftype.ToUpper() == "GENERAL").Sum(x => x.pretassetqty * x.pretassetvalueidr_stock);
        //                    decimal glamtSPidr_st = tbldtl.Where(x => x.pretassetreftype.ToUpper() == "SPARE PART").Sum(x => x.pretassetqty * x.pretassetvalueidr_stock);
        //                    decimal glamtGenusd_st = tbldtl.Where(x => x.pretassetreftype.ToUpper() == "GENERAL").Sum(x => x.pretassetqty * x.pretassetvalueusd_stock);
        //                    decimal glamtSPusd_st = tbldtl.Where(x => x.pretassetreftype.ToUpper() == "SPARE PART").Sum(x => x.pretassetqty * x.pretassetvalueusd_stock);

        //                    decimal glamt = glamtGen + glamtSP;
        //                    decimal glamtidr = glamtGenidr + glamtSPidr;
        //                    decimal glamtusd = glamtGenusd + glamtSPusd;

        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", glamt, transno, "PRet Asset|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtidr, glamtusd, "QL_trnpretassetmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
                           
        //                    var glamtidr_def = (glamtGenidr - glamtGenidr_st) + (glamtSPidr - glamtSPidr_st);
        //                    if (glamtidr_def != 0)
        //                    { 
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_SELISIH_EFISIENSI, glamtidr_def > 0 ? "C" : "D", 0, transno, "PRet Asset|No. " + transno, "Post", Session["UserID"].ToString(), servertime, Math.Abs(glamtidr_def), 0, "QL_trnpretassetmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    }

        //                    var glamtusd_def = (glamtGenusd - glamtGenusd_st) + (glamtSPusd - glamtSPusd_st);
        //                    if (glamtusd_def != 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_SELISIH_EFISIENSI, glamtusd_def > 0 ? "C" : "D", 0, transno, "PRet Asset|No. " + transno, "Post", Session["UserID"].ToString(), servertime, 0, Math.Abs(glamtusd_def), "QL_trnpretassetmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (glamtGen != 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_STOCK_GM, "C", glamtGen, transno, "PRet Asset|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtGenidr_st, glamtGenusd_st, "QL_trnpretassetmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if(glamtSP != 0)
        //                    { 
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_STOCK_SP, "C", glamtSP, transno, "PRet Asset|No. " + transno, "Post", Session["UserID"].ToString(), servertime, glamtSPidr_st, glamtSPusd_st, "QL_trnpretassetmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }

        //                    sSql = "UPDATE QL_trnpoassetdtl SET poassetdtlstatus='', closeqty=0 WHERE cmpcode='" + cmp + "' AND poassetdtloid IN (" + podtloid + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnpoassetmst SET poassetmststatus='Approved' WHERE cmpcode='" + cmp + "' AND poassetmstoid IN (" + pomstoid + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvalueoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}


        //private void ApprovalPretService(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    var servertime = ClassFunction.GetServerTime();
        //    var tbl = db.QL_trnpretservicemst.Where(x => x.cmpcode == cmp && x.pretservicemstoid == id && x.pretservicemststatus == "In Approval").First();
        //    if (tbl == null)
        //    {
        //        error = "Please select data for approval!";
        //        return;
        //    }

        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            tbl.pretservicemststatus = action;
        //            tbl.upduser = Session["UserID"].ToString();
        //            tbl.updtime = servertime;
        //            tbl.approvaluser = Session["UserID"].ToString();
        //            tbl.approvaldatetime = servertime;
        //            if (action == "Approved")
        //            {
        //                tbl.pretserviceno = transno;
        //            }
        //            db.Entry(tbl).State = EntityState.Modified;

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnpretservicemst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);

        //            if (action == "Rejected")
        //            {
        //                sSql = "UPDATE QL_trnmrservicedtl SET mrservicedtlres1='' WHERE cmpcode='" + cmp + "' AND mrservicedtloid IN (SELECT mrservicedtloid FROM QL_trnpretservicedtl WHERE cmpcode='" + cmp + "' AND pretservicemstoid=" + id + ") AND mrservicemstoid IN (SELECT mrservicemstoid FROM QL_trnpretservicedtl WHERE cmpcode='" + cmp + "' AND pretservicemstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                sSql = "UPDATE QL_trnmrservicemst SET mrservicemstres1='' WHERE cmpcode='" + cmp + "' AND mrservicemstoid IN (SELECT mrservicemstoid FROM QL_trnpretservicedtl WHERE cmpcode='" + cmp + "' AND pretservicemstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //            }
        //            else if (action == "Approved")
        //            {
        //                sSql = "UPDATE QL_trnposervicedtl SET poservicedtlstatus='' WHERE cmpcode='" + cmp + "' AND poservicedtloid IN (SELECT poservicedtloid FROM QL_trnpretservicedtl pretd INNER JOIN QL_trnmrservicedtl mrd ON mrd.cmpcode=pretd.cmpcode AND mrd.mrservicedtloid=pretd.mrservicedtloid AND mrd.mrservicemstoid=pretd.mrservicemstoid WHERE pretd.cmpcode='" + cmp + "' AND pretservicemstoid=" + id + ") AND poservicemstoid=" + tbl.poservicemstoid + "";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                sSql = "UPDATE QL_trnposervicemst SET poservicemststatus='Approved' WHERE cmpcode='" + cmp + "' AND poservicemstoid=" + tbl.poservicemstoid + "";
        //                db.Database.ExecuteSqlCommand(sSql);
        //            }

        //            db.SaveChanges();
        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}
        //#endregion

        //#region Approval A/P

        //public class trnimportdtl
        //{
        //    public int importmstoid { get; set; }
        //    public int importacctgoid { get; set; }
        //    public decimal importvalue { get; set; }
        //    public int curroid { get; set; }
        //    public int suppoid { get; set; }
        //    public string suppic { get; set; }
        //    public string importno { get; set; }
        //    public DateTime registerdate { get; set; }
        //    public Decimal importvalueidr { get; set; }
        //    public Decimal importvalueusd { get; set; }
        //    public Decimal importvaluepost { get; set; }
        //    public int rateoid { get; set; }
        //    public Decimal ratetoidr { get; set; }
        //    public Decimal ratetousd { get; set; }
        //    public int rate2oid { get; set; }
        //    public Decimal rate2toidr { get; set; }
        //    public Decimal rate2tousd { get; set; }
        //    public int importdtloid { get; set; }
        //    public string apimportno { get; set; }
        //    public int apimportmstoid { get; set; }
        //}

        //public class trnmrdtl
        //{
        //    public decimal apqty { get; set; }
        //    public decimal mrvalue { get; set; }
        //    public decimal mrvalueidr { get; set; }
        //    public decimal mrvalueusd { get; set; }
        //}

        //private void ApprovalAPRM(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnaprawmst*/QL_trnbelimst tblmst;
        //    tblmst = db./*QL_trnaprawmst*/QL_trnbelimst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var cRateTmp = new ClassRate();
        //    DateTime duedate = db.Database.SqlQuery<DateTime>("Select DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),aprawdate) AS [Due Date] FROM /*QL_trnaprawmst*/QL_trnbelimst ap INNER JOIN QL_mstgen g ON g.genoid=ap.aprawpaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND aprawmstoid=" + id).FirstOrDefault();
        //    var potype = db.Database.SqlQuery<string>("SELECT TOP 1 registerflag FROM QL_trnregistermst regmx INNER JOIN QL_trnaprawdtl apdx ON apdx.cmpcode = regmx.cmpcode AND apdx.registermstoid = regmx.registermstoid WHERE apdx.cmpcode='" + cmp + "' AND apdx.aprawmstoid=" + id).FirstOrDefault();
        //    var suppname = db.Database.SqlQuery<string>("SELECT suppname FROM QL_mstsupp s WHERE s.cmpcode='" + cmp + "' AND s.suppoid=" + tblmst.suppoid).FirstOrDefault();
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var sNoImport = "";
        //    List<trnimportdtl> tblImport = null;

        //    List<trnmrdtl> tblMR = null;

        //    sSql = "SELECT apd.aprawqty apqty, mrd.mrrawvalue mrvalue, mrd.mrrawvalueidr mrvalueidr, mrd.mrrawvalueusd mrvalueusd FROM QL_trnaprawdtl apd INNER JOIN QL_trnmrrawdtl mrd ON mrd.cmpcode=apd.cmpcode AND mrd.mrrawdtloid=apd.mrrawdtloid AND mrd.mrrawmstoid=apd.mrrawmstoid WHERE apd.cmpcode='" + cmp + "' AND aprawmstoid=" + id;

        //    tblMR = db.Database.SqlQuery<trnmrdtl>(sSql).ToList();


        //    if (action == "Approved")
        //    {
        //            cRate.SetRateValue(tblmst.curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //            if (cRate.GetRateDailyLastError != "")
        //                error = cRate.GetRateDailyLastError;
        //            if (cRate.GetRateMonthlyLastError != "")
        //                error = cRate.GetRateMonthlyLastError;

        //            // Interface Validation
        //            if (!ClassFunction.IsInterfaceExists("VAR_PURC_RECEIVED", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_PURC_RECEIVED");
        //            if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_IN", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_PPN_IN");
        //            if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_IDR", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_IDR");
        //            if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_USD", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_USD");
        //            if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //            if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //            if (potype.ToUpper() == "LOCAL")
        //            {
        //                if (!ClassFunction.IsInterfaceExists("VAR_AP_LOCAL", cmp))
        //                    error = ClassFunction.GetInterfaceWarning("VAR_AP_LOCAL");
        //            }
        //            else
        //            {
        //                if (!ClassFunction.IsInterfaceExists("VAR_AP_IMPORT", cmp))
        //                    error = ClassFunction.GetInterfaceWarning("VAR_AP_IMPORT");
        //            }
        //            if (error == "" && !ClassFunction.IsInterfaceExists("VAR_APIC_ASSIGNMENT", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_APIC_ASSIGNMENT");

        //            if (potype.ToUpper() == "IMPORT")
        //            {

        //                    sSql = "SELECT imd.importmstoid, importacctgoid, importvalue, imd.curroid, imd.suppoid, s.suppname AS suppic, importno, CONVERT(VARCHAR(10), registerdate, 101) AS registerdate, 0.0 AS importvalueidr, 0.0 AS importvalueusd, 0.0 AS importvaluepost, 0 AS rateoid, '' AS ratetoidr, '' AS ratetousd, 0 AS rate2oid, '' AS rate2toidr, '' AS rate2tousd, imd.importdtloid, '' apimportno, 0 apimportmstoid FROM QL_trnimportdtl imd INNER JOIN QL_trnimportmst imm ON imm.cmpcode=imd.cmpcode AND imm.importmstoid=imd.importmstoid INNER JOIN QL_trnregistermst regm ON regm.cmpcode=imm.cmpcode AND regm.registermstoid=imm.registermstoid INNER JOIN QL_mstsupp s ON s.suppoid=imd.suppoid WHERE imd.cmpcode='" + cmp + "' AND imm.registermstoid IN (SELECT registermstoid FROM QL_trnaprawdtl WHERE cmpcode='" + cmp + "' AND aprawmstoid=" + id + ")";

        //                    tblImport = db.Database.SqlQuery<trnimportdtl>(sSql).ToList();

        //                    for (int i = 0; i < tblImport.Count(); i++)
        //                    {
        //                        cRateTmp.SetRateValue(tblImport[i].curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //                        if (cRateTmp.GetRateDailyLastError != "")
        //                            error = cRateTmp.GetRateDailyLastError;
        //                        if (cRateTmp.GetRateMonthlyLastError != "")
        //                            error = cRateTmp.GetRateMonthlyLastError;
                    
        //                    }
                        
        //            }
        //    }
           
        //    if (error == "")
        //    {
        //        var conapoid = ClassFunction.GenerateID("QL_CONAP");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var stockvalueoid = ClassFunction.GenerateID("QL_stockvalue");
        //        var apimportmstoid = ClassFunction.GenerateID("QL_trnapimportmst");
        //        var iVAR_PURC_RECEIVED = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PURC_RECEIVED", cmp));
        //        var iVAR_PPN_IN = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_IN", cmp));
        //        var iVAR_DIFF_CURR_IDR = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_IDR", cmp));
        //        var iVAR_DIFF_CURR_USD = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_USD", cmp));
        //        var iVAR_ROUNDING = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        var iVAR_AP = 0;
        //        if (potype.ToUpper() == "LOCAL")
        //            iVAR_AP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_LOCAL", cmp));
        //        else
        //            iVAR_AP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_IMPORT", cmp));

        //        var iVAR_APIC_ASSIGNMENT = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_APIC_ASSIGNMENT", cmp));
        //        decimal dTotalImport_IDR = 0;
        //        decimal dTotalImport_USD = 0;
        //        decimal dMRAmt = 0;
        //        decimal dMRAmtIDR = 0;
        //        decimal dMRAmtUSD = 0;
        //        decimal dTotalImportIDR = 0;
        //        decimal dTotalImportUSD = 0;
        //        decimal dTotalImport = 0;
        //        decimal dRound = 0;
        //        decimal dDiffIDR = 0;
        //        decimal dDiffUSD = 0;

        //        if (action == "Approved")
        //        {

        //            dMRAmt = tblMR.Sum(x => (x.apqty * x.mrvalue));
        //            dMRAmtIDR = tblMR.Sum(x => (x.apqty * x.mrvalueidr));
        //            dMRAmtUSD = tblMR.Sum(x => (x.apqty * x.mrvalueusd));

        //            if (potype.ToUpper() == "IMPORT")
        //            {
        //                sNoImport = "APIC-" + ClassFunction.GetServerTime().ToString("yyyy.MM") + "-";
        //                sSql = "SELECT ISNULL(MAX(CAST(RIGHT(apimportno, 6) AS INTEGER)) + 1, 1) AS IDNEW FROM QL_trnapimportmst WHERE cmpcode='" + cmp + "' AND apimportno LIKE '" + sNoImport + "%'";
        //                int sCount = db.Database.SqlQuery<int>(sSql).FirstOrDefault();
        //                string sCounter = "";

        //                for (int i = 0; i < tblImport.Count(); i++)
        //                {
        //                    sCounter = ClassFunction.GenNumberString(sCount + i, int.Parse(NumberCounter));
        //                    sNoImport = sNoImport + sCounter;

        //                    tblImport[i].apimportmstoid = apimportmstoid;
        //                    tblImport[i].apimportno = sNoImport;
        //                    tblImport[i].importvalueidr = tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue;
        //                    tblImport[i].importvalueusd = tblImport[i].importvalue * cRateTmp.GetRateMonthlyUSDValue;
        //                    dTotalImport_IDR += tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue;
        //                    dTotalImport_USD += tblImport[i].importvalue * cRateTmp.GetRateMonthlyUSDValue;
        //                    tblImport[i].importvaluepost = ((tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue) / cRate.GetRateMonthlyIDRValue);
        //                    tblImport[i].rateoid = cRateTmp.GetRateDailyOid;
        //                    tblImport[i].ratetoidr = cRateTmp.GetRateDailyIDRValue;
        //                    tblImport[i].ratetousd = cRateTmp.GetRateDailyUSDValue;
        //                    tblImport[i].rate2oid = cRateTmp.GetRateMonthlyOid;
        //                    tblImport[i].rate2toidr = cRateTmp.GetRateMonthlyIDRValue;
        //                    tblImport[i].rate2tousd = cRateTmp.GetRateMonthlyUSDValue;
                           
        //                    apimportmstoid++;
        //                }

        //                dTotalImportIDR = tblImport.Sum(x => x.importvaluepost);
        //                dTotalImportUSD = tblImport.Sum(x => x.importvalueidr);
        //                dTotalImport = tblImport.Sum(x => x.importvalueusd);

        //            }  
        //        }
        //            using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                sSql = "UPDATE /*QL_trnaprawmst*/QL_trnbelimst SET aprawmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "', upduser='" + Session["UserID"].ToString() + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid = " + cRate.GetRateDailyOid + ", aprawratetoidr = '" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', aprawratetousd = '" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid = " + cRate.GetRateMonthlyOid + ", aprawrate2toidr = '" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', aprawrate2tousd = '" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "', aprawtotalamtidr = aprawtotalamt * " + cRate.GetRateMonthlyIDRValue + ", aprawtotalamtusd = aprawtotalamt * " + cRate.GetRateMonthlyUSDValue + ", aprawtotaldiscidr = aprawtotaldisc * " + cRate.GetRateMonthlyIDRValue + ", aprawtotaldiscusd = aprawtotaldisc * " + cRate.GetRateMonthlyUSDValue + ", aprawtotaltaxidr = aprawtotaltax * " + cRate.GetRateMonthlyIDRValue + ", aprawtotaltaxusd = aprawtotaltax * " + cRate.GetRateMonthlyUSDValue + ", aprawgrandtotalidr = aprawgrandtotal * " + cRate.GetRateMonthlyIDRValue + ", aprawgrandtotalusd = aprawgrandtotal * " + cRate.GetRateMonthlyUSDValue + ", aprawtotalimportidr = " + dTotalImport_IDR + ", aprawtotalimportusd = " + dTotalImport_USD;
        //                }
        //                sSql += " WHERE cmpcode='" + cmp + "' AND aprawmststatus='In Approval' AND aprawmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();


        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnaprawmst*/QL_trnbelimst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnmrrawdtl SET mrrawdtlres1='' WHERE cmpcode='" + cmp + "' AND mrrawdtloid IN (SELECT mrrawdtloid FROM QL_trnaprawdtl WHERE cmpcode='" + cmp + "' AND aprawmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnmrrawmst SET mrrawmstres1='' WHERE cmpcode='" + cmp + "' AND mrrawmstoid IN (SELECT mrrawmstoid FROM QL_trnaprawdtl WHERE cmpcode='" + cmp + "' AND aprawmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    // Insert QL_conap                        
        //                    db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "/*QL_trnaprawmst*/QL_trnbelimst", id, 0, tblmst.suppoid, iVAR_AP, "Post", "APRM", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblmst.aprawgrandtotal, 0, "","","","", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(),servertime, tblmst.aprawgrandtotal * cRate.GetRateMonthlyIDRValue,0, tblmst.aprawgrandtotal * cRate.GetRateMonthlyIDRValue, 0, 0, ""));
        //                    db.SaveChanges();
                            

        //                    if (potype.ToUpper() == "IMPORT")
        //                    {
        //                        // Insert Import
        //                        dTotalImportIDR = tblImport.Sum(x => x.importvaluepost);
        //                        dTotalImportUSD = tblImport.Sum(x => x.importvalueidr);
        //                        dTotalImport = tblImport.Sum(x => x.importvalueusd);

        //                        QL_trnapimportmst tbltmpImp;

        //                        for (int i = 0; i < tblImport.Count; i++)
        //                        {
        //                            tbltmpImp = new QL_trnapimportmst();
        //                            tbltmpImp.cmpcode = cmp;
        //                            tbltmpImp.apimportmstoid = apimportmstoid++;
        //                            tbltmpImp.periodacctg = sPeriod;
        //                            tbltmpImp.apimportdate = servertime;
        //                            tbltmpImp.apimportno = tbltmpImp.apimportno;
        //                            tbltmpImp.suppoid = tblImport[i].suppoid;
        //                            tbltmpImp.apimportpaytypeoid = tblmst.aprawpaytypeoid;
        //                            tbltmpImp.curroid = tblImport[i].curroid;
        //                            tbltmpImp.rateoid = tblImport[i].rateoid;
        //                            tbltmpImp.apimportratetoidr = tblImport[i].ratetoidr.ToString();
        //                            tbltmpImp.apimportratetousd = tblImport[i].ratetousd.ToString();
        //                            tbltmpImp.rate2oid = tblImport[i].rate2oid;
        //                            tbltmpImp.apimportrate2toidr = tblImport[i].rate2toidr.ToString();
        //                            tbltmpImp.apimportrate2tousd = tblImport[i].rate2tousd.ToString();
        //                            tbltmpImp.apimporttotalamt = tblImport[i].importvalue;
        //                            tbltmpImp.apimporttotalamtidr = tblImport[i].importvalueidr;
        //                            tbltmpImp.apimporttotalamtusd = tblImport[i].importvalueusd;
        //                            tbltmpImp.apimporttotaldisc =0;
        //                            tbltmpImp.apimporttotaldiscidr = 0;
        //                            tbltmpImp.apimporttotaldiscusd = 0;
        //                            tbltmpImp.apimporttotaltax = 0;
        //                            tbltmpImp.apimporttotaltaxidr = 0;
        //                            tbltmpImp.apimporttotaltaxusd = 0;
        //                            tbltmpImp.apimportgrandtotal = tblImport[i].importvalue;
        //                            tbltmpImp.apimportgrandtotalidr = tblImport[i].importvalueidr;
        //                            tbltmpImp.apimportgrandtotalusd = tblImport[i].importvalueusd;
        //                            tbltmpImp.apimportmstnote = "";
        //                            tbltmpImp.apimportmststatus = "Approved";
        //                            tbltmpImp.approvaluser = Session["UserID"].ToString();
        //                            tbltmpImp.approvaldatetime = servertime;
        //                            tbltmpImp.createuser = Session["UserID"].ToString();
        //                            tbltmpImp.createtime = servertime;
        //                            tbltmpImp.upduser = Session["UserID"].ToString();
        //                            tbltmpImp.updtime = servertime;
        //                            tbltmpImp.apimportsupptotal = 0;
        //                            tbltmpImp.apimportdatetakegiro = tblmst.aprawdatetakegiro;
        //                            tbltmpImp.importdtloid = tblImport[i].importdtloid;
        //                            tbltmpImp.apreftype = "/*QL_trnaprawmst*/QL_trnbelimst";
        //                            tbltmpImp.aprefmstoid = id;


        //                            db.QL_trnapimportmst.Add(tbltmpImp);
        //                            db.SaveChanges();

        //                            // Insert QL_conap Import                    
        //                            db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "QL_trnapimportmst", apimportmstoid, 0, tblImport[i].suppoid, tblImport[i].importacctgoid, "Post", "APIC", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblImport[i].importvalue, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, 0, tblImport[i].importvalueusd, 0, 0 , ""));

        //                        }

        //                        sSql = "UPDATE QL_mstoid SET lastoid=" + (apimportmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnapimportmst'";
        //                        db.Database.ExecuteSqlCommand(sSql);
        //                        db.SaveChanges();
                              
        //                    }

        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conapoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conap'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/P Raw|No. " + transno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    // Insert QL_trngldtl
        //                    dRound = tblmst.aprawtotalamt + dTotalImport - dMRAmt;
        //                    dDiffIDR = (tblmst.aprawtotalamt * cRate.GetRateMonthlyIDRValue) + dTotalImportIDR - dMRAmtIDR;
        //                    dDiffUSD = (tblmst.aprawtotalamt * cRate.GetRateMonthlyUSDValue) + dTotalImportUSD - dMRAmtUSD;
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", dMRAmt, transno, "A/P Raw|No. " + transno + tblmst.aprawmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dMRAmtIDR, dMRAmtUSD, "/*QL_trnaprawmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    decimal totaltax = Convert.ToDecimal(tblmst.aprawtotaltax);

        //                    if (tblmst.aprawtotaltax > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PPN_IN, "D", totaltax, transno, "A/P Raw| Note. PPN | Penerima." + suppname, "Post", Session["UserID"].ToString(), servertime, (totaltax * cRate.GetRateMonthlyIDRValue), (totaltax * cRate.GetRateMonthlyUSDValue), "/*QL_trnaprawmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dRound > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_ROUNDING, "D", dRound, transno, "A/P Raw|No. " + transno + tblmst.aprawmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "/*QL_trnaprawmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffIDR > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_IDR, "D", 0, transno, "A/P Raw|No. " + transno + tblmst.aprawmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dDiffIDR, 0, "/*QL_trnaprawmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffUSD > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_USD, "D", 0, transno, "A/P Raw|No. " + transno + tblmst.aprawmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, dDiffUSD, "/*QL_trnaprawmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_AP, "C", tblmst.aprawgrandtotal, transno, "A/P Raw|No. " + transno + tblmst.aprawmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, (tblmst.aprawgrandtotal * cRate.GetRateMonthlyIDRValue), (tblmst.aprawgrandtotal * cRate.GetRateMonthlyUSDValue), "/*QL_trnaprawmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                   if (dTotalImport > 0 || dTotalImportIDR > 0 || dTotalImportUSD > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_APIC_ASSIGNMENT, "C", dTotalImport, transno, "A/P Raw|No. " + transno + tblmst.aprawmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dTotalImportIDR, dTotalImportUSD, "/*QL_trnaprawmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dRound < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_ROUNDING, "C", -dRound, transno, "A/P Raw|No. " + transno + tblmst.aprawmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "/*QL_trnaprawmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffIDR < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_IDR, "C", 0, transno, "A/P Raw|No. " + transno + tblmst.aprawmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, -dDiffIDR, 0, "/*QL_trnaprawmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffUSD < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_USD, "C", 0, transno, "A/P Raw|No. " + transno + tblmst.aprawmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, -dDiffUSD, "/*QL_trnaprawmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    glmstoid++;

        //                    if (tblImport != null)
        //                    {

        //                        for (int i = 0; i < tblImport.Count; i++)
        //                        {
        //                            // Insert QL_trnglmst Import
        //                            db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblImport[i].rateoid, tblImport[i].rate2oid, tblImport[i].ratetoidr, tblImport[i].rate2toidr, tblImport[i].ratetousd, tblImport[i].rate2tousd));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_APIC_ASSIGNMENT, "D", tblImport[i].importvalue, tblImport[i].apimportno, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, tblImport[i].importvalueusd, "QL_trnapimportmst " + tblImport[i].apimportmstoid.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, tblImport[i].importacctgoid, "C", tblImport[i].importvalue, tblImport[i].apimportno, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, tblImport[i].importvalueusd, "QL_trnapimportmst " + tblImport[i].apimportmstoid.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            glmstoid++;
        //                        }
        //                    }

        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalAPGM(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnapgenmst*/QL_trnbelimst tblmst;
        //    tblmst = db./*QL_trnapgenmst*/QL_trnbelimst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var cRateTmp = new ClassRate();
        //    DateTime duedate = db.Database.SqlQuery<DateTime>("Select DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apgendate) AS [Due Date] FROM /*QL_trnapgenmst*/QL_trnbelimst ap INNER JOIN QL_mstgen g ON g.genoid=ap.apgenpaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND apgenmstoid=" + id).FirstOrDefault();
        //    var potype = db.Database.SqlQuery<string>("SELECT TOP 1 registerflag FROM QL_trnregistermst regmx INNER JOIN QL_trnapgendtl apdx ON apdx.cmpcode = regmx.cmpcode AND apdx.registermstoid = regmx.registermstoid WHERE apdx.cmpcode='" + cmp + "' AND apdx.apgenmstoid=" + id).FirstOrDefault();
        //    var suppname = db.Database.SqlQuery<string>("SELECT suppname FROM QL_mstsupp s WHERE s.cmpcode='" + cmp + "' AND s.suppoid=" + tblmst.suppoid).FirstOrDefault();
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var sNoImport = "";
        //    List<trnimportdtl> tblImport = null;

        //    List<trnmrdtl> tblMR = null;

        //    sSql = "SELECT apd.apgenqty apqty, mrd.mrgenvalue mrvalue, mrd.mrgenvalueidr mrvalueidr, mrd.mrgenvalueusd mrvalueusd FROM QL_trnapgendtl apd INNER JOIN QL_trnmrgendtl mrd ON mrd.cmpcode=apd.cmpcode AND mrd.mrgendtloid=apd.mrgendtloid AND mrd.mrgenmstoid=apd.mrgenmstoid WHERE apd.cmpcode='" + cmp + "' AND apgenmstoid=" + id;

        //    tblMR = db.Database.SqlQuery<trnmrdtl>(sSql).ToList();


        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_PURC_RECEIVED", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PURC_RECEIVED");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_IN", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_IN");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_IDR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_IDR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_USD", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_USD");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //        if (potype.ToUpper() == "LOCAL")
        //        {
        //            if (!ClassFunction.IsInterfaceExists("VAR_AP_LOCAL", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_AP_LOCAL");
        //        }
        //        else
        //        {
        //            if (!ClassFunction.IsInterfaceExists("VAR_AP_IMPORT", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_AP_IMPORT");
        //        }
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_APIC_ASSIGNMENT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_APIC_ASSIGNMENT");

        //        if (potype.ToUpper() == "IMPORT")
        //        {

        //            sSql = "SELECT imd.importmstoid, importacctgoid, importvalue, imd.curroid, imd.suppoid, s.suppname AS suppic, importno, CONVERT(VARCHAR(10), registerdate, 101) AS registerdate, 0.0 AS importvalueidr, 0.0 AS importvalueusd, 0.0 AS importvaluepost, 0 AS rateoid, '' AS ratetoidr, '' AS ratetousd, 0 AS rate2oid, '' AS rate2toidr, '' AS rate2tousd, imd.importdtloid, '' apimportno, 0 apimportmstoid FROM QL_trnimportdtl imd INNER JOIN QL_trnimportmst imm ON imm.cmpcode=imd.cmpcode AND imm.importmstoid=imd.importmstoid INNER JOIN QL_trnregistermst regm ON regm.cmpcode=imm.cmpcode AND regm.registermstoid=imm.registermstoid INNER JOIN QL_mstsupp s ON s.suppoid=imd.suppoid WHERE imd.cmpcode='" + cmp + "' AND imm.registermstoid IN (SELECT registermstoid FROM QL_trnapgendtl WHERE cmpcode='" + cmp + "' AND apgenmstoid=" + id + ")";

        //            tblImport = db.Database.SqlQuery<trnimportdtl>(sSql).ToList();

        //            for (int i = 0; i < tblImport.Count(); i++)
        //            {
        //                cRateTmp.SetRateValue(tblImport[i].curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //                if (cRateTmp.GetRateDailyLastError != "")
        //                    error = cRateTmp.GetRateDailyLastError;
        //                if (cRateTmp.GetRateMonthlyLastError != "")
        //                    error = cRateTmp.GetRateMonthlyLastError;

        //            }

        //        }
        //    }

        //    if (error == "")
        //    {
        //        var conapoid = ClassFunction.GenerateID("QL_CONAP");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var stockvalueoid = ClassFunction.GenerateID("QL_stockvalue");
        //        var apimportmstoid = ClassFunction.GenerateID("QL_trnapimportmst");
        //        var iVAR_PURC_RECEIVED = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PURC_RECEIVED", cmp));
        //        var iVAR_PPN_IN = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_IN", cmp));
        //        var iVAR_DIFF_CURR_IDR = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_IDR", cmp));
        //        var iVAR_DIFF_CURR_USD = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_USD", cmp));
        //        var iVAR_ROUNDING = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        var iVAR_AP = 0;
        //        if (potype.ToUpper() == "LOCAL")
        //            iVAR_AP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_LOCAL", cmp));
        //        else
        //            iVAR_AP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_IMPORT", cmp));

        //        var iVAR_APIC_ASSIGNMENT = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_APIC_ASSIGNMENT", cmp));
        //        decimal dTotalImport_IDR = 0;
        //        decimal dTotalImport_USD = 0;
        //        decimal dMRAmt = 0;
        //        decimal dMRAmtIDR = 0;
        //        decimal dMRAmtUSD = 0;
        //        decimal dTotalImportIDR = 0;
        //        decimal dTotalImportUSD = 0;
        //        decimal dTotalImport = 0;
        //        decimal dRound = 0;
        //        decimal dDiffIDR = 0;
        //        decimal dDiffUSD = 0;

        //        if (action == "Approved")
        //        {

        //            dMRAmt = tblMR.Sum(x => (x.apqty * x.mrvalue));
        //            dMRAmtIDR = tblMR.Sum(x => (x.apqty * x.mrvalueidr));
        //            dMRAmtUSD = tblMR.Sum(x => (x.apqty * x.mrvalueusd));

        //            if (potype.ToUpper() == "IMPORT")
        //            {
        //                sNoImport = "APIC-" + ClassFunction.GetServerTime().ToString("yyyy.MM") + "-";
        //                sSql = "SELECT ISNULL(MAX(CAST(RIGHT(apimportno, 6) AS INTEGER)) + 1, 1) AS IDNEW FROM QL_trnapimportmst WHERE cmpcode='" + cmp + "' AND apimportno LIKE '" + sNoImport + "%'";
        //                int sCount = db.Database.SqlQuery<int>(sSql).FirstOrDefault();
        //                string sCounter = "";

        //                for (int i = 0; i < tblImport.Count(); i++)
        //                {
        //                    sCounter = ClassFunction.GenNumberString(sCount + i, int.Parse(NumberCounter));
        //                    sNoImport = sNoImport + sCounter;

        //                    tblImport[i].apimportmstoid = apimportmstoid;
        //                    tblImport[i].apimportno = sNoImport;
        //                    tblImport[i].importvalueidr = tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue;
        //                    tblImport[i].importvalueusd = tblImport[i].importvalue * cRateTmp.GetRateMonthlyUSDValue;
        //                    dTotalImport_IDR += tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue;
        //                    dTotalImport_USD += tblImport[i].importvalue * cRateTmp.GetRateMonthlyUSDValue;
        //                    tblImport[i].importvaluepost = ((tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue) / cRate.GetRateMonthlyIDRValue);
        //                    tblImport[i].rateoid = cRateTmp.GetRateDailyOid;
        //                    tblImport[i].ratetoidr = cRateTmp.GetRateDailyIDRValue;
        //                    tblImport[i].ratetousd = cRateTmp.GetRateDailyUSDValue;
        //                    tblImport[i].rate2oid = cRateTmp.GetRateMonthlyOid;
        //                    tblImport[i].rate2toidr = cRateTmp.GetRateMonthlyIDRValue;
        //                    tblImport[i].rate2tousd = cRateTmp.GetRateMonthlyUSDValue;

        //                    apimportmstoid++;
        //                }

        //                dTotalImportIDR = tblImport.Sum(x => x.importvaluepost);
        //                dTotalImportUSD = tblImport.Sum(x => x.importvalueidr);
        //                dTotalImport = tblImport.Sum(x => x.importvalueusd);

        //            }
        //        }
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                sSql = "UPDATE /*QL_trnapgenmst*/QL_trnbelimst SET apgenmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "', upduser='" + Session["UserID"].ToString() + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid = " + cRate.GetRateDailyOid + ", apgenratetoidr = '" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', apgenratetousd = '" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid = " + cRate.GetRateMonthlyOid + ", apgenrate2toidr = '" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', apgenrate2tousd = '" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "', apgentotalamtidr = apgentotalamt * " + cRate.GetRateMonthlyIDRValue + ", apgentotalamtusd = apgentotalamt * " + cRate.GetRateMonthlyUSDValue + ", apgentotaldiscidr = apgentotaldisc * " + cRate.GetRateMonthlyIDRValue + ", apgentotaldiscusd = apgentotaldisc * " + cRate.GetRateMonthlyUSDValue + ", apgentotaltaxidr = apgentotaltax * " + cRate.GetRateMonthlyIDRValue + ", apgentotaltaxusd = apgentotaltax * " + cRate.GetRateMonthlyUSDValue + ", apgengrandtotalidr = apgengrandtotal * " + cRate.GetRateMonthlyIDRValue + ", apgengrandtotalusd = apgengrandtotal * " + cRate.GetRateMonthlyUSDValue + ", apgentotalimportidr = " + dTotalImport_IDR + ", apgentotalimportusd = " + dTotalImport_USD;
        //                }
        //                sSql += " WHERE cmpcode='" + cmp + "' AND apgenmststatus='In Approval' AND apgenmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnapgenmst*/QL_trnbelimst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnmrgendtl SET mrgendtlres1='' WHERE cmpcode='" + cmp + "' AND mrgendtloid IN (SELECT mrgendtloid FROM QL_trnapgendtl WHERE cmpcode='" + cmp + "' AND apgenmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnmrgenmst SET mrgenmstres1='' WHERE cmpcode='" + cmp + "' AND mrgenmstoid IN (SELECT mrgenmstoid FROM QL_trnapgendtl WHERE cmpcode='" + cmp + "' AND apgenmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    // Insert QL_conap                        
        //                    db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "/*QL_trnapgenmst*/QL_trnbelimst", id, 0, tblmst.suppoid, iVAR_AP, "Post", "APGM", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblmst.apgengrandtotal, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblmst.apgengrandtotal * cRate.GetRateMonthlyIDRValue, 0, tblmst.apgengrandtotal * cRate.GetRateMonthlyIDRValue, 0, 0, ""));
        //                    db.SaveChanges();


        //                    if (potype.ToUpper() == "IMPORT")
        //                    {
        //                        // Insert Import
        //                        dTotalImportIDR = tblImport.Sum(x => x.importvaluepost);
        //                        dTotalImportUSD = tblImport.Sum(x => x.importvalueidr);
        //                        dTotalImport = tblImport.Sum(x => x.importvalueusd);

        //                        QL_trnapimportmst tbltmpImp;

        //                        for (int i = 0; i < tblImport.Count; i++)
        //                        {
        //                            tbltmpImp = new QL_trnapimportmst();
        //                            tbltmpImp.cmpcode = cmp;
        //                            tbltmpImp.apimportmstoid = apimportmstoid++;
        //                            tbltmpImp.periodacctg = sPeriod;
        //                            tbltmpImp.apimportdate = servertime;
        //                            tbltmpImp.apimportno = tbltmpImp.apimportno;
        //                            tbltmpImp.suppoid = tblImport[i].suppoid;
        //                            tbltmpImp.apimportpaytypeoid = tblmst.apgenpaytypeoid;
        //                            tbltmpImp.curroid = tblImport[i].curroid;
        //                            tbltmpImp.rateoid = tblImport[i].rateoid;
        //                            tbltmpImp.apimportratetoidr = tblImport[i].ratetoidr.ToString();
        //                            tbltmpImp.apimportratetousd = tblImport[i].ratetousd.ToString();
        //                            tbltmpImp.rate2oid = tblImport[i].rate2oid;
        //                            tbltmpImp.apimportrate2toidr = tblImport[i].rate2toidr.ToString();
        //                            tbltmpImp.apimportrate2tousd = tblImport[i].rate2tousd.ToString();
        //                            tbltmpImp.apimporttotalamt = tblImport[i].importvalue;
        //                            tbltmpImp.apimporttotalamtidr = tblImport[i].importvalueidr;
        //                            tbltmpImp.apimporttotalamtusd = tblImport[i].importvalueusd;
        //                            tbltmpImp.apimporttotaldisc = 0;
        //                            tbltmpImp.apimporttotaldiscidr = 0;
        //                            tbltmpImp.apimporttotaldiscusd = 0;
        //                            tbltmpImp.apimporttotaltax = 0;
        //                            tbltmpImp.apimporttotaltaxidr = 0;
        //                            tbltmpImp.apimporttotaltaxusd = 0;
        //                            tbltmpImp.apimportgrandtotal = tblImport[i].importvalue;
        //                            tbltmpImp.apimportgrandtotalidr = tblImport[i].importvalueidr;
        //                            tbltmpImp.apimportgrandtotalusd = tblImport[i].importvalueusd;
        //                            tbltmpImp.apimportmstnote = "";
        //                            tbltmpImp.apimportmststatus = "Approved";
        //                            tbltmpImp.approvaluser = Session["UserID"].ToString();
        //                            tbltmpImp.approvaldatetime = servertime;
        //                            tbltmpImp.createuser = Session["UserID"].ToString();
        //                            tbltmpImp.createtime = servertime;
        //                            tbltmpImp.upduser = Session["UserID"].ToString();
        //                            tbltmpImp.updtime = servertime;
        //                            tbltmpImp.apimportsupptotal = 0;
        //                            tbltmpImp.apimportdatetakegiro = tblmst.apgendatetakegiro;
        //                            tbltmpImp.importdtloid = tblImport[i].importdtloid;
        //                            tbltmpImp.apreftype = "/*QL_trnapgenmst*/QL_trnbelimst";
        //                            tbltmpImp.aprefmstoid = id;


        //                            db.QL_trnapimportmst.Add(tbltmpImp);
        //                            db.SaveChanges();

        //                            // Insert QL_conap Import                    
        //                            db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "QL_trnapimportmst", apimportmstoid, 0, tblImport[i].suppoid, tblImport[i].importacctgoid, "Post", "APIC", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblImport[i].importvalue, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, 0, tblImport[i].importvalueusd, 0, 0, ""));

        //                        }

        //                        sSql = "UPDATE QL_mstoid SET lastoid=" + (apimportmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnapimportmst'";
        //                        db.Database.ExecuteSqlCommand(sSql);
        //                        db.SaveChanges();
                               
        //                    }
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conapoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conap'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/P Gen|No. " + transno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    // Insert QL_trngldtl
        //                    dRound = tblmst.apgentotalamt + dTotalImport - dMRAmt;
        //                    dDiffIDR = (tblmst.apgentotalamt * cRate.GetRateMonthlyIDRValue) + dTotalImportIDR - dMRAmtIDR;
        //                    dDiffUSD = (tblmst.apgentotalamt * cRate.GetRateMonthlyUSDValue) + dTotalImportUSD - dMRAmtUSD;
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", dMRAmt, transno, "A/P Gen|No. " + transno + tblmst.apgenmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dMRAmtIDR, dMRAmtUSD, "/*QL_trnapgenmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    decimal totaltax = Convert.ToDecimal(tblmst.apgentotaltax);

        //                    if (tblmst.apgentotaltax > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PPN_IN, "D", totaltax, transno, "A/P Gen| Note. PPN | Penerima." + suppname, "Post", Session["UserID"].ToString(), servertime, (totaltax * cRate.GetRateMonthlyIDRValue), (totaltax * cRate.GetRateMonthlyUSDValue), "/*QL_trnapgenmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dRound > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_ROUNDING, "D", dRound, transno, "A/P Gen|No. " + transno + tblmst.apgenmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "/*QL_trnapgenmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffIDR > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_IDR, "D", 0, transno, "A/P Gen|No. " + transno + tblmst.apgenmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dDiffIDR, 0, "/*QL_trnapgenmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffUSD > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_USD, "D", 0, transno, "A/P Gen|No. " + transno + tblmst.apgenmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, dDiffUSD, "/*QL_trnapgenmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_AP, "C", tblmst.apgengrandtotal, transno, "A/P Gen|No. " + transno + tblmst.apgenmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, (tblmst.apgengrandtotal * cRate.GetRateMonthlyIDRValue), (tblmst.apgengrandtotal * cRate.GetRateMonthlyUSDValue), "/*QL_trnapgenmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    if (dTotalImport > 0 || dTotalImportIDR > 0 || dTotalImportUSD > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_APIC_ASSIGNMENT, "C", dTotalImport, transno, "A/P Gen|No. " + transno + tblmst.apgenmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dTotalImportIDR, dTotalImportUSD, "/*QL_trnapgenmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dRound < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_ROUNDING, "C", -dRound, transno, "A/P Gen|No. " + transno + tblmst.apgenmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "/*QL_trnapgenmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffIDR < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_IDR, "C", 0, transno, "A/P Gen|No. " + transno + tblmst.apgenmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, -dDiffIDR, 0, "/*QL_trnapgenmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffUSD < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_USD, "C", 0, transno, "A/P Gen|No. " + transno + tblmst.apgenmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, -dDiffUSD, "/*QL_trnapgenmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    glmstoid++;

        //                    if (tblImport != null)
        //                    {

        //                        for (int i = 0; i < tblImport.Count; i++)
        //                        {
        //                            // Insert QL_trnglmst Import
        //                            db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblImport[i].rateoid, tblImport[i].rate2oid, tblImport[i].ratetoidr, tblImport[i].rate2toidr, tblImport[i].ratetousd, tblImport[i].rate2tousd));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_APIC_ASSIGNMENT, "D", tblImport[i].importvalue, tblImport[i].apimportno, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, tblImport[i].importvalueusd, "QL_trnapimportmst " + tblImport[i].apimportmstoid.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, tblImport[i].importacctgoid, "C", tblImport[i].importvalue, tblImport[i].apimportno, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, tblImport[i].importvalueusd, "QL_trnapimportmst " + tblImport[i].apimportmstoid.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            glmstoid++;
        //                        }
        //                    }

        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalAPSP(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnapspmst*/QL_trnbelimst tblmst;
        //    tblmst = db./*QL_trnapspmst*/QL_trnbelimst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var cRateTmp = new ClassRate();
        //    DateTime duedate = db.Database.SqlQuery<DateTime>("Select DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apspdate) AS [Due Date] FROM /*QL_trnapspmst*/QL_trnbelimst ap INNER JOIN QL_mstgen g ON g.genoid=ap.apsppaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND apspmstoid=" + id).FirstOrDefault();
        //    var potype = db.Database.SqlQuery<string>("SELECT TOP 1 registerflag FROM QL_trnregistermst regmx INNER JOIN QL_trnapspdtl apdx ON apdx.cmpcode = regmx.cmpcode AND apdx.registermstoid = regmx.registermstoid WHERE apdx.cmpcode='" + cmp + "' AND apdx.apspmstoid=" + id).FirstOrDefault();
        //    var suppname = db.Database.SqlQuery<string>("SELECT suppname FROM QL_mstsupp s WHERE s.cmpcode='" + cmp + "' AND s.suppoid=" + tblmst.suppoid).FirstOrDefault();
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var sNoImport = "";
        //    List<trnimportdtl> tblImport = null;

        //    List<trnmrdtl> tblMR = null;

        //    sSql = "SELECT apd.apspqty apqty, mrd.mrspvalue mrvalue, mrd.mrspvalueidr mrvalueidr, mrd.mrspvalueusd mrvalueusd FROM QL_trnapspdtl apd INNER JOIN QL_trnmrspdtl mrd ON mrd.cmpcode=apd.cmpcode AND mrd.mrspdtloid=apd.mrspdtloid AND mrd.mrspmstoid=apd.mrspmstoid WHERE apd.cmpcode='" + cmp + "' AND apspmstoid=" + id;

        //    tblMR = db.Database.SqlQuery<trnmrdtl>(sSql).ToList();


        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_PURC_RECEIVED", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PURC_RECEIVED");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_IN", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_IN");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_IDR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_IDR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_USD", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_USD");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //        if (potype.ToUpper() == "LOCAL")
        //        {
        //            if (!ClassFunction.IsInterfaceExists("VAR_AP_LOCAL", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_AP_LOCAL");
        //        }
        //        else
        //        {
        //            if (!ClassFunction.IsInterfaceExists("VAR_AP_IMPORT", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_AP_IMPORT");
        //        }
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_APIC_ASSIGNMENT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_APIC_ASSIGNMENT");

        //        if (potype.ToUpper() == "IMPORT")
        //        {

        //            sSql = "SELECT imd.importmstoid, importacctgoid, importvalue, imd.curroid, imd.suppoid, s.suppname AS suppic, importno, CONVERT(VARCHAR(10), registerdate, 101) AS registerdate, 0.0 AS importvalueidr, 0.0 AS importvalueusd, 0.0 AS importvaluepost, 0 AS rateoid, '' AS ratetoidr, '' AS ratetousd, 0 AS rate2oid, '' AS rate2toidr, '' AS rate2tousd, imd.importdtloid, '' apimportno, 0 apimportmstoid FROM QL_trnimportdtl imd INNER JOIN QL_trnimportmst imm ON imm.cmpcode=imd.cmpcode AND imm.importmstoid=imd.importmstoid INNER JOIN QL_trnregistermst regm ON regm.cmpcode=imm.cmpcode AND regm.registermstoid=imm.registermstoid INNER JOIN QL_mstsupp s ON s.suppoid=imd.suppoid WHERE imd.cmpcode='" + cmp + "' AND imm.registermstoid IN (SELECT registermstoid FROM QL_trnapspdtl WHERE cmpcode='" + cmp + "' AND apspmstoid=" + id + ")";

        //            tblImport = db.Database.SqlQuery<trnimportdtl>(sSql).ToList();

        //            for (int i = 0; i < tblImport.Count(); i++)
        //            {
        //                cRateTmp.SetRateValue(tblImport[i].curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //                if (cRateTmp.GetRateDailyLastError != "")
        //                    error = cRateTmp.GetRateDailyLastError;
        //                if (cRateTmp.GetRateMonthlyLastError != "")
        //                    error = cRateTmp.GetRateMonthlyLastError;

        //            }

        //        }
        //    }

        //    if (error == "")
        //    {
        //        var conapoid = ClassFunction.GenerateID("QL_CONAP");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var stockvalueoid = ClassFunction.GenerateID("QL_stockvalue");
        //        var apimportmstoid = ClassFunction.GenerateID("QL_trnapimportmst");
        //        var iVAR_PURC_RECEIVED = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PURC_RECEIVED", cmp));
        //        var iVAR_PPN_IN = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_IN", cmp));
        //        var iVAR_DIFF_CURR_IDR = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_IDR", cmp));
        //        var iVAR_DIFF_CURR_USD = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_USD", cmp));
        //        var iVAR_ROUNDING = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        var iVAR_AP = 0;
        //        if (potype.ToUpper() == "LOCAL")
        //            iVAR_AP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_LOCAL", cmp));
        //        else
        //            iVAR_AP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_IMPORT", cmp));

        //        var iVAR_APIC_ASSIGNMENT = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_APIC_ASSIGNMENT", cmp));
        //        decimal dTotalImport_IDR = 0;
        //        decimal dTotalImport_USD = 0;
        //        decimal dMRAmt = 0;
        //        decimal dMRAmtIDR = 0;
        //        decimal dMRAmtUSD = 0;
        //        decimal dTotalImportIDR = 0;
        //        decimal dTotalImportUSD = 0;
        //        decimal dTotalImport = 0;
        //        decimal dRound = 0;
        //        decimal dDiffIDR = 0;
        //        decimal dDiffUSD = 0;

        //        if (action == "Approved")
        //        {

        //            dMRAmt = tblMR.Sum(x => (x.apqty * x.mrvalue));
        //            dMRAmtIDR = tblMR.Sum(x => (x.apqty * x.mrvalueidr));
        //            dMRAmtUSD = tblMR.Sum(x => (x.apqty * x.mrvalueusd));

        //            if (potype.ToUpper() == "IMPORT")
        //            {
        //                sNoImport = "APIC-" + ClassFunction.GetServerTime().ToString("yyyy.MM") + "-";
        //                sSql = "SELECT ISNULL(MAX(CAST(RIGHT(apimportno, 6) AS INTEGER)) + 1, 1) AS IDNEW FROM QL_trnapimportmst WHERE cmpcode='" + cmp + "' AND apimportno LIKE '" + sNoImport + "%'";
        //                int sCount = db.Database.SqlQuery<int>(sSql).FirstOrDefault();
        //                string sCounter = "";

        //                for (int i = 0; i < tblImport.Count(); i++)
        //                {
        //                    sCounter = ClassFunction.GenNumberString(sCount + i, int.Parse(NumberCounter));
        //                    sNoImport = sNoImport + sCounter;

        //                    tblImport[i].apimportmstoid = apimportmstoid;
        //                    tblImport[i].apimportno = sNoImport;
        //                    tblImport[i].importvalueidr = tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue;
        //                    tblImport[i].importvalueusd = tblImport[i].importvalue * cRateTmp.GetRateMonthlyUSDValue;
        //                    dTotalImport_IDR += tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue;
        //                    dTotalImport_USD += tblImport[i].importvalue * cRateTmp.GetRateMonthlyUSDValue;
        //                    tblImport[i].importvaluepost = ((tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue) / cRate.GetRateMonthlyIDRValue);
        //                    tblImport[i].rateoid = cRateTmp.GetRateDailyOid;
        //                    tblImport[i].ratetoidr = cRateTmp.GetRateDailyIDRValue;
        //                    tblImport[i].ratetousd = cRateTmp.GetRateDailyUSDValue;
        //                    tblImport[i].rate2oid = cRateTmp.GetRateMonthlyOid;
        //                    tblImport[i].rate2toidr = cRateTmp.GetRateMonthlyIDRValue;
        //                    tblImport[i].rate2tousd = cRateTmp.GetRateMonthlyUSDValue;

        //                    apimportmstoid++;
        //                }

        //                dTotalImportIDR = tblImport.Sum(x => x.importvaluepost);
        //                dTotalImportUSD = tblImport.Sum(x => x.importvalueidr);
        //                dTotalImport = tblImport.Sum(x => x.importvalueusd);

        //            }
        //        }
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                sSql = "UPDATE /*QL_trnapspmst*/QL_trnbelimst SET apspmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "', upduser='" + Session["UserID"].ToString() + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid = " + cRate.GetRateDailyOid + ", apspratetoidr = '" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', apspratetousd = '" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid = " + cRate.GetRateMonthlyOid + ", apsprate2toidr = '" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', apsprate2tousd = '" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "', apsptotalamtidr = apsptotalamt * " + cRate.GetRateMonthlyIDRValue + ", apsptotalamtusd = apsptotalamt * " + cRate.GetRateMonthlyUSDValue + ", apsptotaldiscidr = apsptotaldisc * " + cRate.GetRateMonthlyIDRValue + ", apsptotaldiscusd = apsptotaldisc * " + cRate.GetRateMonthlyUSDValue + ", apsptotaltaxidr = apsptotaltax * " + cRate.GetRateMonthlyIDRValue + ", apsptotaltaxusd = apsptotaltax * " + cRate.GetRateMonthlyUSDValue + ", apspgrandtotalidr = apspgrandtotal * " + cRate.GetRateMonthlyIDRValue + ", apspgrandtotalusd = apspgrandtotal * " + cRate.GetRateMonthlyUSDValue + ", apsptotalimportidr = " + dTotalImport_IDR + ", apsptotalimportusd = " + dTotalImport_USD;
        //                }
        //                sSql += " WHERE cmpcode='" + cmp + "' AND apspmststatus='In Approval' AND apspmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnapspmst*/QL_trnbelimst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnmrspdtl SET mrspdtlres1='' WHERE cmpcode='" + cmp + "' AND mrspdtloid IN (SELECT mrspdtloid FROM QL_trnapspdtl WHERE cmpcode='" + cmp + "' AND apspmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnmrspmst SET mrspmstres1='' WHERE cmpcode='" + cmp + "' AND mrspmstoid IN (SELECT mrspmstoid FROM QL_trnapspdtl WHERE cmpcode='" + cmp + "' AND apspmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    // Insert QL_conap                        
        //                    db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "/*QL_trnapspmst*/QL_trnbelimst", id, 0, tblmst.suppoid, iVAR_AP, "Post", "APSP", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblmst.apspgrandtotal, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblmst.apspgrandtotal * cRate.GetRateMonthlyIDRValue, 0, tblmst.apspgrandtotal * cRate.GetRateMonthlyIDRValue, 0, 0, ""));
        //                    db.SaveChanges();


        //                    if (potype.ToUpper() == "IMPORT")
        //                    {
        //                        // Insert Import
        //                        dTotalImportIDR = tblImport.Sum(x => x.importvaluepost);
        //                        dTotalImportUSD = tblImport.Sum(x => x.importvalueidr);
        //                        dTotalImport = tblImport.Sum(x => x.importvalueusd);

        //                        QL_trnapimportmst tbltmpImp;

        //                        for (int i = 0; i < tblImport.Count; i++)
        //                        {
        //                            tbltmpImp = new QL_trnapimportmst();
        //                            tbltmpImp.cmpcode = cmp;
        //                            tbltmpImp.apimportmstoid = apimportmstoid++;
        //                            tbltmpImp.periodacctg = sPeriod;
        //                            tbltmpImp.apimportdate = servertime;
        //                            tbltmpImp.apimportno = tbltmpImp.apimportno;
        //                            tbltmpImp.suppoid = tblImport[i].suppoid;
        //                            tbltmpImp.apimportpaytypeoid = tblmst.apsppaytypeoid;
        //                            tbltmpImp.curroid = tblImport[i].curroid;
        //                            tbltmpImp.rateoid = tblImport[i].rateoid;
        //                            tbltmpImp.apimportratetoidr = tblImport[i].ratetoidr.ToString();
        //                            tbltmpImp.apimportratetousd = tblImport[i].ratetousd.ToString();
        //                            tbltmpImp.rate2oid = tblImport[i].rate2oid;
        //                            tbltmpImp.apimportrate2toidr = tblImport[i].rate2toidr.ToString();
        //                            tbltmpImp.apimportrate2tousd = tblImport[i].rate2tousd.ToString();
        //                            tbltmpImp.apimporttotalamt = tblImport[i].importvalue;
        //                            tbltmpImp.apimporttotalamtidr = tblImport[i].importvalueidr;
        //                            tbltmpImp.apimporttotalamtusd = tblImport[i].importvalueusd;
        //                            tbltmpImp.apimporttotaldisc = 0;
        //                            tbltmpImp.apimporttotaldiscidr = 0;
        //                            tbltmpImp.apimporttotaldiscusd = 0;
        //                            tbltmpImp.apimporttotaltax = 0;
        //                            tbltmpImp.apimporttotaltaxidr = 0;
        //                            tbltmpImp.apimporttotaltaxusd = 0;
        //                            tbltmpImp.apimportgrandtotal = tblImport[i].importvalue;
        //                            tbltmpImp.apimportgrandtotalidr = tblImport[i].importvalueidr;
        //                            tbltmpImp.apimportgrandtotalusd = tblImport[i].importvalueusd;
        //                            tbltmpImp.apimportmstnote = "";
        //                            tbltmpImp.apimportmststatus = "Approved";
        //                            tbltmpImp.approvaluser = Session["UserID"].ToString();
        //                            tbltmpImp.approvaldatetime = servertime;
        //                            tbltmpImp.createuser = Session["UserID"].ToString();
        //                            tbltmpImp.createtime = servertime;
        //                            tbltmpImp.upduser = Session["UserID"].ToString();
        //                            tbltmpImp.updtime = servertime;
        //                            tbltmpImp.apimportsupptotal = 0;
        //                            tbltmpImp.apimportdatetakegiro = tblmst.apspdatetakegiro;
        //                            tbltmpImp.importdtloid = tblImport[i].importdtloid;
        //                            tbltmpImp.apreftype = "/*QL_trnapspmst*/QL_trnbelimst";
        //                            tbltmpImp.aprefmstoid = id;


        //                            db.QL_trnapimportmst.Add(tbltmpImp);
        //                            db.SaveChanges();

        //                            // Insert QL_conap Import                    
        //                            db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "QL_trnapimportmst", apimportmstoid, 0, tblImport[i].suppoid, tblImport[i].importacctgoid, "Post", "APIC", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblImport[i].importvalue, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, 0, tblImport[i].importvalueusd, 0, 0, ""));

        //                        }

        //                        sSql = "UPDATE QL_mstoid SET lastoid=" + (apimportmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnapimportmst'";
        //                        db.Database.ExecuteSqlCommand(sSql);
        //                        db.SaveChanges();
                                
        //                    }
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conapoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conap'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/P SP|No. " + transno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    // Insert QL_trngldtl
        //                    dRound = tblmst.apsptotalamt + dTotalImport - dMRAmt;
        //                    dDiffIDR = (tblmst.apsptotalamt * cRate.GetRateMonthlyIDRValue) + dTotalImportIDR - dMRAmtIDR;
        //                    dDiffUSD = (tblmst.apsptotalamt * cRate.GetRateMonthlyUSDValue) + dTotalImportUSD - dMRAmtUSD;
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", dMRAmt, transno, "A/P SP|No. " + transno + tblmst.apspmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dMRAmtIDR, dMRAmtUSD, "/*QL_trnapspmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    decimal totaltax = Convert.ToDecimal(tblmst.apsptotaltax);

        //                    if (tblmst.apsptotaltax > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PPN_IN, "D", totaltax, transno, "A/P SP| Note. PPN | Penerima." + suppname, "Post", Session["UserID"].ToString(), servertime, (totaltax * cRate.GetRateMonthlyIDRValue), (totaltax * cRate.GetRateMonthlyUSDValue), "/*QL_trnapspmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dRound > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_ROUNDING, "D", dRound, transno, "A/P SP|No. " + transno + tblmst.apspmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "/*QL_trnapspmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffIDR > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_IDR, "D", 0, transno, "A/P SP|No. " + transno + tblmst.apspmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dDiffIDR, 0, "/*QL_trnapspmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffUSD > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_USD, "D", 0, transno, "A/P SP|No. " + transno + tblmst.apspmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, dDiffUSD, "/*QL_trnapspmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_AP, "C", tblmst.apspgrandtotal, transno, "A/P SP|No. " + transno + tblmst.apspmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, (tblmst.apspgrandtotal * cRate.GetRateMonthlyIDRValue), (tblmst.apspgrandtotal * cRate.GetRateMonthlyUSDValue), "/*QL_trnapspmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    if (dTotalImport > 0 || dTotalImportIDR > 0 || dTotalImportUSD > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_APIC_ASSIGNMENT, "C", dTotalImport, transno, "A/P SP|No. " + transno + tblmst.apspmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dTotalImportIDR, dTotalImportUSD, "/*QL_trnapspmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dRound < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_ROUNDING, "C", -dRound, transno, "A/P SP|No. " + transno + tblmst.apspmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "/*QL_trnapspmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffIDR < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_IDR, "C", 0, transno, "A/P SP|No. " + transno + tblmst.apspmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, -dDiffIDR, 0, "/*QL_trnapspmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffUSD < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_USD, "C", 0, transno, "A/P SP|No. " + transno + tblmst.apspmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, -dDiffUSD, "/*QL_trnapspmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    glmstoid++;

        //                    if (tblImport != null)
        //                    {

        //                        for (int i = 0; i < tblImport.Count; i++)
        //                        {
        //                            // Insert QL_trnglmst Import
        //                            db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblImport[i].rateoid, tblImport[i].rate2oid, tblImport[i].ratetoidr, tblImport[i].rate2toidr, tblImport[i].ratetousd, tblImport[i].rate2tousd));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_APIC_ASSIGNMENT, "D", tblImport[i].importvalue, tblImport[i].apimportno, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, tblImport[i].importvalueusd, "QL_trnapimportmst " + tblImport[i].apimportmstoid.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, tblImport[i].importacctgoid, "C", tblImport[i].importvalue, tblImport[i].apimportno, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, tblImport[i].importvalueusd, "QL_trnapimportmst " + tblImport[i].apimportmstoid.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            glmstoid++;
        //                        }
        //                    }

        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalAPFG(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnapitemmst*/QL_trnbelimst tblmst;
        //    tblmst = db./*QL_trnapitemmst*/QL_trnbelimst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var cRateTmp = new ClassRate();
        //    DateTime duedate = db.Database.SqlQuery<DateTime>("Select DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apitemdate) AS [Due Date] FROM /*QL_trnapitemmst*/QL_trnbelimst ap INNER JOIN QL_mstgen g ON g.genoid=ap.apitempaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND apitemmstoid=" + id).FirstOrDefault();
        //    var potype = db.Database.SqlQuery<string>("SELECT TOP 1 registerflag FROM QL_trnregistermst regmx INNER JOIN QL_trnapitemdtl apdx ON apdx.cmpcode = regmx.cmpcode AND apdx.registermstoid = regmx.registermstoid WHERE apdx.cmpcode='" + cmp + "' AND apdx.apitemmstoid=" + id).FirstOrDefault();
        //    var suppname = db.Database.SqlQuery<string>("SELECT suppname FROM QL_mstsupp s WHERE s.cmpcode='" + cmp + "' AND s.suppoid=" + tblmst.suppoid).FirstOrDefault();
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var sNoImport = "";
        //    List<trnimportdtl> tblImport = null;

        //    List<trnmrdtl> tblMR = null;

        //    sSql = "SELECT apd.apitemqty apqty, mrd.mritemvalue mrvalue, mrd.mritemvalueidr mrvalueidr, mrd.mritemvalueusd mrvalueusd FROM QL_trnapitemdtl apd INNER JOIN QL_trnmritemdtl mrd ON mrd.cmpcode=apd.cmpcode AND mrd.mritemdtloid=apd.mritemdtloid AND mrd.mritemmstoid=apd.mritemmstoid WHERE apd.cmpcode='" + cmp + "' AND apitemmstoid=" + id;

        //    tblMR = db.Database.SqlQuery<trnmrdtl>(sSql).ToList();


        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_PURC_RECEIVED", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PURC_RECEIVED");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_IN", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_IN");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_IDR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_IDR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_USD", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_USD");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //        if (potype.ToUpper() == "LOCAL")
        //        {
        //            if (!ClassFunction.IsInterfaceExists("VAR_AP_LOCAL", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_AP_LOCAL");
        //        }
        //        else
        //        {
        //            if (!ClassFunction.IsInterfaceExists("VAR_AP_IMPORT", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_AP_IMPORT");
        //        }
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_APIC_ASSIGNMENT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_APIC_ASSIGNMENT");

        //        if (potype.ToUpper() == "IMPORT")
        //        {

        //            sSql = "SELECT imd.importmstoid, importacctgoid, importvalue, imd.curroid, imd.suppoid, s.suppname AS suppic, importno, CONVERT(VARCHAR(10), registerdate, 101) AS registerdate, 0.0 AS importvalueidr, 0.0 AS importvalueusd, 0.0 AS importvaluepost, 0 AS rateoid, '' AS ratetoidr, '' AS ratetousd, 0 AS rate2oid, '' AS rate2toidr, '' AS rate2tousd, imd.importdtloid, '' apimportno, 0 apimportmstoid FROM QL_trnimportdtl imd INNER JOIN QL_trnimportmst imm ON imm.cmpcode=imd.cmpcode AND imm.importmstoid=imd.importmstoid INNER JOIN QL_trnregistermst regm ON regm.cmpcode=imm.cmpcode AND regm.registermstoid=imm.registermstoid INNER JOIN QL_mstsupp s ON s.suppoid=imd.suppoid WHERE imd.cmpcode='" + cmp + "' AND imm.registermstoid IN (SELECT registermstoid FROM QL_trnapitemdtl WHERE cmpcode='" + cmp + "' AND apitemmstoid=" + id + ")";

        //            tblImport = db.Database.SqlQuery<trnimportdtl>(sSql).ToList();

        //            for (int i = 0; i < tblImport.Count(); i++)
        //            {
        //                cRateTmp.SetRateValue(tblImport[i].curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //                if (cRateTmp.GetRateDailyLastError != "")
        //                    error = cRateTmp.GetRateDailyLastError;
        //                if (cRateTmp.GetRateMonthlyLastError != "")
        //                    error = cRateTmp.GetRateMonthlyLastError;

        //            }

        //        }
        //    }

        //    if (error == "")
        //    {
        //        var conapoid = ClassFunction.GenerateID("QL_CONAP");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var stockvalueoid = ClassFunction.GenerateID("QL_stockvalue");
        //        var apimportmstoid = ClassFunction.GenerateID("QL_trnapimportmst");
        //        var iVAR_PURC_RECEIVED = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PURC_RECEIVED", cmp));
        //        var iVAR_PPN_IN = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_IN", cmp));
        //        var iVAR_DIFF_CURR_IDR = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_IDR", cmp));
        //        var iVAR_DIFF_CURR_USD = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_USD", cmp));
        //        var iVAR_ROUNDING = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        var iVAR_AP = 0;
        //        if (potype.ToUpper() == "LOCAL")
        //            iVAR_AP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_LOCAL", cmp));
        //        else
        //            iVAR_AP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_IMPORT", cmp));

        //        var iVAR_APIC_ASSIGNMENT = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_APIC_ASSIGNMENT", cmp));
        //        decimal dTotalImport_IDR = 0;
        //        decimal dTotalImport_USD = 0;
        //        decimal dMRAmt = 0;
        //        decimal dMRAmtIDR = 0;
        //        decimal dMRAmtUSD = 0;
        //        decimal dTotalImportIDR = 0;
        //        decimal dTotalImportUSD = 0;
        //        decimal dTotalImport = 0;
        //        decimal dRound = 0;
        //        decimal dDiffIDR = 0;
        //        decimal dDiffUSD = 0;

        //        if (action == "Approved")
        //        {

        //            dMRAmt = tblMR.Sum(x => (x.apqty * x.mrvalue));
        //            dMRAmtIDR = tblMR.Sum(x => (x.apqty * x.mrvalueidr));
        //            dMRAmtUSD = tblMR.Sum(x => (x.apqty * x.mrvalueusd));

        //            if (potype.ToUpper() == "IMPORT")
        //            {
        //                sNoImport = "APIC-" + ClassFunction.GetServerTime().ToString("yyyy.MM") + "-";
        //                sSql = "SELECT ISNULL(MAX(CAST(RIGHT(apimportno, 6) AS INTEGER)) + 1, 1) AS IDNEW FROM QL_trnapimportmst WHERE cmpcode='" + cmp + "' AND apimportno LIKE '" + sNoImport + "%'";
        //                int sCount = db.Database.SqlQuery<int>(sSql).FirstOrDefault();
        //                string sCounter = "";

        //                for (int i = 0; i < tblImport.Count(); i++)
        //                {
        //                    sCounter = ClassFunction.GenNumberString(sCount + i, int.Parse(NumberCounter));
        //                    sNoImport = sNoImport + sCounter;

        //                    tblImport[i].apimportmstoid = apimportmstoid;
        //                    tblImport[i].apimportno = sNoImport;
        //                    tblImport[i].importvalueidr = tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue;
        //                    tblImport[i].importvalueusd = tblImport[i].importvalue * cRateTmp.GetRateMonthlyUSDValue;
        //                    dTotalImport_IDR += tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue;
        //                    dTotalImport_USD += tblImport[i].importvalue * cRateTmp.GetRateMonthlyUSDValue;
        //                    tblImport[i].importvaluepost = ((tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue) / cRate.GetRateMonthlyIDRValue);
        //                    tblImport[i].rateoid = cRateTmp.GetRateDailyOid;
        //                    tblImport[i].ratetoidr = cRateTmp.GetRateDailyIDRValue;
        //                    tblImport[i].ratetousd = cRateTmp.GetRateDailyUSDValue;
        //                    tblImport[i].rate2oid = cRateTmp.GetRateMonthlyOid;
        //                    tblImport[i].rate2toidr = cRateTmp.GetRateMonthlyIDRValue;
        //                    tblImport[i].rate2tousd = cRateTmp.GetRateMonthlyUSDValue;

        //                    apimportmstoid++;
        //                }

        //                dTotalImportIDR = tblImport.Sum(x => x.importvaluepost);
        //                dTotalImportUSD = tblImport.Sum(x => x.importvalueidr);
        //                dTotalImport = tblImport.Sum(x => x.importvalueusd);

        //            }
        //        }
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                sSql = "UPDATE /*QL_trnapitemmst*/QL_trnbelimst SET apitemmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "', upduser='" + Session["UserID"].ToString() + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid = " + cRate.GetRateDailyOid + ", apitemratetoidr = '" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', apitemratetousd = '" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid = " + cRate.GetRateMonthlyOid + ", apitemrate2toidr = '" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', apitemrate2tousd = '" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "', apitemtotalamtidr = apitemtotalamt * " + cRate.GetRateMonthlyIDRValue + ", apitemtotalamtusd = apitemtotalamt * " + cRate.GetRateMonthlyUSDValue + ", apitemtotaldiscidr = apitemtotaldisc * " + cRate.GetRateMonthlyIDRValue + ", apitemtotaldiscusd = apitemtotaldisc * " + cRate.GetRateMonthlyUSDValue + ", apitemtotaltaxidr = apitemtotaltax * " + cRate.GetRateMonthlyIDRValue + ", apitemtotaltaxusd = apitemtotaltax * " + cRate.GetRateMonthlyUSDValue + ", apitemgrandtotalidr = apitemgrandtotal * " + cRate.GetRateMonthlyIDRValue + ", apitemgrandtotalusd = apitemgrandtotal * " + cRate.GetRateMonthlyUSDValue + ", apitemtotalimportidr = " + dTotalImport_IDR + ", apitemtotalimportusd = " + dTotalImport_USD;
        //                }
        //                sSql += " WHERE cmpcode='" + cmp + "' AND apitemmststatus='In Approval' AND apitemmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnapitemmst*/QL_trnbelimst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnmritemdtl SET mritemdtlres1='' WHERE cmpcode='" + cmp + "' AND mritemdtloid IN (SELECT mritemdtloid FROM QL_trnapitemdtl WHERE cmpcode='" + cmp + "' AND apitemmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnmritemmst SET mritemmstres1='' WHERE cmpcode='" + cmp + "' AND mritemmstoid IN (SELECT mritemmstoid FROM QL_trnapitemdtl WHERE cmpcode='" + cmp + "' AND apitemmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    // Insert QL_conap                        
        //                    db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "/*QL_trnapitemmst*/QL_trnbelimst", id, 0, tblmst.suppoid, iVAR_AP, "Post", "APFG", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblmst.apitemgrandtotal, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblmst.apitemgrandtotal * cRate.GetRateMonthlyIDRValue, 0, tblmst.apitemgrandtotal * cRate.GetRateMonthlyIDRValue, 0, 0, ""));
        //                    db.SaveChanges();


        //                    if (potype.ToUpper() == "IMPORT")
        //                    {
        //                        // Insert Import
        //                        dTotalImportIDR = tblImport.Sum(x => x.importvaluepost);
        //                        dTotalImportUSD = tblImport.Sum(x => x.importvalueidr);
        //                        dTotalImport = tblImport.Sum(x => x.importvalueusd);

        //                        QL_trnapimportmst tbltmpImp;

        //                        for (int i = 0; i < tblImport.Count; i++)
        //                        {
        //                            tbltmpImp = new QL_trnapimportmst();
        //                            tbltmpImp.cmpcode = cmp;
        //                            tbltmpImp.apimportmstoid = apimportmstoid++;
        //                            tbltmpImp.periodacctg = sPeriod;
        //                            tbltmpImp.apimportdate = servertime;
        //                            tbltmpImp.apimportno = tbltmpImp.apimportno;
        //                            tbltmpImp.suppoid = tblImport[i].suppoid;
        //                            tbltmpImp.apimportpaytypeoid = tblmst.apitempaytypeoid;
        //                            tbltmpImp.curroid = tblImport[i].curroid;
        //                            tbltmpImp.rateoid = tblImport[i].rateoid;
        //                            tbltmpImp.apimportratetoidr = tblImport[i].ratetoidr.ToString();
        //                            tbltmpImp.apimportratetousd = tblImport[i].ratetousd.ToString();
        //                            tbltmpImp.rate2oid = tblImport[i].rate2oid;
        //                            tbltmpImp.apimportrate2toidr = tblImport[i].rate2toidr.ToString();
        //                            tbltmpImp.apimportrate2tousd = tblImport[i].rate2tousd.ToString();
        //                            tbltmpImp.apimporttotalamt = tblImport[i].importvalue;
        //                            tbltmpImp.apimporttotalamtidr = tblImport[i].importvalueidr;
        //                            tbltmpImp.apimporttotalamtusd = tblImport[i].importvalueusd;
        //                            tbltmpImp.apimporttotaldisc = 0;
        //                            tbltmpImp.apimporttotaldiscidr = 0;
        //                            tbltmpImp.apimporttotaldiscusd = 0;
        //                            tbltmpImp.apimporttotaltax = 0;
        //                            tbltmpImp.apimporttotaltaxidr = 0;
        //                            tbltmpImp.apimporttotaltaxusd = 0;
        //                            tbltmpImp.apimportgrandtotal = tblImport[i].importvalue;
        //                            tbltmpImp.apimportgrandtotalidr = tblImport[i].importvalueidr;
        //                            tbltmpImp.apimportgrandtotalusd = tblImport[i].importvalueusd;
        //                            tbltmpImp.apimportmstnote = "";
        //                            tbltmpImp.apimportmststatus = "Approved";
        //                            tbltmpImp.approvaluser = Session["UserID"].ToString();
        //                            tbltmpImp.approvaldatetime = servertime;
        //                            tbltmpImp.createuser = Session["UserID"].ToString();
        //                            tbltmpImp.createtime = servertime;
        //                            tbltmpImp.upduser = Session["UserID"].ToString();
        //                            tbltmpImp.updtime = servertime;
        //                            tbltmpImp.apimportsupptotal = 0;
        //                            tbltmpImp.apimportdatetakegiro = tblmst.apitemdatetakegiro;
        //                            tbltmpImp.importdtloid = tblImport[i].importdtloid;
        //                            tbltmpImp.apreftype = "/*QL_trnapitemmst*/QL_trnbelimst";
        //                            tbltmpImp.aprefmstoid = id;


        //                            db.QL_trnapimportmst.Add(tbltmpImp);
        //                            db.SaveChanges();

        //                            // Insert QL_conap Import                    
        //                            db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "QL_trnapimportmst", apimportmstoid, 0, tblImport[i].suppoid, tblImport[i].importacctgoid, "Post", "APIC", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblImport[i].importvalue, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, 0, tblImport[i].importvalueusd, 0, 0, ""));

        //                        }

        //                        sSql = "UPDATE QL_mstoid SET lastoid=" + (apimportmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnapimportmst'";
        //                        db.Database.ExecuteSqlCommand(sSql);
        //                        db.SaveChanges();
                                
        //                    }

        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conapoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conap'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/P FG|No. " + transno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    // Insert QL_trngldtl
        //                    dRound = tblmst.apitemtotalamt + dTotalImport - dMRAmt;
        //                    dDiffIDR = (tblmst.apitemtotalamt * cRate.GetRateMonthlyIDRValue) + dTotalImportIDR - dMRAmtIDR;
        //                    dDiffUSD = (tblmst.apitemtotalamt * cRate.GetRateMonthlyUSDValue) + dTotalImportUSD - dMRAmtUSD;
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", dMRAmt, transno, "A/P FG|No. " + transno + tblmst.apitemmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dMRAmtIDR, dMRAmtUSD, "/*QL_trnapitemmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    decimal totaltax = Convert.ToDecimal(tblmst.apitemtotaltax);

        //                    if (tblmst.apitemtotaltax > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PPN_IN, "D", totaltax, transno, "A/P FG| Note. PPN | Penerima." + suppname, "Post", Session["UserID"].ToString(), servertime, (totaltax * cRate.GetRateMonthlyIDRValue), (totaltax * cRate.GetRateMonthlyUSDValue), "/*QL_trnapitemmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dRound > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_ROUNDING, "D", dRound, transno, "A/P FG|No. " + transno + tblmst.apitemmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "/*QL_trnapitemmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffIDR > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_IDR, "D", 0, transno, "A/P FG|No. " + transno + tblmst.apitemmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dDiffIDR, 0, "/*QL_trnapitemmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffUSD > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_USD, "D", 0, transno, "A/P FG|No. " + transno + tblmst.apitemmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, dDiffUSD, "/*QL_trnapitemmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_AP, "C", tblmst.apitemgrandtotal, transno, "A/P FG|No. " + transno + tblmst.apitemmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, (tblmst.apitemgrandtotal * cRate.GetRateMonthlyIDRValue), (tblmst.apitemgrandtotal * cRate.GetRateMonthlyUSDValue), "/*QL_trnapitemmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    if (dTotalImport > 0 || dTotalImportIDR > 0 || dTotalImportUSD > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_APIC_ASSIGNMENT, "C", dTotalImport, transno, "A/P FG|No. " + transno + tblmst.apitemmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dTotalImportIDR, dTotalImportUSD, "/*QL_trnapitemmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dRound < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_ROUNDING, "C", -dRound, transno, "A/P FG|No. " + transno + tblmst.apitemmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "/*QL_trnapitemmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffIDR < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_IDR, "C", 0, transno, "A/P FG|No. " + transno + tblmst.apitemmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, -dDiffIDR, 0, "/*QL_trnapitemmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffUSD < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_USD, "C", 0, transno, "A/P FG|No. " + transno + tblmst.apitemmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, -dDiffUSD, "/*QL_trnapitemmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    glmstoid++;

        //                    if (tblImport != null)
        //                    {

        //                        for (int i = 0; i < tblImport.Count; i++)
        //                        {
        //                            // Insert QL_trnglmst Import
        //                            db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblImport[i].rateoid, tblImport[i].rate2oid, tblImport[i].ratetoidr, tblImport[i].rate2toidr, tblImport[i].ratetousd, tblImport[i].rate2tousd));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_APIC_ASSIGNMENT, "D", tblImport[i].importvalue, tblImport[i].apimportno, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, tblImport[i].importvalueusd, "QL_trnapimportmst " + tblImport[i].apimportmstoid.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, tblImport[i].importacctgoid, "C", tblImport[i].importvalue, tblImport[i].apimportno, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, tblImport[i].importvalueusd, "QL_trnapimportmst " + tblImport[i].apimportmstoid.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            glmstoid++;
        //                        }
        //                    }

        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalAPFA(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnapassetmst*/QL_trnbelimst tblmst;
        //    tblmst = db./*QL_trnapassetmst*/QL_trnbelimst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var cRateTmp = new ClassRate();
        //    DateTime duedate = db.Database.SqlQuery<DateTime>("Select DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apassetdate) AS [Due Date] FROM /*QL_trnapassetmst*/QL_trnbelimst ap INNER JOIN QL_mstgen g ON g.genoid=ap.apassetpaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND apassetmstoid=" + id).FirstOrDefault();
        //    var potype = db.Database.SqlQuery<string>("SELECT TOP 1 registerflag FROM QL_trnregistermst regmx INNER JOIN QL_trnapassetdtl apdx ON apdx.cmpcode = regmx.cmpcode AND apdx.registermstoid = regmx.registermstoid WHERE apdx.cmpcode='" + cmp + "' AND apdx.apassetmstoid=" + id).FirstOrDefault();
        //    var suppname = db.Database.SqlQuery<string>("SELECT suppname FROM QL_mstsupp s WHERE s.cmpcode='" + cmp + "' AND s.suppoid=" + tblmst.suppoid).FirstOrDefault();
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var sNoImport = "";
        //    List<trnimportdtl> tblImport = null;

        //    List<trnmrdtl> tblMR = null;

        //    sSql = "SELECT apd.apassetqty apqty, mrd.mrassetvalue mrvalue, mrd.mrassetvalueidr mrvalueidr, mrd.mrassetvalueusd mrvalueusd FROM QL_trnapassetdtl apd INNER JOIN QL_trnmrassetdtl mrd ON mrd.cmpcode=apd.cmpcode AND mrd.mrassetdtloid=apd.mrassetdtloid AND mrd.mrassetmstoid=apd.mrassetmstoid WHERE apd.cmpcode='" + cmp + "' AND apassetmstoid=" + id;

        //    tblMR = db.Database.SqlQuery<trnmrdtl>(sSql).ToList();


        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_PURC_RECEIVED", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PURC_RECEIVED");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_IN", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_IN");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_IDR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_IDR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_USD", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_USD");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //        if (potype.ToUpper() == "LOCAL")
        //        {
        //            if (!ClassFunction.IsInterfaceExists("VAR_AP_LOCAL", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_AP_LOCAL");
        //        }
        //        else
        //        {
        //            if (!ClassFunction.IsInterfaceExists("VAR_AP_IMPORT", cmp))
        //                error = ClassFunction.GetInterfaceWarning("VAR_AP_IMPORT");
        //        }
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_APIC_ASSIGNMENT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_APIC_ASSIGNMENT");

        //        if (potype.ToUpper() == "IMPORT")
        //        {

        //            sSql = "SELECT imd.importmstoid, importacctgoid, importvalue, imd.curroid, imd.suppoid, s.suppname AS suppic, importno, CONVERT(VARCHAR(10), registerdate, 101) AS registerdate, 0.0 AS importvalueidr, 0.0 AS importvalueusd, 0.0 AS importvaluepost, 0 AS rateoid, '' AS ratetoidr, '' AS ratetousd, 0 AS rate2oid, '' AS rate2toidr, '' AS rate2tousd, imd.importdtloid, '' apimportno, 0 apimportmstoid FROM QL_trnimportdtl imd INNER JOIN QL_trnimportmst imm ON imm.cmpcode=imd.cmpcode AND imm.importmstoid=imd.importmstoid INNER JOIN QL_trnregistermst regm ON regm.cmpcode=imm.cmpcode AND regm.registermstoid=imm.registermstoid INNER JOIN QL_mstsupp s ON s.suppoid=imd.suppoid WHERE imd.cmpcode='" + cmp + "' AND imm.registermstoid IN (SELECT registermstoid FROM QL_trnapassetdtl WHERE cmpcode='" + cmp + "' AND apassetmstoid=" + id + ")";

        //            tblImport = db.Database.SqlQuery<trnimportdtl>(sSql).ToList();

        //            for (int i = 0; i < tblImport.Count(); i++)
        //            {
        //                cRateTmp.SetRateValue(tblImport[i].curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //                if (cRateTmp.GetRateDailyLastError != "")
        //                    error = cRateTmp.GetRateDailyLastError;
        //                if (cRateTmp.GetRateMonthlyLastError != "")
        //                    error = cRateTmp.GetRateMonthlyLastError;

        //            }

        //        }
        //    }

        //    if (error == "")
        //    {
        //        var conapoid = ClassFunction.GenerateID("QL_CONAP");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var stockvalueoid = ClassFunction.GenerateID("QL_stockvalue");
        //        var apimportmstoid = ClassFunction.GenerateID("QL_trnapimportmst");
        //        var iVAR_PURC_RECEIVED = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PURC_RECEIVED", cmp));
        //        var iVAR_PPN_IN = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_IN", cmp));
        //        var iVAR_DIFF_CURR_IDR = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_IDR", cmp));
        //        var iVAR_DIFF_CURR_USD = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_USD", cmp));
        //        var iVAR_ROUNDING = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        var iVAR_AP = 0;
        //        if (potype.ToUpper() == "LOCAL")
        //            iVAR_AP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_LOCAL", cmp));
        //        else
        //            iVAR_AP = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_IMPORT", cmp));

        //        var iVAR_APIC_ASSIGNMENT = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_APIC_ASSIGNMENT", cmp));
        //        decimal dTotalImport_IDR = 0;
        //        decimal dTotalImport_USD = 0;
        //        decimal dMRAmt = 0;
        //        decimal dMRAmtIDR = 0;
        //        decimal dMRAmtUSD = 0;
        //        decimal dTotalImportIDR = 0;
        //        decimal dTotalImportUSD = 0;
        //        decimal dTotalImport = 0;
        //        decimal dRound = 0;
        //        decimal dDiffIDR = 0;
        //        decimal dDiffUSD = 0;

        //        if (action == "Approved")
        //        {

        //            dMRAmt = tblMR.Sum(x => (x.apqty * x.mrvalue));
        //            dMRAmtIDR = tblMR.Sum(x => (x.apqty * x.mrvalueidr));
        //            dMRAmtUSD = tblMR.Sum(x => (x.apqty * x.mrvalueusd));

        //            if (potype.ToUpper() == "IMPORT")
        //            {
        //                sNoImport = "APIC-" + ClassFunction.GetServerTime().ToString("yyyy.MM") + "-";
        //                sSql = "SELECT ISNULL(MAX(CAST(RIGHT(apimportno, 6) AS INTEGER)) + 1, 1) AS IDNEW FROM QL_trnapimportmst WHERE cmpcode='" + cmp + "' AND apimportno LIKE '" + sNoImport + "%'";
        //                int sCount = db.Database.SqlQuery<int>(sSql).FirstOrDefault();
        //                string sCounter = "";

        //                for (int i = 0; i < tblImport.Count(); i++)
        //                {
        //                    sCounter = ClassFunction.GenNumberString(sCount + i, int.Parse(NumberCounter));
        //                    sNoImport = sNoImport + sCounter;

        //                    tblImport[i].apimportmstoid = apimportmstoid;
        //                    tblImport[i].apimportno = sNoImport;
        //                    tblImport[i].importvalueidr = tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue;
        //                    tblImport[i].importvalueusd = tblImport[i].importvalue * cRateTmp.GetRateMonthlyUSDValue;
        //                    dTotalImport_IDR += tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue;
        //                    dTotalImport_USD += tblImport[i].importvalue * cRateTmp.GetRateMonthlyUSDValue;
        //                    tblImport[i].importvaluepost = ((tblImport[i].importvalue * cRateTmp.GetRateMonthlyIDRValue) / cRate.GetRateMonthlyIDRValue);
        //                    tblImport[i].rateoid = cRateTmp.GetRateDailyOid;
        //                    tblImport[i].ratetoidr = cRateTmp.GetRateDailyIDRValue;
        //                    tblImport[i].ratetousd = cRateTmp.GetRateDailyUSDValue;
        //                    tblImport[i].rate2oid = cRateTmp.GetRateMonthlyOid;
        //                    tblImport[i].rate2toidr = cRateTmp.GetRateMonthlyIDRValue;
        //                    tblImport[i].rate2tousd = cRateTmp.GetRateMonthlyUSDValue;

        //                    apimportmstoid++;
        //                }

        //                dTotalImportIDR = tblImport.Sum(x => x.importvaluepost);
        //                dTotalImportUSD = tblImport.Sum(x => x.importvalueidr);
        //                dTotalImport = tblImport.Sum(x => x.importvalueusd);

        //            }
        //        }
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                sSql = "UPDATE /*QL_trnapassetmst*/QL_trnbelimst SET apassetmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "', upduser='" + Session["UserID"].ToString() + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid = " + cRate.GetRateDailyOid + ", apassetratetoidr = '" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', apassetratetousd = '" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid = " + cRate.GetRateMonthlyOid + ", apassetrate2toidr = '" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', apassetrate2tousd = '" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "', apassettotalamtidr = apassettotalamt * " + cRate.GetRateMonthlyIDRValue + ", apassettotalamtusd = apassettotalamt * " + cRate.GetRateMonthlyUSDValue + ", apassettotaldiscidr = apassettotaldisc * " + cRate.GetRateMonthlyIDRValue + ", apassettotaldiscusd = apassettotaldisc * " + cRate.GetRateMonthlyUSDValue + ", apassettotaltaxidr = apassettotaltax * " + cRate.GetRateMonthlyIDRValue + ", apassettotaltaxusd = apassettotaltax * " + cRate.GetRateMonthlyUSDValue + ", apassetgrandtotalidr = apassetgrandtotal * " + cRate.GetRateMonthlyIDRValue + ", apassetgrandtotalusd = apassetgrandtotal * " + cRate.GetRateMonthlyUSDValue + ", apassettotalimportidr = " + dTotalImport_IDR + ", apassettotalimportusd = " + dTotalImport_USD;
        //                }
        //                sSql += " WHERE cmpcode='" + cmp + "' AND apassetmststatus='In Approval' AND apassetmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnapassetmst*/QL_trnbelimst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnmrassetdtl SET mrassetdtlres1='' WHERE cmpcode='" + cmp + "' AND mrassetdtloid IN (SELECT mrassetdtloid FROM QL_trnapassetdtl WHERE cmpcode='" + cmp + "' AND apassetmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_trnmrassetmst SET mrassetmstres1='' WHERE cmpcode='" + cmp + "' AND mrassetmstoid IN (SELECT mrassetmstoid FROM QL_trnapassetdtl WHERE cmpcode='" + cmp + "' AND apassetmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    // Insert QL_conap                        
        //                    db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "/*QL_trnapassetmst*/QL_trnbelimst", id, 0, tblmst.suppoid, iVAR_AP, "Post", "APFA", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblmst.apassetgrandtotal, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblmst.apassetgrandtotal * cRate.GetRateMonthlyIDRValue, 0, tblmst.apassetgrandtotal * cRate.GetRateMonthlyIDRValue, 0, 0, ""));
        //                    db.SaveChanges();


        //                    if (potype.ToUpper() == "IMPORT")
        //                    {
        //                        // Insert Import
        //                        dTotalImportIDR = tblImport.Sum(x => x.importvaluepost);
        //                        dTotalImportUSD = tblImport.Sum(x => x.importvalueidr);
        //                        dTotalImport = tblImport.Sum(x => x.importvalueusd);

        //                        QL_trnapimportmst tbltmpImp;

        //                        for (int i = 0; i < tblImport.Count; i++)
        //                        {
        //                            tbltmpImp = new QL_trnapimportmst();
        //                            tbltmpImp.cmpcode = cmp;
        //                            tbltmpImp.apimportmstoid = apimportmstoid++;
        //                            tbltmpImp.periodacctg = sPeriod;
        //                            tbltmpImp.apimportdate = servertime;
        //                            tbltmpImp.apimportno = tbltmpImp.apimportno;
        //                            tbltmpImp.suppoid = tblImport[i].suppoid;
        //                            tbltmpImp.apimportpaytypeoid = tblmst.apassetpaytypeoid;
        //                            tbltmpImp.curroid = tblImport[i].curroid;
        //                            tbltmpImp.rateoid = tblImport[i].rateoid;
        //                            tbltmpImp.apimportratetoidr = tblImport[i].ratetoidr.ToString();
        //                            tbltmpImp.apimportratetousd = tblImport[i].ratetousd.ToString();
        //                            tbltmpImp.rate2oid = tblImport[i].rate2oid;
        //                            tbltmpImp.apimportrate2toidr = tblImport[i].rate2toidr.ToString();
        //                            tbltmpImp.apimportrate2tousd = tblImport[i].rate2tousd.ToString();
        //                            tbltmpImp.apimporttotalamt = tblImport[i].importvalue;
        //                            tbltmpImp.apimporttotalamtidr = tblImport[i].importvalueidr;
        //                            tbltmpImp.apimporttotalamtusd = tblImport[i].importvalueusd;
        //                            tbltmpImp.apimporttotaldisc = 0;
        //                            tbltmpImp.apimporttotaldiscidr = 0;
        //                            tbltmpImp.apimporttotaldiscusd = 0;
        //                            tbltmpImp.apimporttotaltax = 0;
        //                            tbltmpImp.apimporttotaltaxidr = 0;
        //                            tbltmpImp.apimporttotaltaxusd = 0;
        //                            tbltmpImp.apimportgrandtotal = tblImport[i].importvalue;
        //                            tbltmpImp.apimportgrandtotalidr = tblImport[i].importvalueidr;
        //                            tbltmpImp.apimportgrandtotalusd = tblImport[i].importvalueusd;
        //                            tbltmpImp.apimportmstnote = "";
        //                            tbltmpImp.apimportmststatus = "Approved";
        //                            tbltmpImp.approvaluser = Session["UserID"].ToString();
        //                            tbltmpImp.approvaldatetime = servertime;
        //                            tbltmpImp.createuser = Session["UserID"].ToString();
        //                            tbltmpImp.createtime = servertime;
        //                            tbltmpImp.upduser = Session["UserID"].ToString();
        //                            tbltmpImp.updtime = servertime;
        //                            tbltmpImp.apimportsupptotal = 0;
        //                            tbltmpImp.apimportdatetakegiro = tblmst.apassetdatetakegiro;
        //                            tbltmpImp.importdtloid = tblImport[i].importdtloid;
        //                            tbltmpImp.apreftype = "/*QL_trnapassetmst*/QL_trnbelimst";
        //                            tbltmpImp.aprefmstoid = id;


        //                            db.QL_trnapimportmst.Add(tbltmpImp);
        //                            db.SaveChanges();

        //                            // Insert QL_conap Import                    
        //                            db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "QL_trnapimportmst", apimportmstoid, 0, tblImport[i].suppoid, tblImport[i].importacctgoid, "Post", "APIC", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblImport[i].importvalue, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, 0, tblImport[i].importvalueusd, 0, 0, ""));

        //                        }

        //                        sSql = "UPDATE QL_mstoid SET lastoid=" + (apimportmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnapimportmst'";
        //                        db.Database.ExecuteSqlCommand(sSql);
        //                        db.SaveChanges();

        //                    }
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conapoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conap'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/P FA |No. " + transno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    // Insert QL_trngldtl
        //                    dRound = tblmst.apassettotalamt + dTotalImport - dMRAmt;
        //                    dDiffIDR = (tblmst.apassettotalamt * cRate.GetRateMonthlyIDRValue) + dTotalImportIDR - dMRAmtIDR;
        //                    dDiffUSD = (tblmst.apassettotalamt * cRate.GetRateMonthlyUSDValue) + dTotalImportUSD - dMRAmtUSD;
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", dMRAmt, transno, "A/P FA |No. " + transno + tblmst.apassetmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dMRAmtIDR, dMRAmtUSD, "/*QL_trnapassetmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    decimal totaltax = Convert.ToDecimal(tblmst.apassettotaltax);

        //                    if (tblmst.apassettotaltax > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PPN_IN, "D", totaltax, transno, "A/P FA | Note. PPN | Penerima." + suppname, "Post", Session["UserID"].ToString(), servertime, (totaltax * cRate.GetRateMonthlyIDRValue), (totaltax * cRate.GetRateMonthlyUSDValue), "/*QL_trnapassetmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dRound > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_ROUNDING, "D", dRound, transno, "A/P FA |No. " + transno + tblmst.apassetmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "/*QL_trnapassetmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffIDR > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_IDR, "D", 0, transno, "A/P FA |No. " + transno + tblmst.apassetmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dDiffIDR, 0, "/*QL_trnapassetmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffUSD > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_USD, "D", 0, transno, "A/P FA |No. " + transno + tblmst.apassetmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, dDiffUSD, "/*QL_trnapassetmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_AP, "C", tblmst.apassetgrandtotal, transno, "A/P FA |No. " + transno + tblmst.apassetmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, (tblmst.apassetgrandtotal * cRate.GetRateMonthlyIDRValue), (tblmst.apassetgrandtotal * cRate.GetRateMonthlyUSDValue), "/*QL_trnapassetmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    if (dTotalImport > 0 || dTotalImportIDR > 0 || dTotalImportUSD > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_APIC_ASSIGNMENT, "C", dTotalImport, transno, "A/P FA |No. " + transno + tblmst.apassetmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, dTotalImportIDR, dTotalImportUSD, "/*QL_trnapassetmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dRound < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_ROUNDING, "C", -dRound, transno, "A/P FA |No. " + transno + tblmst.apassetmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "/*QL_trnapassetmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffIDR < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_IDR, "C", 0, transno, "A/P FA |No. " + transno + tblmst.apassetmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, -dDiffIDR, 0, "/*QL_trnapassetmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    if (dDiffUSD < 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_DIFF_CURR_USD, "C", 0, transno, "A/P FA |No. " + transno + tblmst.apassetmstnote + " | Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, 0, -dDiffUSD, "/*QL_trnapassetmst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    glmstoid++;

        //                    if (tblImport != null)
        //                    {

        //                        for (int i = 0; i < tblImport.Count; i++)
        //                        {
        //                            // Insert QL_trnglmst Import
        //                            db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblImport[i].rateoid, tblImport[i].rate2oid, tblImport[i].ratetoidr, tblImport[i].rate2toidr, tblImport[i].ratetousd, tblImport[i].rate2tousd));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_APIC_ASSIGNMENT, "D", tblImport[i].importvalue, tblImport[i].apimportno, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, tblImport[i].importvalueusd, "QL_trnapimportmst " + tblImport[i].apimportmstoid.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, tblImport[i].importacctgoid, "C", tblImport[i].importvalue, tblImport[i].apimportno, "A/P Import|Penerima. " + suppname + "| No. " + transno + "|PenerimaIC. " + tblImport[i].suppic, "Post", Session["UserID"].ToString(), servertime, tblImport[i].importvalueidr, tblImport[i].importvalueusd, "QL_trnapimportmst " + tblImport[i].apimportmstoid.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            glmstoid++;
        //                        }
        //                    }

        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalAPService(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    var servertime = ClassFunction.GetServerTime();
        //    var acctgoid_ap = 0; var acctgoid_ppn = 0; var acctgoid_round = 0; var acctgoid_idr = 0; var acctgoid_usd = 0;
        //    var tbl = db.QL_trnapservicemst.Where(x => x.cmpcode == cmp && x.apservicemstoid == id && x.apservicemststatus == "In Approval").First();
        //    if (tbl == null)
        //    {
        //        error = "Please select data for approval!";
        //        return;
        //    }
        //    List<QL_trnapservicedtl> tbldtl = db.QL_trnapservicedtl.Where(x => x.cmpcode == cmp && x.apservicemstoid == id).ToList();
        //    if (tbldtl == null || tbldtl.Count == 0)
        //    {
        //        error = "Please select data for approval!";
        //        return;
        //    }
        //    var cRate = new ClassRate();
        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tbl.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //        {
        //            error = cRate.GetRateDailyLastError;
        //            return;
        //        }
        //        if (cRate.GetRateMonthlyLastError != "")
        //        {
        //            error = cRate.GetRateMonthlyLastError;
        //            return;
        //        }
        //        if (!ClassFunction.IsInterfaceExists("VAR_PPN_IN", cmp))
        //        {
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_IN");
        //            return;
        //        }
        //        else
        //            acctgoid_ppn = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_IN", cmp));
        //        if (!ClassFunction.IsInterfaceExists("VAR_AP_LOCAL", cmp))
        //        {
        //            error = ClassFunction.GetInterfaceWarning("VAR_AP_LOCAL");
        //            return;
        //        }
        //        else
        //            acctgoid_ap = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_LOCAL", cmp));
        //        if (!ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //        {
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //            return;
        //        }
        //        else
        //            acctgoid_round = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));
        //        if (!ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_IDR", cmp))
        //        {
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_IDR");
        //            return;
        //        }
        //        else
        //            acctgoid_idr = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_IDR", cmp));
        //        if (!ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_USD", cmp))
        //        {
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_USD");
        //            return;
        //        }
        //        else
        //            acctgoid_usd = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_DIFF_CURR_USD", cmp));
        //    }
        //    var conapoid = ClassFunction.GenerateID("QL_CONAP");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var periodacctg = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    DateTime duedate = db.Database.SqlQuery<DateTime>("SELECT DATEADD(day, (CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END), apservicedate) [Due Date] FROM QL_trnapservicemst ap INNER JOIN QL_mstgen g ON g.genoid=ap.apservicepaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND apservicemstoid=" + id).FirstOrDefault();
        //    var suppname = db.QL_mstsupp.Where(u => u.suppoid == tbl.suppoid).First().suppname;

        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            tbl.apservicemststatus = action;
        //            tbl.upduser = Session["UserID"].ToString();
        //            tbl.updtime = servertime;
        //            tbl.approvaluser = Session["UserID"].ToString();
        //            tbl.approvaldatetime = servertime;
        //            if (action == "Approved")
        //            {
        //                tbl.rateoid = cRate.GetRateDailyOid;
        //                tbl.apserviceratetoidr = cRate.GetRateDailyIDRValue.ToString();
        //                tbl.apserviceratetousd = cRate.GetRateDailyUSDValue.ToString();
        //                tbl.rate2oid = cRate.GetRateMonthlyOid;
        //                tbl.apservicerate2toidr = cRate.GetRateMonthlyIDRValue.ToString();
        //                tbl.apservicerate2tousd = cRate.GetRateMonthlyUSDValue.ToString();
        //                tbl.apservicetotalamtidr = tbl.apservicetotalamtidr * cRate.GetRateMonthlyIDRValue;
        //                tbl.apservicetotalamtusd = tbl.apservicetotalamtidr * cRate.GetRateMonthlyUSDValue;
        //                tbl.apservicetotaltaxidr = tbl.apservicetotaltax * cRate.GetRateMonthlyIDRValue;
        //                tbl.apservicetotaltaxusd = tbl.apservicetotaltax * cRate.GetRateMonthlyUSDValue;
        //                tbl.apservicegrandtotalidr = tbl.apservicegrandtotal * cRate.GetRateMonthlyIDRValue;
        //                tbl.apservicegrandtotalusd = tbl.apservicegrandtotal * cRate.GetRateMonthlyUSDValue;
        //            }
        //            db.Entry(tbl).State = EntityState.Modified;

        //            sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnapservicemst' AND oid=" + id;
        //            db.Database.ExecuteSqlCommand(sSql);

        //            if (action == "Rejected")
        //            {
        //                sSql = "UPDATE QL_trnmrservicedtl SET mrservicedtlstatus='' WHERE cmpcode='" + cmp + "' AND mrservicedtloid IN (SELECT mrservicedtloid FROM QL_trnapservicedtl WHERE cmpcode='" + cmp + "' AND apservicemstoid=" + id + ") AND mrservicemstoid IN (SELECT mrservicemstoid FROM QL_trnapservicedtl WHERE cmpcode='" + cmp + "' AND apservicemstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                sSql = "UPDATE QL_trnmrservicemst SET mrservicemststatus='Post' WHERE cmpcode='" + cmp + "' AND mrservicemstoid IN (SELECT mrservicemstoid FROM QL_trnapservicedtl WHERE cmpcode='" + cmp + "' AND apservicemstoid=" + id + ")";
        //                db.Database.ExecuteSqlCommand(sSql);
        //            }
        //            else if (action == "Approved")
        //            {
        //                // Insert QL_conap                        
        //                db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "QL_trnapservicemst", id, 0, tbl.suppoid, acctgoid_ap, "Post", "APSVC", servertime, periodacctg, 0, new DateTime(1900, 01, 01), "", 0, duedate, tbl.apservicegrandtotal, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tbl.apservicegrandtotal * cRate.GetRateMonthlyIDRValue, 0, tbl.apservicegrandtotal * cRate.GetRateMonthlyIDRValue, 0, 0, ""));
        //                sSql = "UPDATE QL_mstoid SET lastoid=" + (conapoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_CONAP'";
        //                db.Database.ExecuteSqlCommand(sSql);

        //                // Insert QL_trnglmst
        //                db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), periodacctg, "A/P Service|No. " + tbl.apserviceno, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));

        //                // Insert QL_trngldtl
        //                var glseq = 1;
        //                decimal dTotalService = 0.0000M; decimal dTotalServiceIDR = 0.0000M; decimal dTotalServiceUSD = 0.000000M;
        //                for (int i = 0; i < tbldtl.Count; i++)
        //                {
        //                    var xxx = tbldtl[i].serviceoid;
        //                    var acctgoid_svc = db.QL_mstservice.Where(s => s.serviceoid == xxx).First().serviceacctgoid;
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, acctgoid_svc, "D", Math.Round(tbldtl[i].apservicedtlnetto, 4), tbl.apserviceno, "A/P Service|Note. " + tbldtl[i].apservicedtlnote + "|Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, Math.Round(tbldtl[i].apservicedtlnetto * cRate.GetRateMonthlyIDRValue, 4), Math.Round(tbldtl[i].apservicedtlnetto * cRate.GetRateMonthlyUSDValue, 6), "QL_trnapservicemst " + id.ToString(), null, null, null, 0));
        //                    dTotalService += Math.Round(tbldtl[i].apservicedtlnetto, 4);
        //                    dTotalServiceIDR += Math.Round(tbldtl[i].apservicedtlnetto * cRate.GetRateMonthlyIDRValue, 4);
        //                    dTotalServiceUSD += Math.Round(tbldtl[i].apservicedtlnetto * cRate.GetRateMonthlyUSDValue, 6);
        //                }

        //                if (tbl.apservicetotaltax > 0)
        //                {
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, acctgoid_ppn, "D", Math.Round((decimal)tbl.apservicetotaltax, 4), tbl.apserviceno, "A/P Service| Note. PPN | Penerima." + suppname, "Post", Session["UserID"].ToString(), servertime, Math.Round((decimal)tbl.apservicetotaltax * cRate.GetRateMonthlyIDRValue, 4), Math.Round((decimal)tbl.apservicetotaltax * cRate.GetRateMonthlyUSDValue, 6), "QL_trnapservicemst " + id.ToString(), null, null, null, 0));
        //                }

        //                decimal dSelisih = dTotalService + Math.Round((decimal)tbl.apservicetotaltax, 4) - Math.Round(tbl.apservicegrandtotal, 4);
        //                if (dSelisih != 0)
        //                {
        //                    var dbcr = "D";
        //                    if (dSelisih < 0) dbcr = "C";
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, acctgoid_round, dbcr, Math.Abs(dSelisih), tbl.apserviceno, "A/P Service| Note. Selisih | Penerima." + suppname, "Post", Session["UserID"].ToString(), servertime, 0, 0, "QL_trnapservicemst " + id.ToString(), null, null, null, 0));
        //                }
        //                decimal dSelisihIDR = dTotalServiceIDR + Math.Round((decimal)tbl.apservicetotaltax * cRate.GetRateMonthlyIDRValue, 4) - Math.Round(tbl.apservicegrandtotal * cRate.GetRateMonthlyIDRValue, 4);
        //                if (dSelisihIDR != 0)
        //                {
        //                    var dbcr = "D";
        //                    if (dSelisihIDR < 0) dbcr = "C";
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, acctgoid_idr, dbcr, 0, tbl.apserviceno, "A/P Service| Note. Selisih IDR | Penerima." + suppname, "Post", Session["UserID"].ToString(), servertime, Math.Abs(dSelisihIDR), 0, "QL_trnapservicemst " + id.ToString(), null, null, null, 0));
        //                }
        //                decimal dSelisihUSD = dTotalServiceUSD + Math.Round((decimal)tbl.apservicetotaltax * cRate.GetRateMonthlyUSDValue, 6) - Math.Round(tbl.apservicegrandtotal * cRate.GetRateMonthlyUSDValue, 6);
        //                if (dSelisihUSD != 0)
        //                {
        //                    var dbcr = "D";
        //                    if (dSelisihUSD < 0) dbcr = "C";
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, acctgoid_usd, dbcr, 0, tbl.apserviceno, "A/P Service| Note. Selisih USD | Penerima." + suppname, "Post", Session["UserID"].ToString(), servertime, 0, Math.Abs(dSelisihUSD), "QL_trnapservicemst " + id.ToString(), null, null, null, 0));
        //                }

        //                db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, acctgoid_ap, "C", Math.Round(tbl.apservicegrandtotal, 4), tbl.apserviceno, "A/P Service|Note. " + tbl.apservicemstnote + "|Penerima. " + suppname, "Post", Session["UserID"].ToString(), servertime, Math.Round(tbl.apservicegrandtotal * cRate.GetRateMonthlyIDRValue, 4), Math.Round(tbl.apservicegrandtotal * cRate.GetRateMonthlyUSDValue, 6), "QL_trnapservicemst " + id.ToString(), null, null, null, 0));

        //                sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_TRNGLMST'";
        //                db.Database.ExecuteSqlCommand(sSql);
        //                sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_TRNGLDTL'";
        //                db.Database.ExecuteSqlCommand(sSql);
        //            }

        //            db.SaveChanges();
        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //private void ApprovalAPOther(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnapothermst*/QL_trnbelimst tblmst;
        //    tblmst = db./*QL_trnapothermst*/QL_trnbelimst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var cRateTmp = new ClassRate();
        //    DateTime duedate = db.Database.SqlQuery<DateTime>("Select DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apotherdate) AS [Due Date] FROM /*QL_trnapothermst*/QL_trnbelimst ap INNER JOIN QL_mstgen g ON g.genoid=ap.apotherpaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND apothermstoid=" + id).FirstOrDefault();
        //    var potype = db.QL_mstsupp.Where(x => x.suppoid == tblmst.suppoid).Select(x => x.supptype).FirstOrDefault();
        //    var suppname = db.QL_mstsupp.Where(x => x.suppoid == tblmst.suppoid).Select(x => x.suppname).FirstOrDefault();
        //    var sGLnote = ClassFunction.Left(suppname + " | " + (tblmst.apotherfaktur == null ? tblmst.apotherfaktur : "") + " | " + (tblmst.apothermstres3 == null ? tblmst.apothermstres3 : "") + " | " + (tblmst.apothermstnote == null ? tblmst.apothermstnote : ""), 200);
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
          
        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, ClassFunction.GetServerTime().ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_IN", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_IN");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_IDR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_IDR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_USD", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_USD");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var conapoid = ClassFunction.GenerateID("QL_CONAP");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var iVAR_PURC_RECEIVED = tblmst.apbeliacctgoid;
        //        var iVAR_PPN_IN = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_IN", cmp));
        //        var iVAR_AP = tblmst.apacctgoid; 
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                sSql = "UPDATE /*QL_trnapothermst*/QL_trnbelimst SET apothermststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "', upduser='" + Session["UserID"].ToString() + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid = " + cRate.GetRateDailyOid + ", apotherratetoidr = '" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', apotherratetousd = '" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid = " + cRate.GetRateMonthlyOid + ", apotherrate2toidr = '" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', apotherrate2tousd = '" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "', apothertotalamtidr = apothertotalamt * " + cRate.GetRateMonthlyIDRValue + ", apothertotalamtusd = apothertotalamt * " + cRate.GetRateMonthlyUSDValue + ", apothertotaldiscidr = apothertotaldisc * " + cRate.GetRateMonthlyIDRValue + ", apothertotaldiscusd = apothertotaldisc * " + cRate.GetRateMonthlyUSDValue + ", apothertotaltaxidr = apothertotaltax * " + cRate.GetRateMonthlyIDRValue + ", apothertotaltaxusd = apothertotaltax * " + cRate.GetRateMonthlyUSDValue + ", apothergrandtotalidr = apothergrandtotal * " + cRate.GetRateMonthlyIDRValue + ", apothergrandtotalusd = apothergrandtotal * " + cRate.GetRateMonthlyUSDValue;
        //                }
        //                sSql += " WHERE cmpcode='" + cmp + "' AND apothermststatus='In Approval' AND apothermstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();


        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnapothermst*/QL_trnbelimst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Approved")
        //                {
        //                    // Insert QL_conap                        
        //                    db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid++, "/*QL_trnapothermst*/QL_trnbelimst", id, 0, tblmst.suppoid, iVAR_AP, "Post", "APLL", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblmst.apothergrandtotal, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblmst.apothergrandtotal * cRate.GetRateMonthlyIDRValue, 0, tblmst.apothergrandtotal * cRate.GetRateMonthlyIDRValue, 0, 0, ""));
        //                    db.SaveChanges();


        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conapoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conap'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, sGLnote, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    // Insert QL_trngldtl
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", tblmst.apothertotalamt, transno, sGLnote, "Post", Session["UserID"].ToString(), servertime, (tblmst.apothertotalamt * cRate.GetRateMonthlyIDRValue), (tblmst.apothertotalamt * cRate.GetRateMonthlyUSDValue), "/*QL_trnapothermst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    decimal totaltax = Convert.ToDecimal(tblmst.apothertotaltax);

        //                    if (tblmst.apothertotaltax > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PPN_IN, "D", totaltax, transno, sGLnote, "Post", Session["UserID"].ToString(), servertime, (totaltax * cRate.GetRateMonthlyIDRValue), (totaltax * cRate.GetRateMonthlyUSDValue), "/*QL_trnapothermst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_AP, "C", tblmst.apothergrandtotal, transno, sGLnote, "Post", Session["UserID"].ToString(), servertime, (tblmst.apothergrandtotal * cRate.GetRateMonthlyIDRValue), (tblmst.apothergrandtotal * cRate.GetRateMonthlyUSDValue), "/*QL_trnapothermst*/QL_trnbelimst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

          
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalAPCashBank(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnapcashbankmst*/QL_trncashbankmst tblmst;
        //    tblmst = db./*QL_trnapcashbankmst*/QL_trncashbankmst.Find(cmp, id);
        //    transno = tblmst.apcashbankno;

        //    var cRate = new ClassRate();
        //    var cRateTmp = new ClassRate();
        //    DateTime duedate = db.Database.SqlQuery<DateTime>("Select DATEADD(day,(CASE g.gendesc WHEN '-' THEN 0 WHEN 'ROG' THEN 0 ELSE CAST(g.gendesc AS INT) END),apcashbankdate) AS [Due Date] FROM /*QL_trnapcashbankmst*/QL_trncashbankmst ap INNER JOIN QL_mstgen g ON g.genoid=ap.apcashbankpaytypeoid AND g.gengroup='PAYMENT TYPE' WHERE ap.cmpcode='" + cmp + "' AND apcashbankmstoid=" + id).FirstOrDefault();
        //    var potype = db.QL_mstsupp.Where(x => x.suppoid == tblmst.suppoid).Select(x => x.supptype).FirstOrDefault();
        //    var suppname = db.QL_mstsupp.Where(x => x.suppoid == tblmst.suppoid).Select(x => x.suppname).FirstOrDefault();
        //    var sGLnote = tblmst.apcashbankmstnote;
        //    var servertime = ClassFunction.GetServerTime();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, tblmst.apcashbankdate.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_IN", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_IN");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_IDR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_IDR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_DIFF_CURR_USD", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_DIFF_CURR_USD");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var conapoid = ClassFunction.GenerateID("QL_CONAP");
        //        var cashbankoid = ClassFunction.GenerateID("QL_trncashbankmst");
        //        var glmstoid = ClassFunction.GenerateID("QL_trnglmst");
        //        var gldtloid = ClassFunction.GenerateID("QL_trngldtl");
        //        var iVAR_PURC_RECEIVED = tblmst.apbeliacctgoid;
        //        var iVAR_PPN_IN = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_IN", cmp));
        //        var iVAR_AP = tblmst.apacctgoid;
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                sSql = "UPDATE /*QL_trnapcashbankmst*/QL_trncashbankmst SET apcashbankmststatus='" + action + "', approvaluser='" + Session["UserID"].ToString() + "', approvaldatetime='" + servertime + "', upduser='" + Session["UserID"].ToString() + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid = " + cRate.GetRateDailyOid + ", apcashbankratetoidr = '" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', apcashbankratetousd = '" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid = " + cRate.GetRateMonthlyOid + ", apcashbankrate2toidr = '" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', apcashbankrate2tousd = '" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "', apcashbanktotalamtidr = apcashbanktotalamt * " + cRate.GetRateMonthlyIDRValue + ", apcashbanktotalamtusd = apcashbanktotalamt * " + cRate.GetRateMonthlyUSDValue + ", apcashbanktotaldiscidr = apcashbanktotaldisc * " + cRate.GetRateMonthlyIDRValue + ", apcashbanktotaldiscusd = apcashbanktotaldisc * " + cRate.GetRateMonthlyUSDValue + ", apcashbanktotaltaxidr = apcashbanktotaltax * " + cRate.GetRateMonthlyIDRValue + ", apcashbanktotaltaxusd = apcashbanktotaltax * " + cRate.GetRateMonthlyUSDValue + ", apcashbankgrandtotalidr = apcashbankgrandtotal * " + cRate.GetRateMonthlyIDRValue + ", apcashbankgrandtotalusd = apcashbankgrandtotal * " + cRate.GetRateMonthlyUSDValue;
        //                }
        //                sSql += " WHERE cmpcode='" + cmp + "' AND apcashbankmststatus='In Approval' AND apcashbankmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();


        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnapcashbankmst*/QL_trncashbankmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Approved")
        //                {
        //                    sSql = "UPDATE QL_trncashbankmst SET cashbankstatus='Post', upduser='" + Session["UserID"].ToString() + "', updtime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND cashbankoid=" + tblmst.cashbankoid;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    // Insert QL_conap                        
        //                    db.QL_conap.Add(ClassFunction.InsertConAP(cmp, conapoid, "/*QL_trnapcashbankmst*/QL_trncashbankmst", id, 0, tblmst.suppoid, iVAR_AP, "Post", "APCB", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, duedate, tblmst.apcashbankgrandtotal, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, tblmst.apcashbankgrandtotal * cRate.GetRateMonthlyIDRValue, 0, tblmst.apcashbankgrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
        //                    db.SaveChanges();

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, sGLnote, "Post", servertime, Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    // Insert QL_trngldtl
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PURC_RECEIVED, "D", tblmst.apcashbanktotalamt, transno, sGLnote, "Post", Session["UserID"].ToString(), servertime, (tblmst.apcashbanktotalamt * cRate.GetRateMonthlyIDRValue), (tblmst.apcashbanktotalamt * cRate.GetRateMonthlyUSDValue), "/*QL_trnapcashbankmst*/QL_trncashbankmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    decimal totaltax = Convert.ToDecimal(tblmst.apcashbanktotaltax);

        //                    if (tblmst.apcashbanktotaltax > 0)
        //                    {
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_PPN_IN, "D", totaltax, transno, sGLnote, "Post", Session["UserID"].ToString(), servertime, (totaltax * cRate.GetRateMonthlyIDRValue), (totaltax * cRate.GetRateMonthlyUSDValue), "/*QL_trnapcashbankmst*/QL_trncashbankmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                    }

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iVAR_AP, "C", tblmst.apcashbankgrandtotal, transno, sGLnote, "Post", Session["UserID"].ToString(), servertime, (tblmst.apcashbankgrandtotal * cRate.GetRateMonthlyIDRValue), (tblmst.apcashbankgrandtotal * cRate.GetRateMonthlyUSDValue), "/*QL_trnapcashbankmst*/QL_trncashbankmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + conapoid + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conap'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + glmstoid + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }

        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //#endregion

        //#region Approval Sales Order

        //private void ApprovalSORaw(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsorawmst tblmst = db.QL_trnsorawmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iPriceOid = ClassFunction.GenerateID("QL_MSTMATRAWPRICE");
        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    var tbldtl = (from sod in db.QL_trnsorawdtl where sod.cmpcode == cmp && sod.sorawmstoid == id select new { sod.matrawoid, sod.sorawqty, sod.sorawprice, sod.sorawdtlamt }).ToList();
        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //    } 

        //    if (error == "")
        //    {
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update SO
        //                sSql = "UPDATE QL_trnsorawmst SET sorawno='" + transno + "', sorawmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid;
        //                }
        //                sSql += " WHERE sorawmststatus='In Approval' AND sorawmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsorawmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        if (tbldtl.Count() > 0)
        //                        {
        //                            for (var i = 0; i < tbldtl.Count(); i++)
        //                            {
        //                                var matoid = tbldtl[i].matrawoid;
        //                                QL_mstmatrawprice tblMatPrice = db.QL_mstmatrawprice.Where(x => x.cmpcode == cmp && x.matrawoid == matoid && x.refoid == custoid && x.refname == "CUSTOMER" && x.curroid == curroid).FirstOrDefault();

        //                                if (tblMatPrice != null)
        //                                {
        //                                    tblMatPrice.totalsalesqty = (tblMatPrice.totalsalesqty + tbldtl[i].sorawqty);
        //                                    tblMatPrice.avgsalesprice = ((tblMatPrice.avgsalesprice * tblMatPrice.totalsalesqty) + tbldtl[i].sorawdtlamt) / (tblMatPrice.totalsalesqty + tbldtl[i].sorawqty);
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].sorawprice;
        //                                    tblMatPrice.lasttrans = "QL_trnsorawmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.sorawdate;
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                                    db.Entry(tblMatPrice).State = EntityState.Modified;
        //                                    db.SaveChanges();
        //                                }
        //                                else
        //                                {
        //                                    tblMatPrice = new QL_mstmatrawprice();
        //                                    tblMatPrice.cmpcode = cmp;
        //                                    tblMatPrice.matrawpriceoid = iPriceOid;
        //                                    tblMatPrice.matrawoid = tbldtl[i].matrawoid;
        //                                    tblMatPrice.refoid = tblmst.custoid;
        //                                    tblMatPrice.refname = "CUSTOMER";
        //                                    tblMatPrice.totalsalesqty = tbldtl[i].sorawqty;
        //                                    tblMatPrice.totalpurchaseqty = 0;
        //                                    tblMatPrice.avgsalesprice = tbldtl[i].sorawprice;
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].sorawprice;
        //                                    tblMatPrice.avgpurchaseprice = 0;
        //                                    tblMatPrice.lastpurchaseprice = 0;
        //                                    tblMatPrice.lasttrans = "QL_trnsorawmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.sorawdate;
        //                                    tblMatPrice.note = "";
        //                                    tblMatPrice.res1 = "";
        //                                    tblMatPrice.res2 = "";
        //                                    tblMatPrice.res3 = "";
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.curroid = tblmst.curroid;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                                    db.QL_mstmatrawprice.Add(tblMatPrice);
        //                                    db.SaveChanges();
        //                                }

        //                                iPriceOid++;
        //                            }

        //                            sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTMATRAWPRICE'";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSOGen(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsogenmst tblmst = db.QL_trnsogenmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iPriceOid = ClassFunction.GenerateID("QL_MSTMATGENPRICE");
        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    var tbldtl = (from sod in db.QL_trnsogendtl where sod.cmpcode == cmp && sod.sogenmstoid == id select new { sod.matgenoid, sod.sogenqty, sod.sogenprice, sod.sogendtlamt }).ToList();
        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //    }

        //    if (error == "")
        //    {
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update SO
        //                sSql = "UPDATE QL_trnsogenmst SET sogenno='" + transno + "', sogenmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid;
        //                }
        //                sSql += " WHERE sogenmststatus='In Approval' AND sogenmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsogenmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        if (tbldtl.Count() > 0)
        //                        {
        //                            for (var i = 0; i < tbldtl.Count(); i++)
        //                            {
        //                                var matoid = tbldtl[i].matgenoid;
        //                                QL_mstmatgenprice tblMatPrice = db.QL_mstmatgenprice.Where(x => x.cmpcode == cmp && x.matgenoid == matoid && x.refoid == custoid && x.refname == "CUSTOMER" && x.curroid == curroid).FirstOrDefault();

        //                                if (tblMatPrice != null)
        //                                {
        //                                    tblMatPrice.totalsalesqty = (tblMatPrice.totalsalesqty + tbldtl[i].sogenqty);
        //                                    tblMatPrice.avgsalesprice = ((tblMatPrice.avgsalesprice * tblMatPrice.totalsalesqty) + tbldtl[i].sogendtlamt) / (tblMatPrice.totalsalesqty + tbldtl[i].sogenqty);
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].sogenprice;
        //                                    tblMatPrice.lasttrans = "QL_trnsogenmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.sogendate;
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                                    db.Entry(tblMatPrice).State = EntityState.Modified;
        //                                    db.SaveChanges();
        //                                }
        //                                else
        //                                {
        //                                    tblMatPrice = new QL_mstmatgenprice();
        //                                    tblMatPrice.cmpcode = cmp;
        //                                    tblMatPrice.matgenpriceoid = iPriceOid;
        //                                    tblMatPrice.matgenoid = tbldtl[i].matgenoid;
        //                                    tblMatPrice.refoid = tblmst.custoid;
        //                                    tblMatPrice.refname = "CUSTOMER";
        //                                    tblMatPrice.totalsalesqty = tbldtl[i].sogenqty;
        //                                    tblMatPrice.totalpurchaseqty = 0;
        //                                    tblMatPrice.avgsalesprice = tbldtl[i].sogenprice;
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].sogenprice;
        //                                    tblMatPrice.avgpurchaseprice = 0;
        //                                    tblMatPrice.lastpurchaseprice = 0;
        //                                    tblMatPrice.lasttrans = "QL_trnsogenmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.sogendate;
        //                                    tblMatPrice.note = "";
        //                                    tblMatPrice.res1 = "";
        //                                    tblMatPrice.res2 = "";
        //                                    tblMatPrice.res3 = "";
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.curroid = tblmst.curroid;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                                    db.QL_mstmatgenprice.Add(tblMatPrice);
        //                                    db.SaveChanges();
        //                                }

        //                                iPriceOid++;
        //                            }

        //                            sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTMATGENPRICE'";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSOSP(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsospmst tblmst = db.QL_trnsospmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iPriceOid = ClassFunction.GenerateID("QL_MSTSPAREPARTPRICE");
        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    var tbldtl = (from sod in db.QL_trnsospdtl where sod.cmpcode == cmp && sod.sospmstoid == id select new { sod.sparepartoid, sod.sospqty, sod.sospprice, sod.sospdtlamt }).ToList();
        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //    }

        //    if (error == "")
        //    {
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update SO
        //                sSql = "UPDATE QL_trnsospmst SET sospno='" + transno + "', sospmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid;
        //                }
        //                sSql += " WHERE sospmststatus='In Approval' AND sospmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsospmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        if (tbldtl.Count() > 0)
        //                        {
        //                            for (var i = 0; i < tbldtl.Count(); i++)
        //                            {
        //                                var matoid = tbldtl[i].sparepartoid;
        //                                QL_mstsparepartprice tblMatPrice = db.QL_mstsparepartprice.Where(x => x.cmpcode == cmp && x.sparepartoid == matoid && x.refoid == custoid && x.refname == "CUSTOMER" && x.curroid == curroid).FirstOrDefault();

        //                                if (tblMatPrice != null)
        //                                {
        //                                    tblMatPrice.totalsalesqty = (tblMatPrice.totalsalesqty + tbldtl[i].sospqty);
        //                                    tblMatPrice.avgsalesprice = ((tblMatPrice.avgsalesprice * tblMatPrice.totalsalesqty) + tbldtl[i].sospdtlamt) / (tblMatPrice.totalsalesqty + tbldtl[i].sospqty);
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].sospprice;
        //                                    tblMatPrice.lasttrans = "QL_trnsospmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.sospdate;
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                                    db.Entry(tblMatPrice).State = EntityState.Modified;
        //                                    db.SaveChanges();
        //                                }
        //                                else
        //                                {
        //                                    tblMatPrice = new QL_mstsparepartprice();
        //                                    tblMatPrice.cmpcode = cmp;
        //                                    tblMatPrice.sparepartpriceoid = iPriceOid;
        //                                    tblMatPrice.sparepartoid = tbldtl[i].sparepartoid;
        //                                    tblMatPrice.refoid = tblmst.custoid;
        //                                    tblMatPrice.refname = "CUSTOMER";
        //                                    tblMatPrice.totalsalesqty = tbldtl[i].sospqty;
        //                                    tblMatPrice.totalpurchaseqty = 0;
        //                                    tblMatPrice.avgsalesprice = tbldtl[i].sospprice;
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].sospprice;
        //                                    tblMatPrice.avgpurchaseprice = 0;
        //                                    tblMatPrice.lastpurchaseprice = 0;
        //                                    tblMatPrice.lasttrans = "QL_trnsospmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.sospdate;
        //                                    tblMatPrice.note = "";
        //                                    tblMatPrice.res1 = "";
        //                                    tblMatPrice.res2 = "";
        //                                    tblMatPrice.res3 = "";
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.curroid = tblmst.curroid;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                                    db.QL_mstsparepartprice.Add(tblMatPrice);
        //                                    db.SaveChanges();
        //                                }

        //                                iPriceOid++;
        //                            }

        //                            sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTSPAREPARTPRICE'";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSOFG(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsoitemmst tblmst = db.QL_trnsoitemmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iPriceOid = ClassFunction.GenerateID("QL_MSTITEMPRICE");
        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    var tbldtl = (from sod in db.QL_trnsoitemdtl where sod.cmpcode == cmp && sod.soitemmstoid == id select new { sod.itemoid, sod.soitemqty, sod.soitemprice, sod.soitemdtlamt }).ToList();
        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //    }

        //    if (error == "")
        //    {
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update SO
        //                sSql = "UPDATE QL_trnsoitemmst SET soitemno='" + transno + "', soitemmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid;
        //                }
        //                sSql += " WHERE soitemmststatus='In Approval' AND soitemmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsoitemmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        if (tbldtl.Count() > 0)
        //                        {
        //                            for (var i = 0; i < tbldtl.Count(); i++)
        //                            {
        //                                var matoid = tbldtl[i].itemoid;
        //                                QL_mstitemprice tblMatPrice = db.QL_mstitemprice.Where(x => x.cmpcode == cmp && x.itemoid == matoid && x.refoid == custoid && x.refname == "CUSTOMER" && x.curroid == curroid).FirstOrDefault();

        //                                if (tblMatPrice != null)
        //                                {
        //                                    tblMatPrice.totalsalesqty = (tblMatPrice.totalsalesqty + tbldtl[i].soitemqty);
        //                                    tblMatPrice.avgsalesprice = ((tblMatPrice.avgsalesprice * tblMatPrice.totalsalesqty) + tbldtl[i].soitemdtlamt) / (tblMatPrice.totalsalesqty + tbldtl[i].soitemqty);
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].soitemprice;
        //                                    tblMatPrice.lasttrans = "QL_trnsoitemmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.soitemdate;
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                                    db.Entry(tblMatPrice).State = EntityState.Modified;
        //                                    db.SaveChanges();
        //                                }
        //                                else
        //                                {
        //                                    tblMatPrice = new QL_mstitemprice();
        //                                    tblMatPrice.cmpcode = cmp;
        //                                    tblMatPrice.itempriceoid = iPriceOid;
        //                                    tblMatPrice.itemoid = tbldtl[i].itemoid;
        //                                    tblMatPrice.refoid = tblmst.custoid;
        //                                    tblMatPrice.refname = "CUSTOMER";
        //                                    tblMatPrice.totalsalesqty = tbldtl[i].soitemqty;
        //                                    tblMatPrice.totalpurchaseqty = 0;
        //                                    tblMatPrice.avgsalesprice = tbldtl[i].soitemprice;
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].soitemprice;
        //                                    tblMatPrice.avgpurchaseprice = 0;
        //                                    tblMatPrice.lastpurchaseprice = 0;
        //                                    tblMatPrice.lasttrans = "QL_trnsoitemmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.soitemdate;
        //                                    tblMatPrice.note = "";
        //                                    tblMatPrice.res1 = "";
        //                                    tblMatPrice.res2 = "";
        //                                    tblMatPrice.res3 = "";
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.curroid = tblmst.curroid;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                                    db.QL_mstitemprice.Add(tblMatPrice);
        //                                    db.SaveChanges();
        //                                }

        //                                iPriceOid++;
        //                            }

        //                            sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTITEMPRICE'";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSOAssets(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsoassetmst tblmst = db.QL_trnsoassetmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iPriceGenOid = ClassFunction.GenerateID("QL_MSTMATGENPRICE");
        //    var iPriceSPOid = ClassFunction.GenerateID("QL_MSTSPAREPARTPRICE");
        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    var tbldtl = (from sod in db.QL_trnsoassetdtl join asset in db.QL_mstassets on sod.assetmstoid equals asset.assetmstoid where sod.cmpcode == cmp && sod.soassetmstoid == id select new { asset.reffoid, asset.refftype, sod.assetmstoid, sod.soassetqty, sod.soassetprice, sod.soassetdtlamt }).ToList();
        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //    }

        //    if (error == "")
        //    {
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update SO
        //                sSql = "UPDATE QL_trnsorawmst SET sorawno='" + transno + "', sorawmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid;
        //                }
        //                sSql += " WHERE sorawmststatus='In Approval' AND sorawmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsorawmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        if (tbldtl.Count() > 0)
        //                        {
        //                            for (var i = 0; i < tbldtl.Count(); i++)
        //                            {
        //                                sSql = "UPDATE /*QL_assetmst*/QL_mstmat SET solduser='" + userid + "', soldtime=CURRENT_TIMESTAMP WHERE cmpcode='" + cmp + "' AND assetmstoid=" + tbldtl[i].assetmstoid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                                if (tbldtl[i].refftype.ToUpper() == "GENERAL")
        //                                {
        //                                    var matoid = tbldtl[i].reffoid;
        //                                    QL_mstmatgenprice tblMatPrice = db.QL_mstmatgenprice.Where(x => x.cmpcode == cmp && x.matgenoid == matoid && x.refoid == custoid && x.refname == "CUSTOMER" && x.curroid == curroid).FirstOrDefault();

        //                                    if (tblMatPrice != null)
        //                                    {
        //                                        tblMatPrice.totalsalesqty = (tblMatPrice.totalsalesqty + tbldtl[i].soassetqty);
        //                                        tblMatPrice.avgsalesprice = ((tblMatPrice.avgsalesprice * tblMatPrice.totalsalesqty) + tbldtl[i].soassetdtlamt) / (tblMatPrice.totalsalesqty + tbldtl[i].soassetqty);
        //                                        tblMatPrice.lastsalesprice = tbldtl[i].soassetprice;
        //                                        tblMatPrice.lasttrans = "QL_trnsoassetmst";
        //                                        tblMatPrice.lasttransoid = id;
        //                                        tblMatPrice.lasttransno = transno;
        //                                        tblMatPrice.lasttransdate = tblmst.soassetdate;
        //                                        tblMatPrice.upduser = userid;
        //                                        tblMatPrice.updtime = servertime;
        //                                        tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                                        db.Entry(tblMatPrice).State = EntityState.Modified;
        //                                        db.SaveChanges();
        //                                    }
        //                                    else
        //                                    {
        //                                        tblMatPrice = new QL_mstmatgenprice();
        //                                        tblMatPrice.cmpcode = cmp;
        //                                        tblMatPrice.matgenpriceoid = iPriceGenOid;
        //                                        tblMatPrice.matgenoid = tbldtl[i].reffoid;
        //                                        tblMatPrice.refoid = tblmst.custoid;
        //                                        tblMatPrice.refname = "CUSTOMER";
        //                                        tblMatPrice.totalsalesqty = tbldtl[i].soassetqty;
        //                                        tblMatPrice.totalpurchaseqty = 0;
        //                                        tblMatPrice.avgsalesprice = tbldtl[i].soassetprice;
        //                                        tblMatPrice.lastsalesprice = tbldtl[i].soassetprice;
        //                                        tblMatPrice.avgpurchaseprice = 0;
        //                                        tblMatPrice.lastpurchaseprice = 0;
        //                                        tblMatPrice.lasttrans = "QL_trnsoassetmst";
        //                                        tblMatPrice.lasttransoid = id;
        //                                        tblMatPrice.lasttransno = transno;
        //                                        tblMatPrice.lasttransdate = tblmst.soassetdate;
        //                                        tblMatPrice.note = "";
        //                                        tblMatPrice.res1 = "";
        //                                        tblMatPrice.res2 = "";
        //                                        tblMatPrice.res3 = "";
        //                                        tblMatPrice.upduser = userid;
        //                                        tblMatPrice.updtime = servertime;
        //                                        tblMatPrice.curroid = tblmst.curroid;
        //                                        tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                                        db.QL_mstmatgenprice.Add(tblMatPrice);
        //                                        db.SaveChanges();
        //                                    }

        //                                    iPriceGenOid++;
        //                                } else if (tbldtl[i].refftype.ToUpper() == "SPARE PART")
        //                                {
        //                                    var matoid = tbldtl[i].reffoid;
        //                                    QL_mstsparepartprice tblMatPrice = db.QL_mstsparepartprice.Where(x => x.cmpcode == cmp && x.sparepartoid == matoid && x.refoid == custoid && x.refname == "CUSTOMER" && x.curroid == curroid).FirstOrDefault();

        //                                    if (tblMatPrice != null)
        //                                    {
        //                                        tblMatPrice.totalsalesqty = (tblMatPrice.totalsalesqty + tbldtl[i].soassetqty);
        //                                        tblMatPrice.avgsalesprice = ((tblMatPrice.avgsalesprice * tblMatPrice.totalsalesqty) + tbldtl[i].soassetdtlamt) / (tblMatPrice.totalsalesqty + tbldtl[i].soassetqty);
        //                                        tblMatPrice.lastsalesprice = tbldtl[i].soassetprice;
        //                                        tblMatPrice.lasttrans = "QL_trnsoassetmst";
        //                                        tblMatPrice.lasttransoid = id;
        //                                        tblMatPrice.lasttransno = transno;
        //                                        tblMatPrice.lasttransdate = tblmst.soassetdate;
        //                                        tblMatPrice.upduser = userid;
        //                                        tblMatPrice.updtime = servertime;
        //                                        tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                                        db.Entry(tblMatPrice).State = EntityState.Modified;
        //                                        db.SaveChanges();
        //                                    }
        //                                    else
        //                                    {
        //                                        tblMatPrice = new QL_mstsparepartprice();
        //                                        tblMatPrice.cmpcode = cmp;
        //                                        tblMatPrice.sparepartpriceoid = iPriceSPOid;
        //                                        tblMatPrice.sparepartoid = tbldtl[i].reffoid;
        //                                        tblMatPrice.refoid = tblmst.custoid;
        //                                        tblMatPrice.refname = "CUSTOMER";
        //                                        tblMatPrice.totalsalesqty = tbldtl[i].soassetqty;
        //                                        tblMatPrice.totalpurchaseqty = 0;
        //                                        tblMatPrice.avgsalesprice = tbldtl[i].soassetprice;
        //                                        tblMatPrice.lastsalesprice = tbldtl[i].soassetprice;
        //                                        tblMatPrice.avgpurchaseprice = 0;
        //                                        tblMatPrice.lastpurchaseprice = 0;
        //                                        tblMatPrice.lasttrans = "QL_trnsoassetmst";
        //                                        tblMatPrice.lasttransoid = id;
        //                                        tblMatPrice.lasttransno = transno;
        //                                        tblMatPrice.lasttransdate = tblmst.soassetdate;
        //                                        tblMatPrice.note = "";
        //                                        tblMatPrice.res1 = "";
        //                                        tblMatPrice.res2 = "";
        //                                        tblMatPrice.res3 = "";
        //                                        tblMatPrice.upduser = userid;
        //                                        tblMatPrice.updtime = servertime;
        //                                        tblMatPrice.curroid = tblmst.curroid;
        //                                        tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                                        db.QL_mstsparepartprice.Add(tblMatPrice);
        //                                        db.SaveChanges();
        //                                    }

        //                                    iPriceSPOid++;
        //                                }
        //                            }

        //                            sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceGenOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTMATGENPRICE'";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceSPOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTSPAREPARTPRICE'";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSOLog(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsologmst tblmst = db.QL_trnsologmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iPriceOid = ClassFunction.GenerateID("QL_MSTCAT3PRICE");
        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    var tbldtl = (from sod in db.QL_trnsologdtl where sod.cmpcode == cmp && sod.sologmstoid == id select new { sod.cat3oid, sod.sologqty, sod.sologprice, sod.sologdtlamt }).ToList();
        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //    }

        //    if (error == "")
        //    {
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update SO
        //                sSql = "UPDATE QL_trnsologmst SET sologno='" + transno + "', sologmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid;
        //                }
        //                sSql += " WHERE sologmststatus='In Approval' AND sologmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsologmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        if (tbldtl.Count() > 0)
        //                        {
        //                            for (var i = 0; i < tbldtl.Count(); i++)
        //                            {
        //                                var matoid = tbldtl[i].cat3oid;
        //                                QL_mstcat3price tblMatPrice = db.QL_mstcat3price.Where(x => x.cmpcode == cmp && x.cat3oid == matoid && x.refoid == custoid && x.refname == "CUSTOMER" && x.curroid == curroid).FirstOrDefault();

        //                                if (tblMatPrice != null)
        //                                {
        //                                    tblMatPrice.totalsalesqty = (tblMatPrice.totalsalesqty + tbldtl[i].sologqty);
        //                                    tblMatPrice.avgsalesprice = ((tblMatPrice.avgsalesprice * tblMatPrice.totalsalesqty) + tbldtl[i].sologdtlamt) / (tblMatPrice.totalsalesqty + tbldtl[i].sologqty);
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].sologprice;
        //                                    tblMatPrice.lasttrans = "QL_trnsologmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.sologdate;
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                                    db.Entry(tblMatPrice).State = EntityState.Modified;
        //                                    db.SaveChanges();
        //                                }
        //                                else
        //                                {
        //                                    tblMatPrice = new QL_mstcat3price();
        //                                    tblMatPrice.cmpcode = cmp;
        //                                    tblMatPrice.cat3priceoid = iPriceOid;
        //                                    tblMatPrice.cat3oid = tbldtl[i].cat3oid;
        //                                    tblMatPrice.refoid = tblmst.custoid;
        //                                    tblMatPrice.refname = "CUSTOMER";
        //                                    tblMatPrice.totalsalesqty = tbldtl[i].sologqty;
        //                                    tblMatPrice.totalpurchaseqty = 0;
        //                                    tblMatPrice.avgsalesprice = tbldtl[i].sologprice;
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].sologprice;
        //                                    tblMatPrice.avgpurchaseprice = 0;
        //                                    tblMatPrice.lastpurchaseprice = 0;
        //                                    tblMatPrice.lasttrans = "QL_trnsologmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.sologdate;
        //                                    tblMatPrice.note = "";
        //                                    tblMatPrice.res1 = "";
        //                                    tblMatPrice.res2 = "";
        //                                    tblMatPrice.res3 = "";
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.curroid = tblmst.curroid;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                                    db.QL_mstcat3price.Add(tblMatPrice);
        //                                    db.SaveChanges();
        //                                }

        //                                iPriceOid++;
        //                            }

        //                            sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTCAT3PRICE'";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSOSawn(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsosawnmst tblmst = db.QL_trnsosawnmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iPriceOid = ClassFunction.GenerateID("QL_MSTCAT3PRICE");
        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    var tbldtl = (from sod in db.QL_trnsosawndtl where sod.cmpcode == cmp && sod.sosawnmstoid == id select new { sod.cat3oid, sod.sosawnqty, sod.sosawnprice, sod.sosawndtlamt }).ToList();
        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //    }

        //    if (error == "")
        //    {
        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update SO
        //                sSql = "UPDATE QL_trnsosawnmst SET sosawnno='" + transno + "', sosawnmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", rate2oid=" + cRate.GetRateMonthlyOid;
        //                }
        //                sSql += " WHERE sosawnmststatus='In Approval' AND sosawnmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsosawnmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        if (tbldtl.Count() > 0)
        //                        {
        //                            for (var i = 0; i < tbldtl.Count(); i++)
        //                            {
        //                                var matoid = tbldtl[i].cat3oid;
        //                                QL_mstcat3price tblMatPrice = db.QL_mstcat3price.Where(x => x.cmpcode == cmp && x.cat3oid == matoid && x.refoid == custoid && x.refname == "CUSTOMER" && x.curroid == curroid).FirstOrDefault();

        //                                if (tblMatPrice != null)
        //                                {
        //                                    tblMatPrice.totalsalesqty = (tblMatPrice.totalsalesqty + tbldtl[i].sosawnqty);
        //                                    tblMatPrice.avgsalesprice = ((tblMatPrice.avgsalesprice * tblMatPrice.totalsalesqty) + tbldtl[i].sosawndtlamt) / (tblMatPrice.totalsalesqty + tbldtl[i].sosawnqty);
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].sosawnprice;
        //                                    tblMatPrice.lasttrans = "QL_trnsosawnmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.sosawndate;
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;
        //                                    db.Entry(tblMatPrice).State = EntityState.Modified;
        //                                    db.SaveChanges();
        //                                }
        //                                else
        //                                {
        //                                    tblMatPrice = new QL_mstcat3price();
        //                                    tblMatPrice.cmpcode = cmp;
        //                                    tblMatPrice.cat3priceoid = iPriceOid;
        //                                    tblMatPrice.cat3oid = tbldtl[i].cat3oid;
        //                                    tblMatPrice.refoid = tblmst.custoid;
        //                                    tblMatPrice.refname = "CUSTOMER";
        //                                    tblMatPrice.totalsalesqty = tbldtl[i].sosawnqty;
        //                                    tblMatPrice.totalpurchaseqty = 0;
        //                                    tblMatPrice.avgsalesprice = tbldtl[i].sosawnprice;
        //                                    tblMatPrice.lastsalesprice = tbldtl[i].sosawnprice;
        //                                    tblMatPrice.avgpurchaseprice = 0;
        //                                    tblMatPrice.lastpurchaseprice = 0;
        //                                    tblMatPrice.lasttrans = "QL_trnsosawnmst";
        //                                    tblMatPrice.lasttransoid = id;
        //                                    tblMatPrice.lasttransno = transno;
        //                                    tblMatPrice.lasttransdate = tblmst.sosawndate;
        //                                    tblMatPrice.note = "";
        //                                    tblMatPrice.res1 = "";
        //                                    tblMatPrice.res2 = "";
        //                                    tblMatPrice.res3 = "";
        //                                    tblMatPrice.upduser = userid;
        //                                    tblMatPrice.updtime = servertime;
        //                                    tblMatPrice.curroid = tblmst.curroid;
        //                                    tblMatPrice.ratetoidr = cRate.GetRateMonthlyIDRValue;

        //                                    db.QL_mstcat3price.Add(tblMatPrice);
        //                                    db.SaveChanges();
        //                                }

        //                                iPriceOid++;
        //                            }

        //                            sSql = "UPDATE QL_mstoid SET lastoid=" + (iPriceOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_MSTCAT3PRICE'";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //#endregion

        //#region Approval Shipment
        //public class shipmentdtl
        //{
        //    public int shipmentdtloid { get; set; }
        //    public int shipmentdtlseq { get; set; }
        //    public int matoid { get; set; }
        //    public string matcode { get; set; }
        //    public string matlongdesc { get; set; }
        //    public decimal shipmentqty { get; set; }
        //    public string shipmentdtlnote { get; set; }
        //    public int shipmentwhoid { get; set; }
        //    public string sono { get; set; }
        //    public string shipmentonsostatus { get; set; }
        //    public int sodtloid { get; set; }
        //    public int somstoid { get; set; }
        //    public decimal shipmentvalueidr { get; set; }
        //    public decimal shipmentvalueusd { get; set; }

        //    //assets
        //    public string assetno { get; set; }
        //    public decimal assetpurchase { get; set; }
        //    public decimal assetpurchaseidr { get; set; }
        //    public decimal assetpurchaseusd { get; set; }
        //    public decimal assetaccumdep { get; set; }
        //    public decimal assetaccumdepidr { get; set; }
        //    public decimal assetaccumdepusd { get; set; }
        //    public int assetacctgoid { get; set; }
        //    public int accumdepacctgoid { get; set; }
        //    public int depacctgoid { get; set; }
        //}

        //public class assetdtl
        //{
        //    public int assetmstoid { get; set; }
        //    public int assetdtloid { get; set; }
        //    public string assetperiod { get; set; }
        //    public decimal assetperiodvalue { get; set; }
        //    public decimal assetperiodvalueidr { get; set; }
        //    public decimal assetperiodvalueusd { get; set; }
        //}

        //private void ApprovalShipmentRaw(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnshipmentrawmst tblmst = db.QL_trnshipmentrawmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iConOid = ClassFunction.GenerateID("QL_CONMAT");
        //    var iCrdOid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var iGlMstOid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var iGlDtlOid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var iStockValOid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "RAW MATERIAL";

        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    sSql = "SELECT shipmentrawdtloid shipmentdtloid, sd.shipmentrawdtlseq shipmentdtlseq, m.matrawoid matoid, m.matrawcode matcode, m.matrawlongdesc matlongdesc, sd.shipmentrawqty shipmentqty, sd.shipmentrawdtlnote shipmentdtlnote, sd.shipmentrawwhoid shipmentwhoid, som.sorawno sono, ISNULL(shipmentrawdtlres3, '') AS shipmentonsostatus, sod.sorawdtloid sodtloid, som.sorawmstoid somstoid, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueidr, 0)) / SUM(NULLIF(stockqty, 0)) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.matrawoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueidr, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueusd, 0)) / SUM(NULLIF(stockqty, 0)) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.matrawoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueusd FROM QL_trnshipmentrawmst sm INNER JOIN QL_trnshipmentrawdtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentrawmstoid=sd.shipmentrawmstoid INNER JOIN QL_mstmatraw m ON sd.matrawoid=m.matrawoid INNER JOIN QL_mstgen g ON sd.shipmentrawunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentrawwhoid=g2.genoid INNER JOIN QL_trndorawmst dom ON dom.cmpcode=sd.cmpcode AND dom.dorawmstoid=sd.dorawmstoid INNER JOIN QL_trndorawdtl dod ON dod.cmpcode=sd.cmpcode AND dod.dorawdtloid=sd.dorawdtloid INNER JOIN QL_trnsorawmst som ON som.cmpcode=dod.cmpcode AND som.sorawmstoid=dod.sorawmstoid INNER JOIN QL_trnsorawdtl sod ON sod.cmpcode=dod.cmpcode AND sod.sorawdtloid=dod.sorawdtloid WHERE sd.shipmentrawmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<shipmentdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_RM", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_RM");
        //        if (tbldtl != null)
        //        {
        //            for (var i = 0; i < tbldtl.Count(); i++)
        //            {
        //                var totalqty = tbldtl.Where(x => x.matoid == tbldtl[i].matoid && x.shipmentwhoid == tbldtl[i].shipmentwhoid).Sum(x => x.shipmentqty);
        //                if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].matoid, tbldtl[i].shipmentwhoid, totalqty, refname))
        //                {
        //                    error = "Shipment Qty for Item Code : <STRONG>" + tbldtl[i].matcode + "</STRONG> must be less than Stock Qty!";
        //                    break;
        //                }
        //            }
        //        }
        //    }

        //    if (error == "")
        //    {
        //        var iDelAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iStockAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_RM", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Shipment
        //                sSql = "UPDATE QL_trnshipmentrawmst SET shipmentrawno='" + transno + "', shipmentrawmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE shipmentrawmststatus='In Approval' AND shipmentrawmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnshipmentrawmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trndorawdtl SET dorawdtlstatus='' WHERE cmpcode='" + cmp + "' AND dorawdtloid IN (SELECT dorawdtloid FROM QL_trnshipmentrawdtl WHERE cmpcode='" + cmp + "' AND shipmentrawmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trndorawmst SET dorawmststatus='Post' WHERE cmpcode='" + cmp + "' AND dorawmstoid IN (SELECT DISTINCT dorawmstoid FROM QL_trnshipmentrawdtl WHERE cmpcode='" + cmp + "' AND shipmentrawmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                } else if(action== "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            if (tbldtl[i].shipmentonsostatus != "")
        //                            {
        //                                sSql = "UPDATE QL_trnsorawdtl SET sorawdtlstatus='' WHERE cmpcode='" + cmp + "' AND sorawdtloid=" + tbldtl[i].sodtloid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                                sSql = "UPDATE QL_trnsorawmst SET sorawmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sorawmstoid=" + tbldtl[i].somstoid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                            }
        //                            sSql = "UPDATE QL_trnsorawdtl SET sorawdtlstatus='' WHERE cmpcode='" + cmp + "' AND sorawdtloid IN (SELECT sorawdtloid FROM QL_trndorawdtl WHERE cmpcode='" + cmp + "' AND dorawmstoid IN (SELECT dorawmstoid FROM QL_trnshipmentrawdtl WHERE cmpcode='" + cmp + "' AND shipmentrawmstoid=" + id + ") AND dorawdtloid NOT IN (SELECT dorawdtloid FROM QL_trnshipmentrawdtl WHERE cmpcode='" + cmp + "' AND shipmentrawmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsorawmst SET sorawmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sorawmstoid IN (SELECT sorawmstoid FROM QL_trndorawdtl WHERE cmpcode='" + cmp + "' AND dorawmstoid IN (SELECT dorawmstoid FROM QL_trnshipmentrawdtl WHERE cmpcode='" + cmp + "' AND shipmentrawmstoid=" + id + ") AND dorawdtloid NOT IN (SELECT dorawdtloid FROM QL_trnshipmentrawdtl WHERE cmpcode='" + cmp + "' AND shipmentrawmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnshipmentrawdtl SET shipmentrawvalueidr=" + tbldtl[i].shipmentvalueidr + ", shipmentrawvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE cmpcode='" + cmp + "' AND shipmentrawdtloid=" + tbldtl[i].shipmentdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, iConOid++, "SJRM", "QL_trnshipmentrawdtl", id, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, "Shipment Raw Material", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].shipmentdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, iCrdOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, 0, "QL_trnshipmentrawdtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueusd * tbldtl[i].shipmentqty * -1, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                iCrdOid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, iStockValOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnshipmentrawdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                iStockValOid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, iGlMstOid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Shipment RM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    decimal glamt = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueusd);
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iDelAcctgOid, "D", glamt, transno, "Shipment RM|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentrawmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iStockAcctgOid, "C", glamt, transno, "Shipment RM|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentrawmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    iGlMstOid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iConOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iCrdOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iStockValOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlMstOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlDtlOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalShipmentGen(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnshipmentgenmst tblmst = db.QL_trnshipmentgenmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iConOid = ClassFunction.GenerateID("QL_CONMAT");
        //    var iCrdOid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var iGlMstOid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var iGlDtlOid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var iStockValOid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "GENERAL MATERIAL";

        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    sSql = "SELECT shipmentgendtloid shipmentdtloid, sd.shipmentgendtlseq shipmentdtlseq, m.matgenoid matoid, m.matgencode matcode, m.matgenlongdesc matlongdesc, sd.shipmentgenqty shipmentqty, sd.shipmentgendtlnote shipmentdtlnote, sd.shipmentgenwhoid shipmentwhoid, som.sogenno sono, ISNULL(shipmentgendtlres3, '') AS shipmentonsostatus, sod.sogendtloid sodtloid, som.sogenmstoid somstoid, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueidr, 0)) / SUM(NULLIF(stockqty, 0)) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.matgenoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueidr, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueusd, 0)) / SUM(NULLIF(stockqty, 0)) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.matgenoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueusd FROM QL_trnshipmentgenmst sm INNER JOIN QL_trnshipmentgendtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentgenmstoid=sd.shipmentgenmstoid INNER JOIN QL_mstmatgen m ON sd.matgenoid=m.matgenoid INNER JOIN QL_mstgen g ON sd.shipmentgenunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentgenwhoid=g2.genoid INNER JOIN QL_trndogenmst dom ON dom.cmpcode=sd.cmpcode AND dom.dogenmstoid=sd.dogenmstoid INNER JOIN QL_trndogendtl dod ON dod.cmpcode=sd.cmpcode AND dod.dogendtloid=sd.dogendtloid INNER JOIN QL_trnsogenmst som ON som.cmpcode=dod.cmpcode AND som.sogenmstoid=dod.sogenmstoid INNER JOIN QL_trnsogendtl sod ON sod.cmpcode=dod.cmpcode AND sod.sogendtloid=dod.sogendtloid WHERE sd.shipmentgenmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<shipmentdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_GM", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_GM");
        //        if (tbldtl != null)
        //        {
        //            for (var i = 0; i < tbldtl.Count(); i++)
        //            {
        //                var totalqty = tbldtl.Where(x => x.matoid == tbldtl[i].matoid && x.shipmentwhoid == tbldtl[i].shipmentwhoid).Sum(x => x.shipmentqty);
        //                if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].matoid, tbldtl[i].shipmentwhoid, totalqty, refname))
        //                {
        //                    error = "Shipment Qty for Item Code : <STRONG>" + tbldtl[i].matcode + "</STRONG> must be less than Stock Qty!";
        //                    break;
        //                }
        //            }
        //        }
        //    }

        //    if (error == "")
        //    {
        //        var iDelAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iStockAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_GM", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Shipment
        //                sSql = "UPDATE QL_trnshipmentgenmst SET shipmentgenno='" + transno + "', shipmentgenmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE shipmentgenmststatus='In Approval' AND shipmentgenmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnshipmentgenmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trndogendtl SET dogendtlstatus='' WHERE cmpcode='" + cmp + "' AND dogendtloid IN (SELECT dogendtloid FROM QL_trnshipmentgendtl WHERE cmpcode='" + cmp + "' AND shipmentgenmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trndogenmst SET dogenmststatus='Post' WHERE cmpcode='" + cmp + "' AND dogenmstoid IN (SELECT DISTINCT dogenmstoid FROM QL_trnshipmentgendtl WHERE cmpcode='" + cmp + "' AND shipmentgenmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            if (tbldtl[i].shipmentonsostatus != "")
        //                            {
        //                                sSql = "UPDATE QL_trnsogendtl SET sogendtlstatus='' WHERE cmpcode='" + cmp + "' AND sogendtloid=" + tbldtl[i].sodtloid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                                sSql = "UPDATE QL_trnsogenmst SET sogenmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sogenmstoid=" + tbldtl[i].somstoid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                            }
        //                            sSql = "UPDATE QL_trnsogendtl SET sogendtlstatus='' WHERE cmpcode='" + cmp + "' AND sogendtloid IN (SELECT sogendtloid FROM QL_trndogendtl WHERE cmpcode='" + cmp + "' AND dogenmstoid IN (SELECT dogenmstoid FROM QL_trnshipmentgendtl WHERE cmpcode='" + cmp + "' AND shipmentgenmstoid=" + id + ") AND dogendtloid NOT IN (SELECT dogendtloid FROM QL_trnshipmentgendtl WHERE cmpcode='" + cmp + "' AND shipmentgenmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsogenmst SET sogenmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sogenmstoid IN (SELECT sogenmstoid FROM QL_trndogendtl WHERE cmpcode='" + cmp + "' AND dogenmstoid IN (SELECT dogenmstoid FROM QL_trnshipmentgendtl WHERE cmpcode='" + cmp + "' AND shipmentgenmstoid=" + id + ") AND dogendtloid NOT IN (SELECT dogendtloid FROM QL_trnshipmentgendtl WHERE cmpcode='" + cmp + "' AND shipmentgenmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnshipmentgendtl SET shipmentgenvalueidr=" + tbldtl[i].shipmentvalueidr + ", shipmentgenvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE cmpcode='" + cmp + "' AND shipmentgendtloid=" + tbldtl[i].shipmentdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, iConOid++, "SJGM", "QL_trnshipmentgendtl", id, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, "Shipment Gen Material", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].shipmentdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, iCrdOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, 0, "QL_trnshipmentgendtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueusd * tbldtl[i].shipmentqty * -1, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                iCrdOid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, iStockValOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnshipmentgendtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                iStockValOid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, iGlMstOid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Shipment GM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    decimal glamt = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueusd);
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iDelAcctgOid, "D", glamt, transno, "Shipment GM|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentgenmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iStockAcctgOid, "C", glamt, transno, "Shipment GM|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentgenmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    iGlMstOid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iConOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iCrdOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iStockValOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlMstOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlDtlOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalShipmentSP(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnshipmentspmst tblmst = db.QL_trnshipmentspmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iConOid = ClassFunction.GenerateID("QL_CONMAT");
        //    var iCrdOid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var iGlMstOid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var iGlDtlOid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var iStockValOid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "SPARE PART";

        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    sSql = "SELECT shipmentspdtloid shipmentdtloid, sd.shipmentspdtlseq shipmentdtlseq, m.sparepartoid matoid, m.sparepartcode matcode, m.sparepartlongdesc matlongdesc, sd.shipmentspqty shipmentqty, sd.shipmentspdtlnote shipmentdtlnote, sd.shipmentspwhoid shipmentwhoid, som.sospno sono, ISNULL(shipmentspdtlres3, '') AS shipmentonsostatus, sod.sospdtloid sodtloid, som.sospmstoid somstoid, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueidr, 0)) / SUM(NULLIF(stockqty, 0)) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.sparepartoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueidr, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueusd, 0)) / SUM(NULLIF(stockqty, 0)) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.sparepartoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueusd FROM QL_trnshipmentspmst sm INNER JOIN QL_trnshipmentspdtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentspmstoid=sd.shipmentspmstoid INNER JOIN QL_mstsparepart m ON sd.sparepartoid=m.sparepartoid INNER JOIN QL_mstgen g ON sd.shipmentspunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentspwhoid=g2.genoid INNER JOIN QL_trndospmst dom ON dom.cmpcode=sd.cmpcode AND dom.dospmstoid=sd.dospmstoid INNER JOIN QL_trndospdtl dod ON dod.cmpcode=sd.cmpcode AND dod.dospdtloid=sd.dospdtloid INNER JOIN QL_trnsospmst som ON som.cmpcode=dod.cmpcode AND som.sospmstoid=dod.sospmstoid INNER JOIN QL_trnsospdtl sod ON sod.cmpcode=dod.cmpcode AND sod.sospdtloid=dod.sospdtloid WHERE sd.shipmentspmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<shipmentdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_SP", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_SP");
        //        if (tbldtl != null)
        //        {
        //            for (var i = 0; i < tbldtl.Count(); i++)
        //            {
        //                var totalqty = tbldtl.Where(x => x.matoid == tbldtl[i].matoid && x.shipmentwhoid == tbldtl[i].shipmentwhoid).Sum(x => x.shipmentqty);
        //                if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].matoid, tbldtl[i].shipmentwhoid, totalqty, refname))
        //                {
        //                    error = "Shipment Qty for Item Code : <STRONG>" + tbldtl[i].matcode + "</STRONG> must be less than Stock Qty!";
        //                    break;
        //                }
        //            }
        //        }
        //    }

        //    if (error == "")
        //    {
        //        var iDelAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iStockAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_SP", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Shipment
        //                sSql = "UPDATE QL_trnshipmentspmst SET shipmentspno='" + transno + "', shipmentspmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE shipmentspmststatus='In Approval' AND shipmentspmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnshipmentspmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trndospdtl SET dospdtlstatus='' WHERE cmpcode='" + cmp + "' AND dospdtloid IN (SELECT dospdtloid FROM QL_trnshipmentspdtl WHERE cmpcode='" + cmp + "' AND shipmentspmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trndospmst SET dospmststatus='Post' WHERE cmpcode='" + cmp + "' AND dospmstoid IN (SELECT DISTINCT dospmstoid FROM QL_trnshipmentspdtl WHERE cmpcode='" + cmp + "' AND shipmentspmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            if (tbldtl[i].shipmentonsostatus != "")
        //                            {
        //                                sSql = "UPDATE QL_trnsospdtl SET sospdtlstatus='' WHERE cmpcode='" + cmp + "' AND sospdtloid=" + tbldtl[i].sodtloid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                                sSql = "UPDATE QL_trnsospmst SET sospmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sospmstoid=" + tbldtl[i].somstoid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                            }
        //                            sSql = "UPDATE QL_trnsospdtl SET sospdtlstatus='' WHERE cmpcode='" + cmp + "' AND sospdtloid IN (SELECT sospdtloid FROM QL_trndospdtl WHERE cmpcode='" + cmp + "' AND dospmstoid IN (SELECT dospmstoid FROM QL_trnshipmentspdtl WHERE cmpcode='" + cmp + "' AND shipmentspmstoid=" + id + ") AND dospdtloid NOT IN (SELECT dospdtloid FROM QL_trnshipmentspdtl WHERE cmpcode='" + cmp + "' AND shipmentspmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsospmst SET sospmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sospmstoid IN (SELECT sospmstoid FROM QL_trndospdtl WHERE cmpcode='" + cmp + "' AND dospmstoid IN (SELECT dospmstoid FROM QL_trnshipmentspdtl WHERE cmpcode='" + cmp + "' AND shipmentspmstoid=" + id + ") AND dospdtloid NOT IN (SELECT dospdtloid FROM QL_trnshipmentspdtl WHERE cmpcode='" + cmp + "' AND shipmentspmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnshipmentspdtl SET shipmentspvalueidr=" + tbldtl[i].shipmentvalueidr + ", shipmentspvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE cmpcode='" + cmp + "' AND shipmentspdtloid=" + tbldtl[i].shipmentdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, iConOid++, "SJSP", "QL_trnshipmentspdtl", id, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, "Shipment Spare Part", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].shipmentdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, iCrdOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, 0, "QL_trnshipmentspdtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueusd * tbldtl[i].shipmentqty * -1, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                iCrdOid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, iStockValOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnshipmentspdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                iStockValOid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, iGlMstOid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Shipment SP|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    decimal glamt = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueusd);
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iDelAcctgOid, "D", glamt, transno, "Shipment SP|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentspmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iStockAcctgOid, "C", glamt, transno, "Shipment SP|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentspmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    iGlMstOid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iConOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iCrdOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iStockValOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlMstOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlDtlOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalShipmentFG(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnshipmentitemmst tblmst = db.QL_trnshipmentitemmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iConOid = ClassFunction.GenerateID("QL_CONMAT");
        //    var iCrdOid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var iGlMstOid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var iGlDtlOid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var iStockValOid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "FINISH GOOD";

        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    sSql = "SELECT shipmentitemdtloid shipmentdtloid, sd.shipmentitemdtlseq shipmentdtlseq, m.itemoid matoid, m.itemcode matcode, m.itemlongdesc matlongdesc, sd.shipmentitemqty shipmentqty, sd.shipmentitemdtlnote shipmentdtlnote, sd.shipmentitemwhoid shipmentwhoid, som.soitemno sono, ISNULL(shipmentitemdtlres3, '') AS shipmentonsostatus, sod.soitemdtloid sodtloid, som.soitemmstoid somstoid, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueidr, 0)) / SUM(NULLIF(stockqty, 0)) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.itemoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueidr, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueusd, 0)) / SUM(NULLIF(stockqty, 0)) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.itemoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueusd FROM QL_trnshipmentitemmst sm INNER JOIN QL_trnshipmentitemdtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentitemmstoid=sd.shipmentitemmstoid INNER JOIN QL_mstitem m ON sd.itemoid=m.itemoid INNER JOIN QL_mstgen g ON sd.shipmentitemunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentitemwhoid=g2.genoid INNER JOIN QL_trndoitemmst dom ON dom.cmpcode=sd.cmpcode AND dom.doitemmstoid=sd.doitemmstoid INNER JOIN QL_trndoitemdtl dod ON dod.cmpcode=sd.cmpcode AND dod.doitemdtloid=sd.doitemdtloid INNER JOIN QL_trnsoitemmst som ON som.cmpcode=dod.cmpcode AND som.soitemmstoid=dod.soitemmstoid INNER JOIN QL_trnsoitemdtl sod ON sod.cmpcode=dod.cmpcode AND sod.soitemdtloid=dod.soitemdtloid WHERE sd.shipmentitemmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<shipmentdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_FG", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_FG");
        //        if (tbldtl != null)
        //        {
        //            for (var i = 0; i < tbldtl.Count(); i++)
        //            {
        //                var totalqty = tbldtl.Where(x => x.matoid == tbldtl[i].matoid && x.shipmentwhoid == tbldtl[i].shipmentwhoid).Sum(x => x.shipmentqty);
        //                if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].matoid, tbldtl[i].shipmentwhoid, totalqty, refname))
        //                {
        //                    error = "Shipment Qty for Item Code : <STRONG>" + tbldtl[i].matcode + "</STRONG> must be less than Stock Qty!";
        //                    break;
        //                }
        //            }
        //        }
        //    }

        //    if (error == "")
        //    {
        //        var iDelAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iStockAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_FG", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Shipment
        //                sSql = "UPDATE QL_trnshipmentitemmst SET shipmentitemno='" + transno + "', shipmentitemmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE shipmentitemmststatus='In Approval' AND shipmentitemmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnshipmentitemmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trndoitemdtl SET doitemdtlstatus='' WHERE cmpcode='" + cmp + "' AND doitemdtloid IN (SELECT doitemdtloid FROM QL_trnshipmentitemdtl WHERE cmpcode='" + cmp + "' AND shipmentitemmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trndoitemmst SET doitemmststatus='Post' WHERE cmpcode='" + cmp + "' AND doitemmstoid IN (SELECT DISTINCT doitemmstoid FROM QL_trnshipmentitemdtl WHERE cmpcode='" + cmp + "' AND shipmentitemmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            if (tbldtl[i].shipmentonsostatus != "")
        //                            {
        //                                sSql = "UPDATE QL_trnsoitemdtl SET soitemdtlstatus='' WHERE cmpcode='" + cmp + "' AND soitemdtloid=" + tbldtl[i].sodtloid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                                sSql = "UPDATE QL_trnsoitemmst SET soitemmststatus='Approved' WHERE cmpcode='" + cmp + "' AND soitemmstoid=" + tbldtl[i].somstoid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                            }
        //                            sSql = "UPDATE QL_trnsoitemdtl SET soitemdtlstatus='' WHERE cmpcode='" + cmp + "' AND soitemdtloid IN (SELECT soitemdtloid FROM QL_trndoitemdtl WHERE cmpcode='" + cmp + "' AND doitemmstoid IN (SELECT doitemmstoid FROM QL_trnshipmentitemdtl WHERE cmpcode='" + cmp + "' AND shipmentitemmstoid=" + id + ") AND doitemdtloid NOT IN (SELECT doitemdtloid FROM QL_trnshipmentitemdtl WHERE cmpcode='" + cmp + "' AND shipmentitemmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsoitemmst SET soitemmststatus='Approved' WHERE cmpcode='" + cmp + "' AND soitemmstoid IN (SELECT soitemmstoid FROM QL_trndoitemdtl WHERE cmpcode='" + cmp + "' AND doitemmstoid IN (SELECT doitemmstoid FROM QL_trnshipmentitemdtl WHERE cmpcode='" + cmp + "' AND shipmentitemmstoid=" + id + ") AND doitemdtloid NOT IN (SELECT doitemdtloid FROM QL_trnshipmentitemdtl WHERE cmpcode='" + cmp + "' AND shipmentitemmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnshipmentitemdtl SET shipmentitemvalueidr=" + tbldtl[i].shipmentvalueidr + ", shipmentitemvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE cmpcode='" + cmp + "' AND shipmentitemdtloid=" + tbldtl[i].shipmentdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, iConOid++, "SJFG", "QL_trnshipmentitemdtl", id, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, "Shipment Finish Good", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].shipmentdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, iCrdOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, 0, "QL_trnshipmentitemdtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueusd * tbldtl[i].shipmentqty * -1, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                iCrdOid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, iStockValOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnshipmentitemdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                iStockValOid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, iGlMstOid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Shipment FG|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    decimal glamt = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueusd);
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iDelAcctgOid, "D", glamt, transno, "Shipment FG|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentitemmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iStockAcctgOid, "C", glamt, transno, "Shipment FG|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentitemmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    iGlMstOid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iConOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iCrdOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iStockValOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlMstOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlDtlOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalShipmentAssets(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnshipmentassetmst tblmst = db.QL_trnshipmentassetmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iGlMstOid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var iGlDtlOid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var glseq = 1;

        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    sSql = "SELECT shipmentassetdtloid shipmentdtloid, sd.shipmentassetdtlseq shipmentdtlseq, sd.assetmstoid AS matoid, assetno, (CASE m.reftype WHEN 'General' THEN (SELECT x.matgencode FROM QL_mstmatgen x WHERE x.matgenoid=m.refoid) WHEN 'Spare Part' THEN (SELECT x.sparepartcode FROM QL_mstsparepart x WHERE x.sparepartoid=m.refoid) ELSE '' END) matcode, (CASE m.reftype WHEN 'General' THEN (SELECT x.matgenlongdesc FROM QL_mstmatgen x WHERE x.matgenoid=m.refoid) WHEN 'Spare Part' THEN (SELECT x.sparepartlongdesc FROM QL_mstsparepart x WHERE x.sparepartoid=m.refoid) ELSE '' END) matlongdesc, sd.shipmentassetqty shipmentqty, sd.shipmentassetdtlnote shipmentdtlnote, sd.shipmentassetwhoid shipmentwhoid, som.soassetno sono, ISNULL(shipmentassetdtlres3, '') AS shipmentonsostatus, sod.soassetdtloid soadtloid, som.soassetmstoid somstoid, 0.0 AS shipmentvalueidr, 0.0 AS shipmentvalueusd, assetpurchase, assetpurchaseidr, assetpurchaseusd, ISNULL((SELECT SUM(assetperiodvalue) FROM QL_assetdtl d WHERE d.cmpcode=m.cmpcode AND d.assetmstoid=m.assetmstoid AND assetdtlstatus='Complete'), 0.0) assetaccumdep, ISNULL((SELECT SUM(assetperiodvalueidr) FROM QL_assetdtl d WHERE d.cmpcode=m.cmpcode AND d.assetmstoid=m.assetmstoid AND assetdtlstatus='Complete'), 0.0) assetaccumdepidr, ISNULL((SELECT SUM(assetperiodvalueusd) FROM QL_assetdtl d WHERE d.cmpcode=m.cmpcode AND d.assetmstoid=m.assetmstoid AND assetdtlstatus='Complete'), 0.0) assetaccumdepusd, assetacctgoid, accumdepacctgoid, depacctgoid FROM QL_trnshipmentassetmst sm INNER JOIN QL_trnshipmentassetdtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentassetmstoid=sd.shipmentassetmstoid INNER JOIN /*QL_assetmst*/QL_mstmat m ON m.assetmstoid=sd.assetmstoid INNER JOIN QL_mstgen g ON sd.shipmentassetunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentassetwhoid=g2.genoid INNER JOIN QL_trndoassetmst dom ON dom.cmpcode=sd.cmpcode AND dom.doassetmstoid=sd.doassetmstoid INNER JOIN QL_trndoassetdtl dod ON dod.cmpcode=sd.cmpcode AND dod.doassetdtloid=sd.doassetdtloid INNER JOIN QL_trnsoassetmst som ON som.cmpcode=dod.cmpcode AND som.soassetmstoid=dod.soassetmstoid INNER JOIN QL_trnsoassetdtl sod ON sod.cmpcode=dod.cmpcode AND sod.soassetdtloid=dod.soassetdtloid INNER JOIN QL_mstrate2 r2 ON r2.rate2oid=m.rate2oid WHERE sd.shipmentassetmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<shipmentdtl>(sSql).ToList();

        //    sSql = "SELECT sd.assetmstoid, assetdtloid, assetperiod, assetperiodvalue, assetperiodvalueidr, assetperiodvalueusd FROM QL_trnshipmentassetdtl sd INNER JOIN /*QL_assetmst*/QL_mstmat m ON m.cmpcode=sd.cmpcode AND m.assetmstoid=sd.assetmstoid INNER JOIN QL_mstrate2 r2 ON r2.rate2oid=m.rate2oid INNER JOIN QL_assetdtl d ON d.cmpcode=m.cmpcode AND d.assetmstoid=m.assetmstoid WHERE sd.shipmentassetmstoid=" + id + " AND sd.cmpcode='" + cmp + "' AND assetperiod<='" + sPeriod + "' AND assetdtlstatus=''";
        //    var tbldtlasset = db.Database.SqlQuery<assetdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_FA_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_FA_TRANSIT");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_FA_TRANSIT", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Shipment
        //                sSql = "UPDATE QL_trnshipmentassetmst SET shipmentassetno='" + transno + "', shipmentassetmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE shipmentassetmststatus='In Approval' AND shipmentassetmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnshipmentassetmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trndoassetdtl SET doassetdtlstatus='' WHERE cmpcode='" + cmp + "' AND doassetdtloid IN (SELECT doassetdtloid FROM QL_trnshipmentassetdtl WHERE cmpcode='" + cmp + "' AND shipmentassetmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trndoassetmst SET doassetmststatus='Post' WHERE cmpcode='" + cmp + "' AND doassetmstoid IN (SELECT DISTINCT doassetmstoid FROM QL_trnshipmentassetdtl WHERE cmpcode='" + cmp + "' AND shipmentassetmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null && tbldtlasset != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            if (tbldtl[i].shipmentonsostatus != "")
        //                            {
        //                                sSql = "UPDATE QL_trnsoassetdtl SET soassetdtlstatus='' WHERE cmpcode='" + cmp + "' AND soassetdtloid=" + tbldtl[i].sodtloid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                                sSql = "UPDATE QL_trnsoassetmst SET soassetmststatus='Approved' WHERE cmpcode='" + cmp + "' AND soassetmstoid=" + tbldtl[i].somstoid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                            }
        //                            sSql = "UPDATE QL_trnsoassetdtl SET soassetdtlstatus='' WHERE cmpcode='" + cmp + "' AND soassetdtloid IN (SELECT soassetdtloid FROM QL_trndoassetdtl WHERE cmpcode='" + cmp + "' AND doassetmstoid IN (SELECT doassetmstoid FROM QL_trnshipmentassetdtl WHERE cmpcode='" + cmp + "' AND shipmentassetmstoid=" + id + ") AND doassetdtloid NOT IN (SELECT doassetdtloid FROM QL_trnshipmentassetdtl WHERE cmpcode='" + cmp + "' AND shipmentassetmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsoassetmst SET soassetmststatus='Approved' WHERE cmpcode='" + cmp + "' AND soassetmstoid IN (SELECT soassetmstoid FROM QL_trndoassetdtl WHERE cmpcode='" + cmp + "' AND doassetmstoid IN (SELECT doassetmstoid FROM QL_trnshipmentassetdtl WHERE cmpcode='" + cmp + "' AND shipmentassetmstoid=" + id + ") AND doassetdtloid NOT IN (SELECT doassetdtloid FROM QL_trnshipmentassetdtl WHERE cmpcode='" + cmp + "' AND shipmentassetmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            decimal dPostDep = 0; decimal dPostDepIDR = 0; decimal dPostDepUSD = 0;
        //                            var dv = tbldtlasset.Where(x => x.assetmstoid == tbldtl[i].matoid).ToList();
        //                            if (dv != null)
        //                            {
        //                                for (var j = 0; j < dv.Count(); j++)
        //                                {
        //                                    if (Int32.Parse(dv[j].assetperiod) < Int32.Parse(sPeriod) || (dv[j].assetperiod == sPeriod && DateTime.Parse(servertime.ToString("MM/dd/yyyy")) > new DateTime(servertime.Year, servertime.Month, 15)))
        //                                    {
        //                                        sSql = "UPDATE QL_assetdtl SET assetdtlstatus='Complete', postuser='" + userid + "', postdate=CURRENT_TIMESTAMP WHERE cmpcode='" + cmp + "' AND assetdtloid=" + dv[j].assetdtloid;
        //                                        db.Database.ExecuteSqlCommand(sSql);
        //                                        db.SaveChanges();
        //                                        if (dv[j].assetperiodvalue > 0)
        //                                        {
        //                                            dPostDep += dv[j].assetperiodvalue;
        //                                            dPostDepIDR += dv[j].assetperiodvalueidr;
        //                                            dPostDepUSD += dv[j].assetperiodvalueusd;

        //                                            var sPostDate = servertime.ToString("MM/dd/yyyy");
        //                                            var sPostPeriod = sPeriod;
        //                                            if (dv[j].assetperiod != sPeriod)
        //                                            {
        //                                                sPostDate = new DateTime(Int32.Parse(ClassFunction.Left(dv[j].assetperiod, 4)), Int32.Parse(ClassFunction.Right(dv[j].assetperiod, 2)), DateTime.DaysInMonth(Int32.Parse(ClassFunction.Left(dv[j].assetperiod, 4)), Int32.Parse(ClassFunction.Right(dv[j].assetperiod, 2)))).ToString("MM/dd/yyyy");
        //                                                sPostPeriod = dv[j].assetperiod;
        //                                            }
        //                                            // Insert QL_trnglmst
        //                                            db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, iGlMstOid, DateTime.Parse(sPostDate), sPostPeriod, "Penyusutan Asset|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                                            db.SaveChanges();
        //                                            // Insert QL_trngldtl
        //                                            glseq = 1;
        //                                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, tbldtl[i].depacctgoid, "D", dv[j].assetperiodvalue, tbldtl[i].assetno, "Penyusutan Asset|No. " + tbldtl[i].assetno, "Post", userid, servertime, dv[j].assetperiodvalueidr, dv[j].assetperiodvalueusd, "QL_assetdtl " + dv[j].assetdtloid.ToString(), null, null, null, 0));
        //                                            db.SaveChanges();
        //                                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, tbldtl[i].accumdepacctgoid, "C", dv[j].assetperiodvalue, tbldtl[i].assetno, "Penyusutan Asset|No. " + tbldtl[i].assetno, "Post", userid, servertime, dv[j].assetperiodvalueidr, dv[j].assetperiodvalueusd, "QL_assetdtl " + dv[j].assetdtloid.ToString(), null, null, null, 0));
        //                                            db.SaveChanges();
        //                                        }
        //                                    }
        //                                }
        //                            }

        //                            sSql = "UPDATE /*QL_assetmst*/QL_mstmat SET assetaccumdep=assetaccumdep + " + dPostDep + ", assetaccumdepidr=assetaccumdepidr + " + dPostDepIDR + ", assetaccumdepusd=assetaccumdepusd + " + dPostDepUSD + ", assetmststatus='Closed', assetmstflag='Shipped', shipmentuser='" + userid + "', shipmenttime=CURRENT_TIMESTAMP, shipmentamt=" + tbldtl[i].assetaccumdep + dPostDep + ", shipmentamtidr=" + tbldtl[i].assetaccumdepidr + dPostDepIDR + ", shipmentamtusd=" + tbldtl[i].assetaccumdepusd + dPostDepUSD + " WHERE cmpcode='" + cmp + "' AND assetmstoid=" + tbldtl[i].matoid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnshipmentassetdtl SET shipmentassetvalueidr=" + (tbldtl[i].assetpurchaseidr - tbldtl[i].assetaccumdepidr - dPostDepIDR) + ", shipmentassetvalueusd=" + (tbldtl[i].assetpurchaseusd - tbldtl[i].assetaccumdepusd - dPostDepUSD) + " WHERE cmpcode='" + cmp + "' AND shipmentassetdtloid=" + tbldtl[i].shipmentdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            // Insert QL_trnglmst
        //                            db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, iGlMstOid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Shipment FA|No. " + transno + "|Asset No. " + tbldtl[i].assetno + "'", "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                            db.SaveChanges();
        //                            // Insert QL_trngldtl
        //                            glseq = 1;
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, tbldtl[i].accumdepacctgoid, "D", (tbldtl[i].assetaccumdep + dPostDep), transno, "Shipment FA|No. " + transno + "|Asset No. " + tbldtl[i].assetno + "'", "Post", userid, servertime, (tbldtl[i].assetaccumdepidr + dPostDepIDR), (tbldtl[i].assetaccumdepusd + dPostDepUSD), "QL_trnshipmentassetmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iTransitAcctgOid, "D", (tbldtl[i].assetpurchase - tbldtl[i].assetaccumdep - dPostDep), transno, "Shipment FA|No. " + transno + "|Asset No. " + tbldtl[i].assetno + "'", "Post", userid, servertime, (tbldtl[i].assetpurchaseidr - tbldtl[i].assetaccumdepidr - dPostDepIDR), (tbldtl[i].assetpurchaseusd - tbldtl[i].assetaccumdepusd - dPostDepUSD), "QL_trnshipmentassetmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();

        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, tbldtl[i].assetacctgoid, "C", tbldtl[i].assetpurchase, transno, "Shipment FA|No. " + transno + "|Asset No. " + tbldtl[i].assetno + "'", "Post", userid, servertime, tbldtl[i].assetpurchaseidr, tbldtl[i].assetpurchaseusd, "QL_trnshipmentassetmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlMstOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlDtlOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalShipmentLog(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnshipmentlogmst tblmst = db.QL_trnshipmentlogmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iConOid = ClassFunction.GenerateID("QL_CONMAT");
        //    var iCrdOid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var iGlMstOid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var iGlDtlOid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var iStockValOid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "LOG";

        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    sSql = "SELECT shipmentlogdtloid shipmentdtloid, sd.shipmentlogdtlseq shipmentdtlseq, sd.logoid matoid, (matrawcode + '(' + logno + ')') AS matcode, matrawlongdesc AS matlongdesc, sd.shipmentlogqty shipmentqty, sd.shipmentlogdtlnote shipmentdtlnote, sd.shipmentlogwhoid shipmentwhoid, som.sologno sono, ISNULL(shipmentlogdtlres3, '') AS shipmentonsostatus, sod.sologdtloid sodtloid, som.sologmstoid somstoid, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueidr, 0)) / NULLIF(SUM(NULLIF(stockqty, 0)),0) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.logoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueidr, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueusd, 0)) / NULLIF(SUM(NULLIF(stockqty, 0)),0) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.logoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueusd FROM QL_trnshipmentlogmst sm INNER JOIN QL_trnshipmentlogdtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentlogmstoid=sd.shipmentlogmstoid INNER JOIN QL_mstlog l ON sd.logoid=l.logoid INNER JOIN QL_mstmatraw m ON matrawoid=l.refoid INNER JOIN QL_mstgen g ON sd.shipmentlogunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentlogwhoid=g2.genoid INNER JOIN QL_trndologmst dom ON dom.cmpcode=sd.cmpcode AND dom.dologmstoid=sd.dologmstoid INNER JOIN QL_trndologdtl dod ON dod.cmpcode=sd.cmpcode AND dod.dologdtloid=sd.dologdtloid INNER JOIN QL_trnsologmst som ON som.cmpcode=dod.cmpcode AND som.sologmstoid=dod.sologmstoid INNER JOIN QL_trnsologdtl sod ON sod.cmpcode=dod.cmpcode AND sod.sologdtloid=dod.sologdtloid WHERE sd.shipmentlogmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<shipmentdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_LOG", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_LOG");
        //        if (tbldtl != null)
        //        {
        //            for (var i = 0; i < tbldtl.Count(); i++)
        //            {
        //                var totalqty = tbldtl.Where(x => x.matoid == tbldtl[i].matoid && x.shipmentwhoid == tbldtl[i].shipmentwhoid).Sum(x => x.shipmentqty);
        //                if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].matoid, tbldtl[i].shipmentwhoid, totalqty, refname))
        //                {
        //                    error = "Shipment Qty for Item Code : <STRONG>" + tbldtl[i].matcode + "</STRONG> must be less than Stock Qty!";
        //                    break;
        //                }
        //            }
        //        }
        //    }

        //    if (error == "")
        //    {
        //        var iDelAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iStockAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_LOG", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Shipment
        //                sSql = "UPDATE QL_trnshipmentlogmst SET shipmentlogno='" + transno + "', shipmentlogmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE shipmentlogmststatus='In Approval' AND shipmentlogmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnshipmentlogmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trndologdtl SET dologdtlstatus='' WHERE cmpcode='" + cmp + "' AND dologdtloid IN (SELECT dologdtloid FROM QL_trnshipmentlogdtl WHERE cmpcode='" + cmp + "' AND shipmentlogmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trndologmst SET dologmststatus='Post' WHERE cmpcode='" + cmp + "' AND dologmstoid IN (SELECT DISTINCT dologmstoid FROM QL_trnshipmentlogdtl WHERE cmpcode='" + cmp + "' AND shipmentlogmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            if (tbldtl[i].shipmentonsostatus != "")
        //                            {
        //                                sSql = "UPDATE QL_trnsologdtl SET sologdtlstatus='' WHERE cmpcode='" + cmp + "' AND sologdtloid=" + tbldtl[i].sodtloid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                                sSql = "UPDATE QL_trnsologmst SET sologmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sologmstoid=" + tbldtl[i].somstoid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                            }
        //                            sSql = "UPDATE QL_trnsologdtl SET sologdtlstatus='' WHERE cmpcode='" + cmp + "' AND sologdtloid IN (SELECT sologdtloid FROM QL_trndologdtl WHERE cmpcode='" + cmp + "' AND dologmstoid IN (SELECT dologmstoid FROM QL_trnshipmentlogdtl WHERE cmpcode='" + cmp + "' AND shipmentlogmstoid=" + id + ") AND dologdtloid NOT IN (SELECT dologdtloid FROM QL_trnshipmentlogdtl WHERE cmpcode='" + cmp + "' AND shipmentlogmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsologmst SET sologmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sologmstoid IN (SELECT sologmstoid FROM QL_trndologdtl WHERE cmpcode='" + cmp + "' AND dologmstoid IN (SELECT dologmstoid FROM QL_trnshipmentlogdtl WHERE cmpcode='" + cmp + "' AND shipmentlogmstoid=" + id + ") AND dologdtloid NOT IN (SELECT dologdtloid FROM QL_trnshipmentlogdtl WHERE cmpcode='" + cmp + "' AND shipmentlogmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnshipmentlogdtl SET shipmentlogvalueidr=" + tbldtl[i].shipmentvalueidr + ", shipmentlogvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE cmpcode='" + cmp + "' AND shipmentlogdtloid=" + tbldtl[i].shipmentdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, iConOid++, "SJLOG", "QL_trnshipmentlogdtl", id, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, "Shipment Log", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].shipmentdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, iCrdOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, 0, "QL_trnshipmentlogdtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueusd * tbldtl[i].shipmentqty * -1, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                iCrdOid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, iStockValOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnshipmentlogdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                iStockValOid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, iGlMstOid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Shipment Log|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    decimal glamt = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueusd);
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iDelAcctgOid, "D", glamt, transno, "Shipment Log|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentlogmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iStockAcctgOid, "C", glamt, transno, "Shipment Log|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentlogmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    iGlMstOid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iConOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iCrdOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iStockValOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlMstOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlDtlOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalShipmentSawn(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnshipmentsawnmst tblmst = db.QL_trnshipmentsawnmst.Find(cmp, id);

        //    var cRate = new ClassRate();
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iConOid = ClassFunction.GenerateID("QL_CONMAT");
        //    var iCrdOid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var iGlMstOid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var iGlDtlOid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var iStockValOid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "PALLET";

        //    var custoid = tblmst.custoid;
        //    var curroid = tblmst.curroid;

        //    //Data Detail
        //    sSql = "SELECT shipmentsawndtloid shipmentdtloid, sd.shipmentsawndtlseq shipmentdtlseq, sd.palletoid matoid, (matrawcode + '(' + palletno + ')') AS matcode, matrawlongdesc AS matlongdesc, sd.shipmentsawnqty shipmentqty, sd.shipmentsawndtlnote shipmentdtlnote, sd.shipmentsawnwhoid shipmentwhoid, som.sosawnno sono, ISNULL(shipmentsawndtlres3, '') AS shipmentonsostatus, sod.sosawndtloid sodtloid, som.sosawnmstoid somstoid, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueidr, 0)) / NULLIF(SUM(NULLIF(stockqty, 0)),0) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.palletoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueidr, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueusd, 0)) / NULLIF(SUM(NULLIF(stockqty, 0)),0) FROM QL_stockvalue st WHERE st.cmpcode=sd.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=sd.palletoid AND refname='" + refname + "' AND closeflag=''), 0.0) AS shipmentvalueusd FROM QL_trnshipmentsawnmst sm INNER JOIN QL_trnshipmentsawndtl sd ON sd.cmpcode=sm.cmpcode AND sm.shipmentsawnmstoid=sd.shipmentsawnmstoid INNER JOIN QL_mstpallet l ON sd.palletoid=l.palletoid INNER JOIN QL_mstmatraw m ON matrawoid=l.refoid INNER JOIN QL_mstgen g ON sd.shipmentsawnunitoid=g.genoid INNER JOIN QL_mstgen g2 ON sd.shipmentsawnwhoid=g2.genoid INNER JOIN QL_trndosawnmst dom ON dom.cmpcode=sd.cmpcode AND dom.dosawnmstoid=sd.dosawnmstoid INNER JOIN QL_trndosawndtl dod ON dod.cmpcode=sd.cmpcode AND dod.dosawndtloid=sd.dosawndtloid INNER JOIN QL_trnsosawnmst som ON som.cmpcode=dod.cmpcode AND som.sosawnmstoid=dod.sosawnmstoid INNER JOIN QL_trnsosawndtl sod ON sod.cmpcode=dod.cmpcode AND sod.sosawndtloid=dod.sosawndtloid WHERE sd.shipmentsawnmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<shipmentdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, servertime.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;

        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_ST", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_ST");
        //        if (tbldtl != null)
        //        {
        //            for (var i = 0; i < tbldtl.Count(); i++)
        //            {
        //                var totalqty = tbldtl.Where(x => x.matoid == tbldtl[i].matoid && x.shipmentwhoid == tbldtl[i].shipmentwhoid).Sum(x => x.shipmentqty);
        //                if (!ClassFunction.IsStockAvailable(cmp, sPeriod, tbldtl[i].matoid, tbldtl[i].shipmentwhoid, totalqty, refname))
        //                {
        //                    error = "Shipment Qty for Item Code : <STRONG>" + tbldtl[i].matcode + "</STRONG> must be less than Stock Qty!";
        //                    break;
        //                }
        //            }
        //        }
        //    }

        //    if (error == "")
        //    {
        //        var iDelAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iStockAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_ST", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Shipment
        //                sSql = "UPDATE QL_trnshipmentsawnmst SET shipmentsawnno='" + transno + "', shipmentsawnmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE shipmentsawnmststatus='In Approval' AND shipmentsawnmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnshipmentsawnmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trndosawndtl SET dosawndtlstatus='' WHERE cmpcode='" + cmp + "' AND dosawndtloid IN (SELECT dosawndtloid FROM QL_trnshipmentsawndtl WHERE cmpcode='" + cmp + "' AND shipmentsawnmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trndosawnmst SET dosawnmststatus='Post' WHERE cmpcode='" + cmp + "' AND dosawnmstoid IN (SELECT DISTINCT dosawnmstoid FROM QL_trnshipmentsawndtl WHERE cmpcode='" + cmp + "' AND shipmentsawnmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            if (tbldtl[i].shipmentonsostatus != "")
        //                            {
        //                                sSql = "UPDATE QL_trnsosawndtl SET sosawndtlstatus='' WHERE cmpcode='" + cmp + "' AND sosawndtloid=" + tbldtl[i].sodtloid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                                sSql = "UPDATE QL_trnsosawnmst SET sosawnmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sosawnmstoid=" + tbldtl[i].somstoid;
        //                                db.Database.ExecuteSqlCommand(sSql);
        //                                db.SaveChanges();
        //                            }
        //                            sSql = "UPDATE QL_trnsosawndtl SET sosawndtlstatus='' WHERE cmpcode='" + cmp + "' AND sosawndtloid IN (SELECT sosawndtloid FROM QL_trndosawndtl WHERE cmpcode='" + cmp + "' AND dosawnmstoid IN (SELECT dosawnmstoid FROM QL_trnshipmentsawndtl WHERE cmpcode='" + cmp + "' AND shipmentsawnmstoid=" + id + ") AND dosawndtloid NOT IN (SELECT dosawndtloid FROM QL_trnshipmentsawndtl WHERE cmpcode='" + cmp + "' AND shipmentsawnmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsosawnmst SET sosawnmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sosawnmstoid IN (SELECT sosawnmstoid FROM QL_trndosawndtl WHERE cmpcode='" + cmp + "' AND dosawnmstoid IN (SELECT dosawnmstoid FROM QL_trnshipmentsawndtl WHERE cmpcode='" + cmp + "' AND shipmentsawnmstoid=" + id + ") AND dosawndtloid NOT IN (SELECT dosawndtloid FROM QL_trnshipmentsawndtl WHERE cmpcode='" + cmp + "' AND shipmentsawnmstoid=" + id + "))";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnshipmentsawndtl SET shipmentsawnvalueidr=" + tbldtl[i].shipmentvalueidr + ", shipmentsawnvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE cmpcode='" + cmp + "' AND shipmentsawndtloid=" + tbldtl[i].shipmentdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, iConOid++, "SJST", "QL_trnshipmentsawndtl", id, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, "Shipment Sawn Timber", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].shipmentdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, iCrdOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentwhoid, tbldtl[i].shipmentqty * -1, 0, "QL_trnshipmentsawndtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueusd * tbldtl[i].shipmentqty * -1, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                iCrdOid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, iStockValOid, tbldtl[i].matoid, refname, tbldtl[i].shipmentqty * -1, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnshipmentsawndtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                iStockValOid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, iGlMstOid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Shipment ST|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    db.SaveChanges();

        //                    decimal glamt = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.shipmentqty * x.shipmentvalueusd);
        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iDelAcctgOid, "D", glamt, transno, "Shipment ST|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentsawnmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, iStockAcctgOid, "C", glamt, transno, "Shipment ST|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnshipmentsawnmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    iGlMstOid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iConOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iCrdOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iStockValOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlMstOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlDtlOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //#endregion

        //#region Approval Sales Return

        //public class sretdtl
        //{
        //    public int sretdtlseq { get; set; }
        //    public int sretdtloid { get; set; }
        //    public int matoid { get; set; }
        //    public string matcode { get; set; }
        //    public string matlongdesc { get; set; }
        //    public decimal sretqty { get; set; }
        //    public int sretwhoid { get; set; }
        //    public decimal shipmentvalueidr { get; set; }
        //    public decimal shipmentvalueusd { get; set; }
        //    public int shipmentdtloid { get; set; }
        //}

        //private void ApprovalSretRaw(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsretrawmst tblmst = db.QL_trnsretrawmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "RAW MATERIAL";

        //    //Data Detail
        //    sSql = "SELECT sretrawdtlseq AS sretdtlseq, sretrawdtloid AS sretdtloid, sretd.matrawoid AS matoid, matrawcode AS matcode, matrawlongdesc AS matlongdesc, sretrawqty AS sretqty, sretrawdtlnote AS sretdtlnote, sretrawwhoid AS sretwhoid, shipmentrawvalueidr AS shipmentvalueidr, shipmentrawvalueusd AS shipmentvalueusd, sretd.shipmentrawdtloid AS shipmentdtloid FROM QL_trnsretrawmst sretm INNER JOIN QL_trnsretrawdtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretrawmstoid=sretm.sretrawmstoid INNER JOIN QL_mstmatraw m ON m.matrawoid=sretd.matrawoid INNER JOIN QL_trnshipmentrawdtl sd ON sd.cmpcode=sretd.cmpcode AND sd.shipmentrawdtloid=sretd.shipmentrawdtloid WHERE sretm.sretrawmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<sretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_RM", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_RM");
        //    }

        //    if (error == "")
        //    {
        //        var iDebetAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_RM", cmp));
        //        var iCreditAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnsretrawmst SET sretrawno='" + transno + "', sretrawmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE sretrawmststatus='In Approval' AND sretrawmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsretrawmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentrawdtl SET shipmentrawdtlres1='' WHERE cmpcode='" + cmp + "' AND shipmentrawdtloid IN (SELECT shipmentrawdtloid FROM QL_trnsretrawdtl WHERE cmpcode='" + cmp + "' AND sretrawmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentrawmst SET shipmentrawmstres1='' WHERE cmpcode='" + cmp + "' AND shipmentrawmstoid IN (SELECT shipmentrawmstoid FROM QL_trnsretrawmst WHERE cmpcode='" + cmp + "' AND sretrawmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            sSql = "UPDATE QL_trnsorawdtl SET sorawdtlstatus='' WHERE cmpcode='" + cmp + "' AND sorawdtlstatus<>'' AND sorawdtloid IN (SELECT dod.sorawdtloid FROM QL_trnshipmentrawdtl sd INNER JOIN QL_trndorawdtl dod ON dod.cmpcode=sd.cmpcode AND dod.dorawdtloid=sd.dorawdtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentrawdtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsorawmst SET sorawmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sorawmststatus<>'Approved' AND sorawmstoid IN (SELECT dod.sorawmstoid FROM QL_trnshipmentrawdtl sd INNER JOIN QL_trndorawdtl dod ON dod.cmpcode=sd.cmpcode AND dod.dorawdtloid=sd.dorawdtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentrawdtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            sSql = "UPDATE QL_trnsretrawdtl SET sretrawvalueidr=" + tbldtl[i].shipmentvalueidr + ", sretrawvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE sretrawmstoid=" + id + " AND sretrawdtloid=" + tbldtl[i].sretdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "SRETRM", "QL_trnsretrawdtl", id, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, "Sales Return Raw Material", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].sretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, 0, "QL_trnsretrawdtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].sretqty, tbldtl[i].shipmentvalueusd * tbldtl[i].sretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].sretqty, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnsretrawdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    decimal glamt = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.sretqty * x.shipmentvalueusd);

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Sret RM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 0, 0, 1, 1, glamtidr / glamtusd, glamtidr / glamtusd));
        //                    db.SaveChanges();

        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iDebetAcctgOid, "D", glamt, transno, "Sret RM|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretrawmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iCreditAcctgOid, "C", glamt, transno, "Sret RM|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretrawmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    glmstoid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSretGen(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsretgenmst tblmst = db.QL_trnsretgenmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "GENERAL MATERIAL";

        //    //Data Detail
        //    sSql = "SELECT sretgendtlseq AS sretdtlseq, sretgendtloid AS sretdtloid, sretd.matgenoid AS matoid, matgencode AS matcode, matgenlongdesc AS matlongdesc, sretgenqty AS sretqty, sretgendtlnote AS sretdtlnote, sretgenwhoid AS sretwhoid, shipmentgenvalueidr AS shipmentvalueidr, shipmentgenvalueusd AS shipmentvalueusd, sretd.shipmentgendtloid AS shipmentdtloid FROM QL_trnsretgenmst sretm INNER JOIN QL_trnsretgendtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretgenmstoid=sretm.sretgenmstoid INNER JOIN QL_mstmatgen m ON m.matgenoid=sretd.matgenoid INNER JOIN QL_trnshipmentgendtl sd ON sd.cmpcode=sretd.cmpcode AND sd.shipmentgendtloid=sretd.shipmentgendtloid WHERE sretm.sretgenmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<sretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_GM", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_GM");
        //    }

        //    if (error == "")
        //    {
        //        var iDebetAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_GM", cmp));
        //        var iCreditAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnsretgenmst SET sretgenno='" + transno + "', sretgenmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE sretgenmststatus='In Approval' AND sretgenmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsretgenmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentgendtl SET shipmentgendtlres1='' WHERE cmpcode='" + cmp + "' AND shipmentgendtloid IN (SELECT shipmentgendtloid FROM QL_trnsretgendtl WHERE cmpcode='" + cmp + "' AND sretgenmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentgenmst SET shipmentgenmstres1='' WHERE cmpcode='" + cmp + "' AND shipmentgenmstoid IN (SELECT shipmentgenmstoid FROM QL_trnsretgenmst WHERE cmpcode='" + cmp + "' AND sretgenmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            sSql = "UPDATE QL_trnsogendtl SET sogendtlstatus='' WHERE cmpcode='" + cmp + "' AND sogendtlstatus<>'' AND sogendtloid IN (SELECT dod.sogendtloid FROM QL_trnshipmentgendtl sd INNER JOIN QL_trndogendtl dod ON dod.cmpcode=sd.cmpcode AND dod.dogendtloid=sd.dogendtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentgendtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsogenmst SET sogenmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sogenmststatus<>'Approved' AND sogenmstoid IN (SELECT dod.sogenmstoid FROM QL_trnshipmentgendtl sd INNER JOIN QL_trndogendtl dod ON dod.cmpcode=sd.cmpcode AND dod.dogendtloid=sd.dogendtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentgendtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            sSql = "UPDATE QL_trnsretgendtl SET sretgenvalueidr=" + tbldtl[i].shipmentvalueidr + ", sretgenvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE sretgenmstoid=" + id + " AND sretgendtloid=" + tbldtl[i].sretdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "SRETGM", "QL_trnsretgendtl", id, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, "Sales Return General Material", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].sretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, 0, "QL_trnsretgendtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].sretqty, tbldtl[i].shipmentvalueusd * tbldtl[i].sretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].sretqty, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnsretgendtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    decimal glamt = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.sretqty * x.shipmentvalueusd);

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Sret GM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 0, 0, 1, 1, glamtidr / glamtusd, glamtidr / glamtusd));
        //                    db.SaveChanges();

        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iDebetAcctgOid, "D", glamt, transno, "Sret GM|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretgenmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iCreditAcctgOid, "C", glamt, transno, "Sret GM|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretgenmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    glmstoid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSretSP(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsretspmst tblmst = db.QL_trnsretspmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "SPARE PART";

        //    //Data Detail
        //    sSql = "SELECT sretspdtlseq AS sretdtlseq, sretspdtloid AS sretdtloid, sretd.sparepartoid AS matoid, sparepartcode AS matcode, sparepartlongdesc AS matlongdesc, sretspqty AS sretqty, sretspdtlnote AS sretdtlnote, sretspwhoid AS sretwhoid, shipmentspvalueidr AS shipmentvalueidr, shipmentspvalueusd AS shipmentvalueusd, sretd.shipmentspdtloid AS shipmentdtloid FROM QL_trnsretspmst sretm INNER JOIN QL_trnsretspdtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretspmstoid=sretm.sretspmstoid INNER JOIN QL_mstsparepart m ON m.sparepartoid=sretd.sparepartoid INNER JOIN QL_trnshipmentspdtl sd ON sd.cmpcode=sretd.cmpcode AND sd.shipmentspdtloid=sretd.shipmentspdtloid WHERE sretm.sretspmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<sretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_SP", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_SP");
        //    }

        //    if (error == "")
        //    {
        //        var iDebetAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_SP", cmp));
        //        var iCreditAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnsretspmst SET sretspno='" + transno + "', sretspmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE sretspmststatus='In Approval' AND sretspmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsretspmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentspdtl SET shipmentspdtlres1='' WHERE cmpcode='" + cmp + "' AND shipmentspdtloid IN (SELECT shipmentspdtloid FROM QL_trnsretspdtl WHERE cmpcode='" + cmp + "' AND sretspmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentspmst SET shipmentspmstres1='' WHERE cmpcode='" + cmp + "' AND shipmentspmstoid IN (SELECT shipmentspmstoid FROM QL_trnsretspmst WHERE cmpcode='" + cmp + "' AND sretspmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            sSql = "UPDATE QL_trnsospdtl SET sospdtlstatus='' WHERE cmpcode='" + cmp + "' AND sospdtlstatus<>'' AND sospdtloid IN (SELECT dod.sospdtloid FROM QL_trnshipmentspdtl sd INNER JOIN QL_trndospdtl dod ON dod.cmpcode=sd.cmpcode AND dod.dospdtloid=sd.dospdtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentspdtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsospmst SET sospmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sospmststatus<>'Approved' AND sospmstoid IN (SELECT dod.sospmstoid FROM QL_trnshipmentspdtl sd INNER JOIN QL_trndospdtl dod ON dod.cmpcode=sd.cmpcode AND dod.dospdtloid=sd.dospdtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentspdtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            sSql = "UPDATE QL_trnsretspdtl SET sretspvalueidr=" + tbldtl[i].shipmentvalueidr + ", sretspvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE sretspmstoid=" + id + " AND sretspdtloid=" + tbldtl[i].sretdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "SRETSP", "QL_trnsretspdtl", id, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, "Sales Return Spare Part", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].sretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, 0, "QL_trnsretspdtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].sretqty, tbldtl[i].shipmentvalueusd * tbldtl[i].sretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].sretqty, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnsretspdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    decimal glamt = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.sretqty * x.shipmentvalueusd);

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Sret SP|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 0, 0, 1, 1, glamtidr / glamtusd, glamtidr / glamtusd));
        //                    db.SaveChanges();

        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iDebetAcctgOid, "D", glamt, transno, "Sret SP|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretspmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iCreditAcctgOid, "C", glamt, transno, "Sret SP|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretspmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    glmstoid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSretFG(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsretitemmst tblmst = db.QL_trnsretitemmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "FINISH GOOD";

        //    //Data Detail
        //    sSql = "SELECT sretitemdtlseq AS sretdtlseq, sretitemdtloid AS sretdtloid, sretd.itemoid AS matoid, itemcode AS matcode, itemlongdesc AS matlongdesc, sretitemqty AS sretqty, sretitemdtlnote AS sretdtlnote, sretitemwhoid AS sretwhoid, shipmentitemvalueidr AS shipmentvalueidr, shipmentitemvalueusd AS shipmentvalueusd, sretd.shipmentitemdtloid AS shipmentdtloid FROM QL_trnsretitemmst sretm INNER JOIN QL_trnsretitemdtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretitemmstoid=sretm.sretitemmstoid INNER JOIN QL_mstitem m ON m.itemoid=sretd.itemoid INNER JOIN QL_trnshipmentitemdtl sd ON sd.cmpcode=sretd.cmpcode AND sd.shipmentitemdtloid=sretd.shipmentitemdtloid WHERE sretm.sretitemmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<sretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_FG", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_FG");
        //    }

        //    if (error == "")
        //    {
        //        var iDebetAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_FG", cmp));
        //        var iCreditAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnsretitemmst SET sretitemno='" + transno + "', sretitemmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE sretitemmststatus='In Approval' AND sretitemmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsretitemmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentitemdtl SET shipmentitemdtlres1='' WHERE cmpcode='" + cmp + "' AND shipmentitemdtloid IN (SELECT shipmentitemdtloid FROM QL_trnsretitemdtl WHERE cmpcode='" + cmp + "' AND sretitemmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentitemmst SET shipmentitemmstres1='' WHERE cmpcode='" + cmp + "' AND shipmentitemmstoid IN (SELECT shipmentitemmstoid FROM QL_trnsretitemmst WHERE cmpcode='" + cmp + "' AND sretitemmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            sSql = "UPDATE QL_trnsoitemdtl SET soitemdtlstatus='' WHERE cmpcode='" + cmp + "' AND soitemdtlstatus<>'' AND soitemdtloid IN (SELECT dod.soitemdtloid FROM QL_trnshipmentitemdtl sd INNER JOIN QL_trndoitemdtl dod ON dod.cmpcode=sd.cmpcode AND dod.doitemdtloid=sd.doitemdtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentitemdtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsoitemmst SET soitemmststatus='Approved' WHERE cmpcode='" + cmp + "' AND soitemmststatus<>'Approved' AND soitemmstoid IN (SELECT dod.soitemmstoid FROM QL_trnshipmentitemdtl sd INNER JOIN QL_trndoitemdtl dod ON dod.cmpcode=sd.cmpcode AND dod.doitemdtloid=sd.doitemdtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentitemdtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            sSql = "UPDATE QL_trnsretitemdtl SET sretitemvalueidr=" + tbldtl[i].shipmentvalueidr + ", sretitemvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE sretitemmstoid=" + id + " AND sretitemdtloid=" + tbldtl[i].sretdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "SRETFG", "QL_trnsretitemdtl", id, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, "Sales Return Finish Good", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].sretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, 0, "QL_trnsretitemdtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].sretqty, tbldtl[i].shipmentvalueusd * tbldtl[i].sretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].sretqty, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnsretitemdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    decimal glamt = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.sretqty * x.shipmentvalueusd);

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Sret FG|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 0, 0, 1, 1, glamtidr / glamtusd, glamtidr / glamtusd));
        //                    db.SaveChanges();

        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iDebetAcctgOid, "D", glamt, transno, "Sret FG|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretitemmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iCreditAcctgOid, "C", glamt, transno, "Sret FG|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretitemmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    glmstoid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSretLog(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsretlogmst tblmst = db.QL_trnsretlogmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "LOG";

        //    //Data Detail
        //    sSql = "SELECT sretlogdtlseq AS sretdtlseq, sretlogdtloid AS sretdtloid, sretd.logoid AS matoid, logno AS matno, matrawcode AS matcode, matrawlongdesc AS matlongdesc, sretlogqty AS sretqty, sretlogdtlnote AS sretdtlnote, sretlogwhoid AS sretwhoid, shipmentlogvalueidr AS shipmentvalueidr, shipmentlogvalueusd AS shipmentvalueusd, sretd.shipmentlogdtloid AS shipmentdtloid FROM QL_trnsretlogmst sretm INNER JOIN QL_trnsretlogdtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretlogmstoid=sretm.sretlogmstoid INNER JOIN QL_mstlog l ON l.cmpcode=sretd.cmpcode AND l.logoid=sretd.logoid INNER JOIN QL_mstmatraw m ON m.matrawoid=l.refoid INNER JOIN QL_trnshipmentlogdtl sd ON sd.cmpcode=sretd.cmpcode AND sd.shipmentlogdtloid=sretd.shipmentlogdtloid WHERE sretm.sretlogmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<sretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_LOG", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_LOG");
        //    }

        //    if (error == "")
        //    {
        //        var iDebetAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_LOG", cmp));
        //        var iCreditAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnsretlogmst SET sretlogno='" + transno + "', sretlogmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE sretlogmststatus='In Approval' AND sretlogmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsretlogmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentlogdtl SET shipmentlogdtlres1='' WHERE cmpcode='" + cmp + "' AND shipmentlogdtloid IN (SELECT shipmentlogdtloid FROM QL_trnsretlogdtl WHERE cmpcode='" + cmp + "' AND sretlogmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentlogmst SET shipmentlogmstres1='' WHERE cmpcode='" + cmp + "' AND shipmentlogmstoid IN (SELECT shipmentlogmstoid FROM QL_trnsretlogmst WHERE cmpcode='" + cmp + "' AND sretlogmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            sSql = "UPDATE QL_trnsologdtl SET sologdtlstatus='' WHERE cmpcode='" + cmp + "' AND sologdtlstatus<>'' AND sologdtloid IN (SELECT dod.sologdtloid FROM QL_trnshipmentlogdtl sd INNER JOIN QL_trndologdtl dod ON dod.cmpcode=sd.cmpcode AND dod.dologdtloid=sd.dologdtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentlogdtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsologmst SET sologmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sologmststatus<>'Approved' AND sologmstoid IN (SELECT dod.sologmstoid FROM QL_trnshipmentlogdtl sd INNER JOIN QL_trndologdtl dod ON dod.cmpcode=sd.cmpcode AND dod.dologdtloid=sd.dologdtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentlogdtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            sSql = "UPDATE QL_trnsretlogdtl SET sretlogvalueidr=" + tbldtl[i].shipmentvalueidr + ", sretlogvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE sretlogmstoid=" + id + " AND sretlogdtloid=" + tbldtl[i].sretdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "SRETLOG", "QL_trnsretlogdtl", id, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, "Sales Return Log", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].sretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, 0, "QL_trnsretlogdtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].sretqty, tbldtl[i].shipmentvalueusd * tbldtl[i].sretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].sretqty, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnsretlogdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    decimal glamt = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.sretqty * x.shipmentvalueusd);

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Sret Log|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 0, 0, 1, 1, glamtidr / glamtusd, glamtidr / glamtusd));
        //                    db.SaveChanges();

        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iDebetAcctgOid, "D", glamt, transno, "Sret Log|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretlogmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iCreditAcctgOid, "C", glamt, transno, "Sret Log|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretlogmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    glmstoid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalSretSawn(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnsretsawnmst tblmst = db.QL_trnsretsawnmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var refname = "PALLET";

        //    //Data Detail
        //    sSql = "SELECT sretsawndtlseq AS sretdtlseq, sretsawndtloid AS sretdtloid, sretd.palletoid AS matoid, palletno AS matno, matrawcode AS matcode, matrawlongdesc AS matlongdesc, sretsawnqty AS sretqty, gunit.gendesc AS sretunit, gwh.gendesc AS sretwh, sretsawndtlnote AS sretdtlnote, sretsawnwhoid AS sretwhoid, shipmentsawnvalueidr AS shipmentvalueidr, shipmentsawnvalueusd AS shipmentvalueusd, sretd.shipmentsawndtloid AS shipmentdtloid FROM QL_trnsretsawnmst sretm INNER JOIN QL_trnsretsawndtl sretd ON sretd.cmpcode=sretm.cmpcode AND sretd.sretsawnmstoid=sretm.sretsawnmstoid INNER JOIN QL_mstpallet p ON p.cmpcode=sretd.cmpcode AND p.palletoid=sretd.palletoid INNER JOIN QL_mstmatraw m ON m.matrawoid=p.refoid INNER JOIN QL_mstgen gunit ON gunit.genoid=sretsawnunitoid INNER JOIN QL_mstgen gwh ON gwh.genoid=sretsawnwhoid INNER JOIN QL_trnshipmentsawndtl sd ON sd.cmpcode=sretd.cmpcode AND sd.shipmentsawndtloid=sretd.shipmentsawndtloid WHERE sretm.sretsawnmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<sretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_ST", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_ST");
        //    }

        //    if (error == "")
        //    {
        //        var iDebetAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_ST", cmp));
        //        var iCreditAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnsretsawnmst SET sretsawnno='" + transno + "', sretsawnmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE sretsawnmststatus='In Approval' AND sretsawnmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnsretsawnmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentsawndtl SET shipmentsawndtlres1='' WHERE cmpcode='" + cmp + "' AND shipmentsawndtloid IN (SELECT shipmentsawndtloid FROM QL_trnsretsawndtl WHERE cmpcode='" + cmp + "' AND sretsawnmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentsawnmst SET shipmentsawnmstres1='' WHERE cmpcode='" + cmp + "' AND shipmentsawnmstoid IN (SELECT shipmentsawnmstoid FROM QL_trnsretsawnmst WHERE cmpcode='" + cmp + "' AND sretsawnmstoid=" + id;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            sSql = "UPDATE QL_trnsosawndtl SET sosawndtlstatus='' WHERE cmpcode='" + cmp + "' AND sosawndtlstatus<>'' AND sosawndtloid IN (SELECT dod.sosawndtloid FROM QL_trnshipmentsawndtl sd INNER JOIN QL_trndosawndtl dod ON dod.cmpcode=sd.cmpcode AND dod.dosawndtloid=sd.dosawndtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentsawndtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();
        //                            sSql = "UPDATE QL_trnsosawnmst SET sosawnmststatus='Approved' WHERE cmpcode='" + cmp + "' AND sosawnmststatus<>'Approved' AND sosawnmstoid IN (SELECT dod.sosawnmstoid FROM QL_trnshipmentsawndtl sd INNER JOIN QL_trndosawndtl dod ON dod.cmpcode=sd.cmpcode AND dod.dosawndtloid=sd.dosawndtloid WHERE sd.cmpcode='" + cmp + "' AND shipmentsawndtloid=" + tbldtl[i].shipmentdtloid + ")";
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            sSql = "UPDATE QL_trnsretsawndtl SET sretsawnvalueidr=" + tbldtl[i].shipmentvalueidr + ", sretsawnvalueusd=" + tbldtl[i].shipmentvalueusd + " WHERE sretsawnmstoid=" + id + " AND sretsawndtloid=" + tbldtl[i].sretdtloid;
        //                            db.Database.ExecuteSqlCommand(sSql);
        //                            db.SaveChanges();

        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "SRETST", "QL_trnsretsawndtl", id, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, "Sales Return Sawn Timber", transno, userid, null, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, 0, null, tbldtl[i].sretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].sretwhoid, tbldtl[i].sretqty, 0, "QL_trnsretsawndtl", userid, null, tbldtl[i].shipmentvalueidr * tbldtl[i].sretqty, tbldtl[i].shipmentvalueusd * tbldtl[i].sretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].sretqty, tbldtl[i].shipmentvalueidr, tbldtl[i].shipmentvalueusd, "QL_trnsretsawndtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    decimal glamt = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtidr = tbldtl.Sum(x => x.sretqty * x.shipmentvalueidr);
        //                    decimal glamtusd = tbldtl.Sum(x => x.sretqty * x.shipmentvalueusd);

        //                    // Insert QL_trnglmst
        //                    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Sret ST|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 0, 0, 1, 1, glamtidr / glamtusd, glamtidr / glamtusd));
        //                    db.SaveChanges();

        //                    var glseq = 1;

        //                    // Insert QL_trngldtl
        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iDebetAcctgOid, "D", glamt, transno, "Sret ST|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretsawnmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();

        //                    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iCreditAcctgOid, "C", glamt, transno, "Sret ST|No. " + transno, "Post", userid, servertime, glamtidr, glamtusd, "QL_trnsretsawnmst " + id.ToString(), null, null, null, 0));
        //                    db.SaveChanges();
        //                    glmstoid++;

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //#endregion

        //#region Approval A/R

        //public class ardtl
        //{
        //    public int ardtlseq { get; set; }
        //    public int matoid { get; set; }
        //    public string matcode { get; set; }
        //    public string matlongdesc { get; set; }
        //    public decimal arqty { get; set; }
        //    public decimal arprice { get; set; }
        //    public decimal ardtlamt { get; set; }
        //    public decimal ardtldiscamt { get; set; }
        //    public decimal ardtlnetto { get; set; }
        //    public string ardtlnote { get; set; }
        //}

        //private void ApprovalARRaw(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnarrawmst*/QL_trnjualmst tblmst = db./*QL_trnarrawmst*/QL_trnjualmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arrawdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal argrandtotal = Convert.ToDecimal(tblmst.arrawgrandtotal);
        //    decimal artotalamt = Convert.ToDecimal(tblmst.arrawtotalamt - tblmst.arrawtotaldiscdtl);
        //    decimal artaxamt = Convert.ToDecimal(tblmst.arrawtaxamt);
        //    var shipmentdtl = (from sd in db.QL_trnshipmentrawdtl join ard in db.QL_trnarrawdtl on new { cmpcode = sd.cmpcode, shipmentrawdtloid = sd.shipmentrawdtloid } equals new { cmpcode = ard.cmpcode, shipmentrawdtloid = ard.shipmentrawdtloid } where ard.cmpcode == cmp && ard.arrawmstoid == id select new { sd.shipmentrawvalueidr, sd.shipmentrawvalueusd, ard.arrawqty }).ToList();
        //    decimal shipmentamtidr = shipmentdtl.Sum(x => x.shipmentrawvalueidr * x.arrawqty);
        //    decimal shipmentamtusd = shipmentdtl.Sum(x => x.shipmentrawvalueidr * x.arrawqty);
        //    var glseq = 1;

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, sDate.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE /*QL_trnarrawmst*/QL_trnjualmst SET arrawno='" + transno + "', arrawmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", arrawratetoidr='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', arrawratetousd='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid=" + cRate.GetRateMonthlyOid + ", arrawrate2toidr='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', arrawrate2tousd='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "'";
        //                }
        //                sSql += " WHERE arrawmststatus='In Approval' AND arrawmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnarrawmst*/QL_trnjualmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentrawdtl SET shipmentrawdtlstatus='' WHERE cmpcode='" + cmp + "' AND shipmentrawdtloid IN (SELECT shipmentrawdtloid FROM QL_trnarrawdtl WHERE cmpcode='" + cmp + "' AND arrawmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentrawmst SET shipmentrawmststatus='Approved' WHERE cmpcode='" + cmp + "' AND shipmentrawmstoid IN (SELECT shipmentrawmstoid FROM QL_trnarrawdtl WHERE cmpcode='" + cmp + "' AND arrawmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "/*QL_trnarrawmst*/QL_trnjualmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARRM", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), argrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, 0, argrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
        //                    if (shipmentamtidr > 0 && shipmentamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R RM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, shipmentamtidr / shipmentamtusd, shipmentamtidr / shipmentamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : HPP Penjualan
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "D", shipmentamtidr, transno, "A/R RM|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "/*QL_trnarrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "C", shipmentamtidr, transno, "A/R RM|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "/*QL_trnarrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (argrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R RM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = (argrandtotal * cRate.GetRateMonthlyIDRValue) - ((artotalamt * cRate.GetRateMonthlyIDRValue) + (artaxamt * cRate.GetRateMonthlyIDRValue));
        //                        decimal dSelUSD = (argrandtotal * cRate.GetRateMonthlyUSDValue) - ((artotalamt * cRate.GetRateMonthlyUSDValue) + (artaxamt * cRate.GetRateMonthlyUSDValue));

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "D", argrandtotal, transno, "A/R RM|No. " + transno, "Post", userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, argrandtotal * cRate.GetRateMonthlyUSDValue, "/*QL_trnarrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R RM|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "/*QL_trnarrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R RM|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "/*QL_trnarrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "C", artotalamt, transno, "A/R RM|No. " + transno, "Post", userid, servertime, artotalamt * cRate.GetRateMonthlyIDRValue, artotalamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (artaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "C", artaxamt, transno, "A/R RM|No. " + transno, "Post", userid, servertime, artaxamt * cRate.GetRateMonthlyIDRValue, artaxamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARGen(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnargenmst tblmst = db.QL_trnargenmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.argendate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal argrandtotal = Convert.ToDecimal(tblmst.argengrandtotal);
        //    decimal artotalamt = Convert.ToDecimal(tblmst.argentotalamt - tblmst.argentotaldiscdtl);
        //    decimal artaxamt = Convert.ToDecimal(tblmst.argentaxamt);
        //    var shipmentdtl = (from sd in db.QL_trnshipmentgendtl join ard in db.QL_trnargendtl on new { cmpcode = sd.cmpcode, shipmentgendtloid = sd.shipmentgendtloid } equals new { cmpcode = ard.cmpcode, shipmentgendtloid = ard.shipmentgendtloid } where ard.cmpcode == cmp && ard.argenmstoid == id select new { sd.shipmentgenvalueidr, sd.shipmentgenvalueusd, ard.argenqty }).ToList();
        //    decimal shipmentamtidr = shipmentdtl.Sum(x => x.shipmentgenvalueidr * x.argenqty);
        //    decimal shipmentamtusd = shipmentdtl.Sum(x => x.shipmentgenvalueidr * x.argenqty);
        //    var glseq = 1;

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, sDate.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnargenmst SET argenno='" + transno + "', argenmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", argenratetoidr='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', argenratetousd='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid=" + cRate.GetRateMonthlyOid + ", argenrate2toidr='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', argenrate2tousd='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "'";
        //                }
        //                sSql += " WHERE argenmststatus='In Approval' AND argenmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnargenmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentgendtl SET shipmentgendtlstatus='' WHERE cmpcode='" + cmp + "' AND shipmentgendtloid IN (SELECT shipmentgendtloid FROM QL_trnargendtl WHERE cmpcode='" + cmp + "' AND argenmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentgenmst SET shipmentgenmststatus='Approved' WHERE cmpcode='" + cmp + "' AND shipmentgenmstoid IN (SELECT shipmentgenmstoid FROM QL_trnargendtl WHERE cmpcode='" + cmp + "' AND argenmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "QL_trnargenmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARGM", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), argrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, 0, argrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
        //                    if (shipmentamtidr > 0 && shipmentamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R GM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, shipmentamtidr / shipmentamtusd, shipmentamtidr / shipmentamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : HPP Penjualan
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "D", shipmentamtidr, transno, "A/R GM|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "QL_trnargenmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "C", shipmentamtidr, transno, "A/R GM|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "QL_trnargenmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (argrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R GM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = (argrandtotal * cRate.GetRateMonthlyIDRValue) - ((artotalamt * cRate.GetRateMonthlyIDRValue) + (artaxamt * cRate.GetRateMonthlyIDRValue));
        //                        decimal dSelUSD = (argrandtotal * cRate.GetRateMonthlyUSDValue) - ((artotalamt * cRate.GetRateMonthlyUSDValue) + (artaxamt * cRate.GetRateMonthlyUSDValue));

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "D", argrandtotal, transno, "A/R GM|No. " + transno, "Post", userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, argrandtotal * cRate.GetRateMonthlyUSDValue, "QL_trnargenmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R GM|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "QL_trnargenmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R GM|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "QL_trnargenmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "C", artotalamt, transno, "A/R GM|No. " + transno, "Post", userid, servertime, artotalamt * cRate.GetRateMonthlyIDRValue, artotalamt * cRate.GetRateMonthlyUSDValue, "QL_trnargenmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (artaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "C", artaxamt, transno, "A/R GM|No. " + transno, "Post", userid, servertime, artaxamt * cRate.GetRateMonthlyIDRValue, artaxamt * cRate.GetRateMonthlyUSDValue, "QL_trnargenmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARSP(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnarspmst tblmst = db.QL_trnarspmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arspdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal argrandtotal = Convert.ToDecimal(tblmst.arspgrandtotal);
        //    decimal artotalamt = Convert.ToDecimal(tblmst.arsptotalamt - tblmst.arsptotaldiscdtl);
        //    decimal artaxamt = Convert.ToDecimal(tblmst.arsptaxamt);
        //    var shipmentdtl = (from sd in db.QL_trnshipmentspdtl join ard in db.QL_trnarspdtl on new { cmpcode = sd.cmpcode, shipmentspdtloid = sd.shipmentspdtloid } equals new { cmpcode = ard.cmpcode, shipmentspdtloid = ard.shipmentspdtloid } where ard.cmpcode == cmp && ard.arspmstoid == id select new { sd.shipmentspvalueidr, sd.shipmentspvalueusd, ard.arspqty }).ToList();
        //    decimal shipmentamtidr = shipmentdtl.Sum(x => x.shipmentspvalueidr * x.arspqty);
        //    decimal shipmentamtusd = shipmentdtl.Sum(x => x.shipmentspvalueidr * x.arspqty);
        //    var glseq = 1;

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, sDate.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnarspmst SET arspno='" + transno + "', arspmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", arspratetoidr='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', arspratetousd='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid=" + cRate.GetRateMonthlyOid + ", arsprate2toidr='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', arsprate2tousd='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "'";
        //                }
        //                sSql += " WHERE arspmststatus='In Approval' AND arspmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnarspmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentspdtl SET shipmentspdtlstatus='' WHERE cmpcode='" + cmp + "' AND shipmentspdtloid IN (SELECT shipmentspdtloid FROM QL_trnarspdtl WHERE cmpcode='" + cmp + "' AND arspmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentspmst SET shipmentspmststatus='Approved' WHERE cmpcode='" + cmp + "' AND shipmentspmstoid IN (SELECT shipmentspmstoid FROM QL_trnarspdtl WHERE cmpcode='" + cmp + "' AND arspmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "QL_trnarspmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARSP", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), argrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, 0, argrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
        //                    if (shipmentamtidr > 0 && shipmentamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R SP|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, shipmentamtidr / shipmentamtusd, shipmentamtidr / shipmentamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : HPP Penjualan
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "D", shipmentamtidr, transno, "A/R SP|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "QL_trnarspmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "C", shipmentamtidr, transno, "A/R SP|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "QL_trnarspmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (argrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R SP|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = (argrandtotal * cRate.GetRateMonthlyIDRValue) - ((artotalamt * cRate.GetRateMonthlyIDRValue) + (artaxamt * cRate.GetRateMonthlyIDRValue));
        //                        decimal dSelUSD = (argrandtotal * cRate.GetRateMonthlyUSDValue) - ((artotalamt * cRate.GetRateMonthlyUSDValue) + (artaxamt * cRate.GetRateMonthlyUSDValue));

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "D", argrandtotal, transno, "A/R SP|No. " + transno, "Post", userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, argrandtotal * cRate.GetRateMonthlyUSDValue, "QL_trnarspmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R SP|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "QL_trnarspmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R SP|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "QL_trnarspmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "C", artotalamt, transno, "A/R SP|No. " + transno, "Post", userid, servertime, artotalamt * cRate.GetRateMonthlyIDRValue, artotalamt * cRate.GetRateMonthlyUSDValue, "QL_trnarspmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (artaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "C", artaxamt, transno, "A/R SP|No. " + transno, "Post", userid, servertime, artaxamt * cRate.GetRateMonthlyIDRValue, artaxamt * cRate.GetRateMonthlyUSDValue, "QL_trnarspmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARFG(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnaritemmst tblmst = db.QL_trnaritemmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.aritemdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal argrandtotal = Convert.ToDecimal(tblmst.aritemgrandtotal);
        //    decimal artotalamt = Convert.ToDecimal(tblmst.aritemtotalamt - tblmst.aritemtotaldiscdtl);
        //    decimal artaxamt = Convert.ToDecimal(tblmst.aritemtaxamt);
        //    var shipmentdtl = (from sd in db.QL_trnshipmentitemdtl join ard in db.QL_trnaritemdtl on new { cmpcode = sd.cmpcode, shipmentitemdtloid = sd.shipmentitemdtloid } equals new { cmpcode = ard.cmpcode, shipmentitemdtloid = ard.shipmentitemdtloid } where ard.cmpcode == cmp && ard.aritemmstoid == id select new { sd.shipmentitemvalueidr, sd.shipmentitemvalueusd, ard.aritemqty }).ToList();
        //    decimal shipmentamtidr = shipmentdtl.Sum(x => x.shipmentitemvalueidr * x.aritemqty);
        //    decimal shipmentamtusd = shipmentdtl.Sum(x => x.shipmentitemvalueidr * x.aritemqty);
        //    var glseq = 1;

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, sDate.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnaritemmst SET aritemno='" + transno + "', aritemmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", aritemratetoidr='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', aritemratetousd='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid=" + cRate.GetRateMonthlyOid + ", aritemrate2toidr='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', aritemrate2tousd='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "'";
        //                }
        //                sSql += " WHERE aritemmststatus='In Approval' AND aritemmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnaritemmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentitemdtl SET shipmentitemdtlstatus='' WHERE cmpcode='" + cmp + "' AND shipmentitemdtloid IN (SELECT shipmentitemdtloid FROM QL_trnaritemdtl WHERE cmpcode='" + cmp + "' AND aritemmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentitemmst SET shipmentitemmststatus='Approved' WHERE cmpcode='" + cmp + "' AND shipmentitemmstoid IN (SELECT shipmentitemmstoid FROM QL_trnaritemdtl WHERE cmpcode='" + cmp + "' AND aritemmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "QL_trnaritemmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARFG", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), argrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, 0, argrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
        //                    if (shipmentamtidr > 0 && shipmentamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R FG|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, shipmentamtidr / shipmentamtusd, shipmentamtidr / shipmentamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : HPP Penjualan
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "D", shipmentamtidr, transno, "A/R FG|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "QL_trnaritemmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "C", shipmentamtidr, transno, "A/R FG|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "QL_trnaritemmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (argrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R FG|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = (argrandtotal * cRate.GetRateMonthlyIDRValue) - ((artotalamt * cRate.GetRateMonthlyIDRValue) + (artaxamt * cRate.GetRateMonthlyIDRValue));
        //                        decimal dSelUSD = (argrandtotal * cRate.GetRateMonthlyUSDValue) - ((artotalamt * cRate.GetRateMonthlyUSDValue) + (artaxamt * cRate.GetRateMonthlyUSDValue));

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "D", argrandtotal, transno, "A/R FG|No. " + transno, "Post", userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, argrandtotal * cRate.GetRateMonthlyUSDValue, "QL_trnaritemmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R FG|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "QL_trnaritemmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R FG|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "QL_trnaritemmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "C", artotalamt, transno, "A/R FG|No. " + transno, "Post", userid, servertime, artotalamt * cRate.GetRateMonthlyIDRValue, artotalamt * cRate.GetRateMonthlyUSDValue, "QL_trnaritemmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (artaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "C", artaxamt, transno, "A/R FG|No. " + transno, "Post", userid, servertime, artaxamt * cRate.GetRateMonthlyIDRValue, artaxamt * cRate.GetRateMonthlyUSDValue, "QL_trnaritemmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARAssets(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnarassetmst tblmst = db.QL_trnarassetmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arassetdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var cRate = new ClassRate();
        //    decimal argrandtotal = Convert.ToDecimal(tblmst.arassetgrandtotal);
        //    decimal artotalamt = Convert.ToDecimal(tblmst.arassettotalamt - tblmst.arassettotaldiscdtl);
        //    decimal artaxamt = Convert.ToDecimal(tblmst.arassettaxamt);
        //    var shipmentdtl = (from sd in db.QL_trnshipmentassetdtl join ard in db.QL_trnarassetdtl on new { cmpcode = sd.cmpcode, shipmentassetdtloid = sd.shipmentassetdtloid } equals new { cmpcode = ard.cmpcode, shipmentassetdtloid = ard.shipmentassetdtloid } where ard.cmpcode == cmp && ard.arassetmstoid == id select new { sd.shipmentassetvalueidr, sd.shipmentassetvalueusd, ard.arassetqty }).ToList();
        //    decimal shipmentamtidr = shipmentdtl.Sum(x => x.shipmentassetvalueidr * x.arassetqty);
        //    decimal shipmentamtusd = shipmentdtl.Sum(x => x.shipmentassetvalueidr * x.arassetqty);
        //    var glseq = 1;

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, sDate.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_FA_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_FA_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_LR_JUAL_ASSET", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_LR_JUAL_ASSET");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iLRAssetAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_LR_JUAL_ASSET", cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnarassetmst SET arassetno='" + transno + "', arassetmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", arassetratetoidr='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', arassetratetousd='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid=" + cRate.GetRateMonthlyOid + ", arassetrate2toidr='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', arassetrate2tousd='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "'";
        //                }
        //                sSql += " WHERE arassetmststatus='In Approval' AND arassetmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnarassetmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentassetdtl SET shipmentassetdtlstatus='' WHERE cmpcode='" + cmp + "' AND shipmentassetdtloid IN (SELECT shipmentassetdtloid FROM QL_trnarassetdtl WHERE cmpcode='" + cmp + "' AND arassetmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentassetmst SET shipmentassetmststatus='Approved' WHERE cmpcode='" + cmp + "' AND shipmentassetmstoid IN (SELECT shipmentassetmstoid FROM QL_trnarassetdtl WHERE cmpcode='" + cmp + "' AND arassetmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "QL_trnarassetmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARFA", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), argrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, 0, argrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
        //                    decimal shipmentamt = 0M;
        //                    if (argrandtotal * cRate.GetRateMonthlyIDRValue > 0)
        //                    {
        //                        shipmentamt = (shipmentamtidr / argrandtotal * cRate.GetRateMonthlyIDRValue) * argrandtotal;
        //                    }
        //                    if (argrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R FA|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSel = argrandtotal - (shipmentamt + artaxamt);
        //                        decimal dSelIDR = (argrandtotal * cRate.GetRateMonthlyIDRValue) - (shipmentamtidr + (artaxamt * cRate.GetRateMonthlyIDRValue));
        //                        decimal dSelUSD = (argrandtotal * cRate.GetRateMonthlyUSDValue) - (shipmentamtusd + (artaxamt * cRate.GetRateMonthlyUSDValue));

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "D", argrandtotal, transno, "A/R FA|No. " + transno, "Post", userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, argrandtotal * cRate.GetRateMonthlyUSDValue, "QL_trnarassetmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // D / C : Laba / Rugi Penjualan Fixed Assets(Valas)
        //                        string[] arDbCr = { "D", "D", "D" };
        //                        decimal[] arValas = { 0, 0, 0 };
        //                        decimal[] arIDR = { 0, 0, 0 };
        //                        decimal[] arUSD = { 0, 0, 0 };
        //                        if (dSel < 0)
        //                        {
        //                            arValas[0] = dSel * -1;
        //                            if (dSelIDR < 0)
        //                            {
        //                                arIDR[1] = dSelIDR * -1;
        //                                if (dSelUSD < 0)
        //                                {
        //                                    arUSD[2] = dSelUSD * -1;
        //                                }else
        //                                {
        //                                    arDbCr[2] = "C";
        //                                    arUSD[2] = dSelUSD;
        //                                }
        //                            }else
        //                            {
        //                                if (dSelUSD < 0){
        //                                    arUSD[1] = dSelUSD * -1;
        //                                    arDbCr[2] = "C";
        //                                    arIDR[2] = dSelIDR;
        //                                }else{
        //                                    arDbCr[1] = "C";
        //                                    arIDR[1] = dSelIDR;
        //                                    arDbCr[2] = "C";
        //                                    arUSD[2] = dSelUSD;
        //                                }
        //                            }
        //                        }else
        //                        {
        //                            if (dSelIDR < 0)
        //                            {
        //                                arIDR[0] = dSelIDR * -1;
        //                                if (dSelUSD < 0)
        //                                {
        //                                    arUSD[1] = dSelUSD * -1;
        //                                    arDbCr[2] = "C";
        //                                    arValas[2] = dSel;
        //                                }else
        //                                {
        //                                    arDbCr[1] = "C";
        //                                    arValas[1] = dSel;
        //                                    arDbCr[2] = "C";
        //                                    arUSD[2] = dSelUSD;
        //                                }
        //                            }else
        //                            {
        //                                if(dSelUSD < 0)
        //                                {
        //                                    arUSD[0] = dSelUSD * -1;
        //                                    arDbCr[1] = "C";
        //                                    arValas[1] = dSel;
        //                                    arDbCr[2] = "C";
        //                                    arIDR[2] = dSelIDR;
        //                                }else
        //                                {
        //                                    arDbCr[0] = "C";
        //                                    arValas[0] = dSel;
        //                                    arDbCr[1] = "C";
        //                                    arIDR[1] = dSelIDR;
        //                                    arDbCr[2] = "C";
        //                                    arUSD[2] = dSelUSD;
        //                                }
        //                            }
        //                        }

        //                        for (var i = 0; i < 2; i++)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iLRAssetAcctgOid, arDbCr[i], arValas[i], transno, "A/R FA|No. " + transno, "Post", userid, servertime, arIDR[i], arUSD[i], "QL_trnarassetmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        //C : Fixed Assets Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "C", shipmentamt, transno, "A/R FA|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "QL_trnarassetmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (artaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "C", artaxamt, transno, "A/R FA|No. " + transno, "Post", userid, servertime, artaxamt * cRate.GetRateMonthlyIDRValue, artaxamt * cRate.GetRateMonthlyUSDValue, "QL_trnarassetmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARLog(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnarlogmst tblmst = db.QL_trnarlogmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arlogdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal argrandtotal = Convert.ToDecimal(tblmst.arloggrandtotal);
        //    decimal artotalamt = Convert.ToDecimal(tblmst.arlogtotalamt - tblmst.arlogtotaldiscdtl);
        //    decimal artaxamt = Convert.ToDecimal(tblmst.arlogtaxamt);
        //    var shipmentdtl = (from sd in db.QL_trnshipmentlogdtl join ard in db.QL_trnarlogdtl on new { cmpcode = sd.cmpcode, shipmentlogdtloid = sd.shipmentlogdtloid } equals new { cmpcode = ard.cmpcode, shipmentlogdtloid = ard.shipmentlogdtloid } where ard.cmpcode == cmp && ard.arlogmstoid == id select new { sd.shipmentlogvalueidr, sd.shipmentlogvalueusd, ard.arlogqty }).ToList();
        //    decimal shipmentamtidr = shipmentdtl.Sum(x => x.shipmentlogvalueidr * x.arlogqty);
        //    decimal shipmentamtusd = shipmentdtl.Sum(x => x.shipmentlogvalueidr * x.arlogqty);
        //    var glseq = 1;

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, sDate.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnarlogmst SET arlogno='" + transno + "', arlogmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", arlogratetoidr='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', arlogratetousd='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid=" + cRate.GetRateMonthlyOid + ", arlograte2toidr='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', arlograte2tousd='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "'";
        //                }
        //                sSql += " WHERE arlogmststatus='In Approval' AND arlogmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnarlogmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentlogdtl SET shipmentlogdtlstatus='' WHERE cmpcode='" + cmp + "' AND shipmentlogdtloid IN (SELECT shipmentlogdtloid FROM QL_trnarlogdtl WHERE cmpcode='" + cmp + "' AND arlogmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentlogmst SET shipmentlogmststatus='Approved' WHERE cmpcode='" + cmp + "' AND shipmentlogmstoid IN (SELECT shipmentlogmstoid FROM QL_trnarlogdtl WHERE cmpcode='" + cmp + "' AND arlogmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "QL_trnarlogmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARLOG", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), argrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, 0, argrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
        //                    if (shipmentamtidr > 0 && shipmentamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Log|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, shipmentamtidr / shipmentamtusd, shipmentamtidr / shipmentamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : HPP Penjualan
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "D", shipmentamtidr, transno, "A/R Log|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "QL_trnarlogmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "C", shipmentamtidr, transno, "A/R Log|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "QL_trnarlogmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (argrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Log|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = (argrandtotal * cRate.GetRateMonthlyIDRValue) - ((artotalamt * cRate.GetRateMonthlyIDRValue) + (artaxamt * cRate.GetRateMonthlyIDRValue));
        //                        decimal dSelUSD = (argrandtotal * cRate.GetRateMonthlyUSDValue) - ((artotalamt * cRate.GetRateMonthlyUSDValue) + (artaxamt * cRate.GetRateMonthlyUSDValue));

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "D", argrandtotal, transno, "A/R Log|No. " + transno, "Post", userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, argrandtotal * cRate.GetRateMonthlyUSDValue, "QL_trnarlogmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R Log|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "QL_trnarlogmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R Log|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "QL_trnarlogmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "C", artotalamt, transno, "A/R Log|No. " + transno, "Post", userid, servertime, artotalamt * cRate.GetRateMonthlyIDRValue, artotalamt * cRate.GetRateMonthlyUSDValue, "QL_trnarlogmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (artaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "C", artaxamt, transno, "A/R Log|No. " + transno, "Post", userid, servertime, artaxamt * cRate.GetRateMonthlyIDRValue, artaxamt * cRate.GetRateMonthlyUSDValue, "QL_trnarlogmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARSawn(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnarsawnmst*/QL_trnjualmst tblmst = db./*QL_trnarsawnmst*/QL_trnjualmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arsawndate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal argrandtotal = Convert.ToDecimal(tblmst.arsawngrandtotal);
        //    decimal artotalamt = Convert.ToDecimal(tblmst.arsawntotalamt - tblmst.arsawntotaldiscdtl);
        //    decimal artaxamt = Convert.ToDecimal(tblmst.arsawntaxamt);
        //    var shipmentdtl = (from sd in db.QL_trnshipmentsawndtl join ard in db.QL_trnarsawndtl on new { cmpcode = sd.cmpcode, shipmentsawndtloid = sd.shipmentsawndtloid } equals new { cmpcode = ard.cmpcode, shipmentsawndtloid = ard.shipmentsawndtloid } where ard.cmpcode == cmp && ard.arsawnmstoid == id select new { sd.shipmentsawnvalueidr, sd.shipmentsawnvalueusd, ard.arsawnqty }).ToList();
        //    decimal shipmentamtidr = shipmentdtl.Sum(x => x.shipmentsawnvalueidr * x.arsawnqty);
        //    decimal shipmentamtusd = shipmentdtl.Sum(x => x.shipmentsawnvalueidr * x.arsawnqty);
        //    var glseq = 1;

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, sDate.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_TRANSIT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_TRANSIT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_TRANSIT", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE /*QL_trnarsawnmst*/QL_trnjualmst SET arsawnno='" + transno + "', arsawnmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", arsawnratetoidr='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', arsawnratetousd='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid=" + cRate.GetRateMonthlyOid + ", arsawnrate2toidr='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', arsawnrate2tousd='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "'";
        //                }
        //                sSql += " WHERE arsawnmststatus='In Approval' AND arsawnmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnarsawnmst*/QL_trnjualmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnshipmentsawndtl SET shipmentsawndtlstatus='' WHERE cmpcode='" + cmp + "' AND shipmentsawndtloid IN (SELECT shipmentsawndtloid FROM QL_trnarsawndtl WHERE cmpcode='" + cmp + "' AND arsawnmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnshipmentsawnmst SET shipmentsawnmststatus='Approved' WHERE cmpcode='" + cmp + "' AND shipmentsawnmstoid IN (SELECT shipmentsawnmstoid FROM QL_trnarsawndtl WHERE cmpcode='" + cmp + "' AND arsawnmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "/*QL_trnarsawnmst*/QL_trnjualmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARST", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), argrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, 0, argrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
        //                    if (shipmentamtidr > 0 && shipmentamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R ST|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, shipmentamtidr / shipmentamtusd, shipmentamtidr / shipmentamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : HPP Penjualan
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "D", shipmentamtidr, transno, "A/R ST|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "/*QL_trnarsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "C", shipmentamtidr, transno, "A/R ST|No. " + transno, "Post", userid, servertime, shipmentamtidr, shipmentamtusd, "/*QL_trnarsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (argrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R ST|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = (argrandtotal * cRate.GetRateMonthlyIDRValue) - ((artotalamt * cRate.GetRateMonthlyIDRValue) + (artaxamt * cRate.GetRateMonthlyIDRValue));
        //                        decimal dSelUSD = (argrandtotal * cRate.GetRateMonthlyUSDValue) - ((artotalamt * cRate.GetRateMonthlyUSDValue) + (artaxamt * cRate.GetRateMonthlyUSDValue));

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "D", argrandtotal, transno, "A/R ST|No. " + transno, "Post", userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, argrandtotal * cRate.GetRateMonthlyUSDValue, "/*QL_trnarsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R ST|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "/*QL_trnarsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R ST|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "/*QL_trnarsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "C", artotalamt, transno, "A/R ST|No. " + transno, "Post", userid, servertime, artotalamt * cRate.GetRateMonthlyIDRValue, artotalamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (artaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "C", artaxamt, transno, "A/R ST|No. " + transno, "Post", userid, servertime, artaxamt * cRate.GetRateMonthlyIDRValue, artaxamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalAROther(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnarothermst tblmst = db.QL_trnarothermst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arotherdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    //var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    //var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal argrandtotal = Convert.ToDecimal(tblmst.arothergrandtotal);
        //    decimal artotalamt = Convert.ToDecimal(tblmst.arothertotalamt - tblmst.arothertotaldiscdtl);
        //    decimal artaxamt = Convert.ToDecimal(tblmst.arothertaxamt);
        //    var custname = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custname).FirstOrDefault();
        //    var sGLnote = ClassFunction.Left(custname + " | " + (tblmst.arotherfaktur == null ? tblmst.arotherfaktur : "") + " | " + (tblmst.arothermstres3 == null ? tblmst.arothermstres3 : "") + " | "  + (tblmst.arothermstnote == null ? tblmst.arothermstnote : ""),200);
        //    //var shipmentdtl = (from sd in db.QL_trnshipmentitemdtl join ard in db.QL_trnarotherdtl on new { cmpcode = sd.cmpcode, shipmentitemdtloid = sd.shipmentitemdtloid } equals new { cmpcode = ard.cmpcode, shipmentitemdtloid = ard.shipmentitemdtloid } where ard.cmpcode == cmp && ard.aritemmstoid == id select new { sd.shipmentitemvalueidr, sd.shipmentitemvalueusd, ard.aritemqty }).ToList();
        //    //decimal shipmentamtidr = shipmentdtl.Sum(x => x.shipmentitemvalueidr * x.aritemqty);
        //    //decimal shipmentamtusd = shipmentdtl.Sum(x => x.shipmentitemvalueidr * x.aritemqty);
        //    var glseq = 1;

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, sDate.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //        // Interface Validation
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iJualAcctgOid = tblmst.arjualacctgoid;
        //        var iARAcctgOid = tblmst.aracctgoid;
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnarothermst SET arotherno='" + transno + "', arothermststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", arotherratetoidr='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', arotherratetousd='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid=" + cRate.GetRateMonthlyOid + ", arotherrate2toidr='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', arotherrate2tousd='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "'";
        //                }
        //                sSql += " WHERE arothermststatus='In Approval' AND arothermstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnarothermst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();
        //                if (action == "Approved")
        //                {
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "QL_trnarothermst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARLL", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), argrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, 0, argrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
        //                    if (argrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, sGLnote, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = (argrandtotal * cRate.GetRateMonthlyIDRValue) - ((artotalamt * cRate.GetRateMonthlyIDRValue) + (artaxamt * cRate.GetRateMonthlyIDRValue));
        //                        decimal dSelUSD = (argrandtotal * cRate.GetRateMonthlyUSDValue) - ((artotalamt * cRate.GetRateMonthlyUSDValue) + (artaxamt * cRate.GetRateMonthlyUSDValue));

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "D", argrandtotal, transno, sGLnote, "Post", userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, argrandtotal * cRate.GetRateMonthlyUSDValue, "QL_trnarothermst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R LL|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "QL_trnarothermst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R LL|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "QL_trnarothermst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "C", artotalamt, transno, sGLnote, "Post", userid, servertime, artotalamt * cRate.GetRateMonthlyIDRValue, artotalamt * cRate.GetRateMonthlyUSDValue, "QL_trnarothermst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (artaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "C", artaxamt, transno, sGLnote, "Post", userid, servertime, artaxamt * cRate.GetRateMonthlyIDRValue, artaxamt * cRate.GetRateMonthlyUSDValue, "QL_trnarothermst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARCashBank(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnarcashbankmst*/QL_trncashbankmst tblmst = db./*QL_trnarcashbankmst*/QL_trncashbankmst.Find(cmp, id);
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arcashbankdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var cRate = new ClassRate();
        //    decimal argrandtotal = Convert.ToDecimal(tblmst.arcashbankgrandtotal);
        //    decimal artotalamt = Convert.ToDecimal(tblmst.arcashbanktotalamt - tblmst.arcashbanktotaldiscdtl);
        //    decimal artaxamt = Convert.ToDecimal(tblmst.arcashbanktaxamt);
        //    var custname = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custname).FirstOrDefault();
        //    var sGLnote = tblmst.arcashbankmstnote;
        //    var glseq = 1;

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.curroid, sDate.ToString("MM/dd/yyyy"));
        //        if (cRate.GetRateDailyLastError != "")
        //            error = cRate.GetRateDailyLastError;
        //        if (cRate.GetRateMonthlyLastError != "")
        //            error = cRate.GetRateMonthlyLastError;
        //        // Interface Validation
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iJualAcctgOid = tblmst.arjualacctgoid;
        //        var iARAcctgOid = tblmst.aracctgoid;
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE /*QL_trnarcashbankmst*/QL_trncashbankmst SET arcashbankno='" + transno + "', arcashbankmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "'";
        //                if (action == "Approved")
        //                {
        //                    sSql += ", rateoid=" + cRate.GetRateDailyOid + ", arcashbankratetoidr='" + ClassFunction.Left(cRate.GetRateDailyIDRValue.ToString(), 50) + "', arcashbankratetousd='" + ClassFunction.Left(cRate.GetRateDailyUSDValue.ToString(), 50) + "', rate2oid=" + cRate.GetRateMonthlyOid + ", arcashbankrate2toidr='" + ClassFunction.Left(cRate.GetRateMonthlyIDRValue.ToString(), 50) + "', arcashbankrate2tousd='" + ClassFunction.Left(cRate.GetRateMonthlyUSDValue.ToString(), 50) + "'";
        //                }
        //                sSql += " WHERE arcashbankmststatus='In Approval' AND arcashbankmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnarcashbankmst*/QL_trncashbankmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();
        //                if (action == "Approved")
        //                {
        //                    sSql = "UPDATE QL_trncashbankmst SET cashbankstatus='Post', upduser='" + Session["UserID"].ToString() + "', updtime='" + servertime + "' WHERE cmpcode='" + cmp + "' AND cashbankoid=" + tblmst.cashbankoid;
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid, "/*QL_trnarcashbankmst*/QL_trncashbankmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARCB", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), argrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, 0, argrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
        //                    if (argrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, sGLnote, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = (argrandtotal * cRate.GetRateMonthlyIDRValue) - ((artotalamt * cRate.GetRateMonthlyIDRValue) + (artaxamt * cRate.GetRateMonthlyIDRValue));
        //                        decimal dSelUSD = (argrandtotal * cRate.GetRateMonthlyUSDValue) - ((artotalamt * cRate.GetRateMonthlyUSDValue) + (artaxamt * cRate.GetRateMonthlyUSDValue));

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "D", argrandtotal, transno, sGLnote, "Post", userid, servertime, argrandtotal * cRate.GetRateMonthlyIDRValue, argrandtotal * cRate.GetRateMonthlyUSDValue, "/*QL_trnarcashbankmst*/QL_trncashbankmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R LL|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "/*QL_trnarcashbankmst*/QL_trncashbankmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R LL|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "/*QL_trnarcashbankmst*/QL_trncashbankmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "C", artotalamt, transno, sGLnote, "Post", userid, servertime, artotalamt * cRate.GetRateMonthlyIDRValue, artotalamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarcashbankmst*/QL_trncashbankmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (artaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "C", artaxamt, transno, sGLnote, "Post", userid, servertime, artaxamt * cRate.GetRateMonthlyIDRValue, artaxamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarcashbankmst*/QL_trncashbankmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + conaroid + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + glmstoid + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //#endregion

        //#region Approval A/R Return

        //public class arretdtl
        //{
        //    public int arretdtloid { get; set; }
        //    public int arretdtlseq { get; set; }
        //    public int matoid { get; set; }
        //    public string matcode { get; set; }
        //    public string matlongdesc { get; set; }
        //    public decimal arretqty { get; set; }
        //    public decimal arretprice { get; set; }
        //    public decimal arretamount { get; set; }
        //    public string arretdtlnote { get; set; }
        //    public int arretwhoid { get; set; }
        //    public decimal arretvalueidr { get; set; }
        //    public decimal arretvalueusd { get; set; }
        //}

        //private void ApprovalARRetRaw(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnarretrawmst*/QL_trnjualmst tblmst = db./*QL_trnarretrawmst*/QL_trnjualmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    //var sDate = tblmst.arretrawdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    //var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    //decimal arretgrandtotal = Convert.ToDecimal(tblmst.arretrawgrandtotal);
        //    //decimal arrettotalamt = Convert.ToDecimal(tblmst.arretrawtotalamt);
        //    //decimal arrettaxamt = Convert.ToDecimal(tblmst.arretrawtax);
        //    //decimal arretamtidr = db.QL_trnarretrawdtl.Where(x => x.cmpcode == cmp && x.arretrawmstoid == id).Sum(x => x.arretrawqty * x.arretrawvalueidr);
        //    //decimal arretamtusd = db.QL_trnarretrawdtl.Where(x => x.cmpcode == cmp && x.arretrawmstoid == id).Sum(x => x.arretrawqty * x.arretrawvalueusd);
        //    var glseq = 1;
        //    var refname = "RAW MATERIAL";

        //    sSql = "SELECT arretrawdtloid arretdtloid, arretrawdtlseq arretdtlseq, arretd.matrawoid matoid, matrawcode matcode, matrawlongdesc matlongdesc, arretrawqty arretqty, gendesc arretunit, arretrawprice arretprice, arretrawamount arretamount, arretrawdtlnote arretdtlnote, arretrawwhoid arretwhoid, arretrawvalueidr arretvalueidr, arretrawvalueusd arretvalueusd FROM /*QL_trnarretrawmst*/QL_trnjualmst arretm INNER JOIN QL_trnarretrawdtl arretd ON arretd.cmpcode=arretm.cmpcode AND arretd.arretrawmstoid=arretm.arretrawmstoid INNER JOIN QL_mstmatraw m ON m.matrawoid=arretd.matrawoid INNER JOIN QL_mstgen g ON genoid=arretrawunitoid WHERE arretm.arretrawmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<arretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        //cRate.SetRateValue(tblmst.rateoid, tblmst.rate2oid);
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_RM", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_RM");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        //sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_RM", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE /*QL_trnarretrawmst*/QL_trnjualmst SET arretrawno='" + transno + "', arretrawmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE arretrawmststatus='In Approval' AND arretrawmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnarretrawmst*/QL_trnjualmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnarrawdtl SET arretdtlflag='' WHERE cmpcode='" + cmp + "' AND arrawdtloid IN (SELECT arrawdtloid FROM QL_trnarretrawdtl WHERE cmpcode='" + cmp + "' AND arretrawmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE /*QL_trnarrawmst*/QL_trnjualmst SET arretmstflag='' WHERE cmpcode='" + cmp + "' AND arrawmstoid IN (SELECT arrawmstoid FROM /*QL_trnarretrawmst*/QL_trnjualmst WHERE cmpcode='" + cmp + "' AND arretrawmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "ARRETRM", "QL_trnarretrawdtl", id, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, "A/R Return Raw Material", transno, userid, null, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, 0, null, tbldtl[i].arretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, 0, "QL_trnarretrawdtl", userid, null, tbldtl[i].arretvalueidr * tbldtl[i].arretqty, tbldtl[i].arretvalueusd * tbldtl[i].arretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].arretqty, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, "QL_trnarretrawdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                    //Insert QL_conar
        //                    //db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "/*QL_trnarretrawmst*/QL_trnjualmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARRETRM", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), -arretgrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, -arretgrandtotal * cRate.GetRateMonthlyIDRValue, 0, -arretgrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
                            
        //                    //if (arretamtidr > 0 && arretamtusd > 0)
        //                    //{
        //                    //    // Insert QL_trnglmst
        //                    //    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return RM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, arretamtidr / arretamtusd, arretamtidr / arretamtusd));
        //                    //    db.SaveChanges();
        //                    //    // Insert GL DTL 1st
        //                    //    // D : Stock Barang
        //                    //    glseq = 1;
        //                    //    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "D", arretamtidr, transno, "A/R Return RM|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "/*QL_trnarretrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                    //    db.SaveChanges();
        //                    //    // C : Stok Dalam Perjalanan
        //                    //    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "C", arretamtidr, transno, "A/R Return RM|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "/*QL_trnarretrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                    //    db.SaveChanges();
        //                    //    glmstoid++;
        //                    //}
        //                    //if (arretgrandtotal > 0)
        //                    //{
        //                    //    // Insert QL_trnglmst
        //                    //    db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return RM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                    //    db.SaveChanges();

        //                    //    decimal dSelIDR = ((arrettotalamt * cRate.GetRateMonthlyIDRValue) + (arrettaxamt * cRate.GetRateMonthlyIDRValue)) - (arretgrandtotal * cRate.GetRateMonthlyIDRValue);
        //                    //    decimal dSelUSD = ((arrettotalamt * cRate.GetRateMonthlyUSDValue) + (arrettaxamt * cRate.GetRateMonthlyUSDValue)) - (arretgrandtotal * cRate.GetRateMonthlyUSDValue);

        //                    //    glseq = 1;
        //                    //    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "D", arrettotalamt, transno, "A/R Return RM|No. " + transno, "Post", userid, servertime, arrettotalamt * cRate.GetRateMonthlyIDRValue, arrettotalamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                    //    db.SaveChanges();
        //                    //    if (arrettaxamt > 0)
        //                    //    {
        //                    //        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "D", arrettaxamt, transno, "A/R Return RM|No. " + transno, "Post", userid, servertime, arrettaxamt * cRate.GetRateMonthlyIDRValue, arrettaxamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                    //        db.SaveChanges();
        //                    //    }
        //                    //    // D/C : Pembulatan IDR
        //                    //    if (dSelIDR != 0)
        //                    //    {
        //                    //        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R Return RM|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "/*QL_trnarretrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                    //        db.SaveChanges();
        //                    //    }
        //                    //    // D/C : Pembulatan USD
        //                    //    if (dSelUSD != 0)
        //                    //    {
        //                    //        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R Return RM|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "/*QL_trnarretrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                    //        db.SaveChanges();
        //                    //    }
        //                    //    db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "C", arretgrandtotal, transno, "A/R Return RM|No. " + transno, "Post", userid, servertime, arretgrandtotal * cRate.GetRateMonthlyIDRValue, arretgrandtotal * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretrawmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                    //    db.SaveChanges();
        //                    //    glmstoid++;
        //                    //}

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARRetGen(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnarretgenmst*/QL_trnjualmst tblmst = db./*QL_trnarretgenmst*/QL_trnjualmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    //var sDate = tblmst.arretgendate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    //var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    //decimal arretgrandtotal = Convert.ToDecimal(tblmst.arretgengrandtotal);
        //    //decimal arrettotalamt = Convert.ToDecimal(tblmst.arretgentotalamt);
        //    //decimal arrettaxamt = Convert.ToDecimal(tblmst.arretgentax);
        //    //decimal arretamtidr = db.QL_trnarretgendtl.Where(x => x.cmpcode == cmp && x.arretgenmstoid == id).Sum(x => x.arretgenqty * x.arretgenvalueidr);
        //    //decimal arretamtusd = db.QL_trnarretgendtl.Where(x => x.cmpcode == cmp && x.arretgenmstoid == id).Sum(x => x.arretgenqty * x.arretgenvalueusd);
        //    var glseq = 1;
        //    var refname = "GENERAL MATERIAL";

        //    sSql = "SELECT arretgendtloid arretdtloid, arretgendtlseq arretdtlseq, arretd.matgenoid matoid, matgencode matcode, matgenlongdesc matlongdesc, arretgenqty arretqty, gendesc arretunit, arretgenprice arretprice, arretgenamount arretamount, arretgendtlnote arretdtlnote, arretgenwhoid arretwhoid, arretgenvalueidr arretvalueidr, arretgenvalueusd arretvalueusd FROM /*QL_trnarretgenmst*/QL_trnjualmst arretm INNER JOIN QL_trnarretgendtl arretd ON arretd.cmpcode=arretm.cmpcode AND arretd.arretgenmstoid=arretm.arretgenmstoid INNER JOIN QL_mstmatgen m ON m.matgenoid=arretd.matgenoid INNER JOIN QL_mstgen g ON genoid=arretgenunitoid WHERE arretm.arretgenmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<arretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        //cRate.SetRateValue(tblmst.rateoid, tblmst.rate2oid);
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_GM", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_GM");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_GM", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE /*QL_trnarretgenmst*/QL_trnjualmst SET arretgenno='" + transno + "', arretgenmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE arretgenmststatus='In Approval' AND arretgenmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnarretgenmst*/QL_trnjualmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnargendtl SET arretdtlflag='' WHERE cmpcode='" + cmp + "' AND argendtloid IN (SELECT argendtloid FROM QL_trnarretgendtl WHERE cmpcode='" + cmp + "' AND arretgenmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnargenmst SET arretmstflag='' WHERE cmpcode='" + cmp + "' AND argenmstoid IN (SELECT argenmstoid FROM /*QL_trnarretgenmst*/QL_trnjualmst WHERE cmpcode='" + cmp + "' AND arretgenmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "ARRETGM", "QL_trnarretgendtl", id, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, "A/R Return General Material", transno, userid, null, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, 0, null, tbldtl[i].arretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, 0, "QL_trnarretgendtl", userid, null, tbldtl[i].arretvalueidr * tbldtl[i].arretqty, tbldtl[i].arretvalueusd * tbldtl[i].arretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].arretqty, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, "QL_trnarretgendtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "/*QL_trnarretgenmst*/QL_trnjualmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARRETGM", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), -arretgrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, -arretgrandtotal * cRate.GetRateMonthlyIDRValue, 0, -arretgrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));

        //                    if (arretamtidr > 0 && arretamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return GM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, arretamtidr / arretamtusd, arretamtidr / arretamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : Stock Barang
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "D", arretamtidr, transno, "A/R Return GM|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "/*QL_trnarretgenmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "C", arretamtidr, transno, "A/R Return GM|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "/*QL_trnarretgenmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (arretgrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return GM|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = ((arrettotalamt * cRate.GetRateMonthlyIDRValue) + (arrettaxamt * cRate.GetRateMonthlyIDRValue)) - (arretgrandtotal * cRate.GetRateMonthlyIDRValue);
        //                        decimal dSelUSD = ((arrettotalamt * cRate.GetRateMonthlyUSDValue) + (arrettaxamt * cRate.GetRateMonthlyUSDValue)) - (arretgrandtotal * cRate.GetRateMonthlyUSDValue);

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "D", arrettotalamt, transno, "A/R Return GM|No. " + transno, "Post", userid, servertime, arrettotalamt * cRate.GetRateMonthlyIDRValue, arrettotalamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretgenmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (arrettaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "D", arrettaxamt, transno, "A/R Return GM|No. " + transno, "Post", userid, servertime, arrettaxamt * cRate.GetRateMonthlyIDRValue, arrettaxamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretgenmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R Return GM|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "/*QL_trnarretgenmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R Return GM|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "/*QL_trnarretgenmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "C", arretgrandtotal, transno, "A/R Return GM|No. " + transno, "Post", userid, servertime, arretgrandtotal * cRate.GetRateMonthlyIDRValue, arretgrandtotal * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretgenmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARRetSP(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnarretspmst tblmst = db.QL_trnarretspmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arretspdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal arretgrandtotal = Convert.ToDecimal(tblmst.arretspgrandtotal);
        //    decimal arrettotalamt = Convert.ToDecimal(tblmst.arretsptotalamt);
        //    decimal arrettaxamt = Convert.ToDecimal(tblmst.arretsptax);
        //    decimal arretamtidr = db.QL_trnarretspdtl.Where(x => x.cmpcode == cmp && x.arretspmstoid == id).Sum(x => x.arretspqty * x.arretspvalueidr);
        //    decimal arretamtusd = db.QL_trnarretspdtl.Where(x => x.cmpcode == cmp && x.arretspmstoid == id).Sum(x => x.arretspqty * x.arretspvalueusd);
        //    var glseq = 1;
        //    var refname = "SPARE PART";

        //    sSql = "SELECT arretspdtloid arretdtloid, arretspdtlseq arretdtlseq, arretd.sparepartoid matoid, sparepartcode matcode, sparepartlongdesc matlongdesc, arretspqty arretqty, gendesc arretunit, arretspprice arretprice, arretspamount arretamount, arretspdtlnote arretdtlnote, arretspwhoid arretwhoid, arretspvalueidr arretvalueidr, arretspvalueusd arretvalueusd FROM QL_trnarretspmst arretm INNER JOIN QL_trnarretspdtl arretd ON arretd.cmpcode=arretm.cmpcode AND arretd.arretspmstoid=arretm.arretspmstoid INNER JOIN QL_mstsparepart m ON m.sparepartoid=arretd.sparepartoid INNER JOIN QL_mstgen g ON genoid=arretspunitoid WHERE arretm.arretspmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<arretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.rateoid, tblmst.rate2oid);
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_SP", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_SP");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_SP", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnarretspmst SET arretspno='" + transno + "', arretspmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE arretspmststatus='In Approval' AND arretspmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnarretspmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnarspdtl SET arretdtlflag='' WHERE cmpcode='" + cmp + "' AND arspdtloid IN (SELECT arspdtloid FROM QL_trnarretspdtl WHERE cmpcode='" + cmp + "' AND arretspmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnarspmst SET arretmstflag='' WHERE cmpcode='" + cmp + "' AND arspmstoid IN (SELECT arspmstoid FROM QL_trnarretspmst WHERE cmpcode='" + cmp + "' AND arretspmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "ARRETSP", "QL_trnarretspdtl", id, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, "A/R Return Spare Part", transno, userid, null, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, 0, null, tbldtl[i].arretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, 0, "QL_trnarretspdtl", userid, null, tbldtl[i].arretvalueidr * tbldtl[i].arretqty, tbldtl[i].arretvalueusd * tbldtl[i].arretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].arretqty, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, "QL_trnarretspdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "QL_trnarretspmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARRETSP", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), -arretgrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, -arretgrandtotal * cRate.GetRateMonthlyIDRValue, 0, -arretgrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));

        //                    if (arretamtidr > 0 && arretamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return SP|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, arretamtidr / arretamtusd, arretamtidr / arretamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : Stock Barang
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "D", arretamtidr, transno, "A/R Return SP|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "QL_trnarretspmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "C", arretamtidr, transno, "A/R Return SP|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "QL_trnarretspmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (arretgrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return SP|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = ((arrettotalamt * cRate.GetRateMonthlyIDRValue) + (arrettaxamt * cRate.GetRateMonthlyIDRValue)) - (arretgrandtotal * cRate.GetRateMonthlyIDRValue);
        //                        decimal dSelUSD = ((arrettotalamt * cRate.GetRateMonthlyUSDValue) + (arrettaxamt * cRate.GetRateMonthlyUSDValue)) - (arretgrandtotal * cRate.GetRateMonthlyUSDValue);

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "D", arrettotalamt, transno, "A/R Return SP|No. " + transno, "Post", userid, servertime, arrettotalamt * cRate.GetRateMonthlyIDRValue, arrettotalamt * cRate.GetRateMonthlyUSDValue, "QL_trnarretspmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (arrettaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "D", arrettaxamt, transno, "A/R Return SP|No. " + transno, "Post", userid, servertime, arrettaxamt * cRate.GetRateMonthlyIDRValue, arrettaxamt * cRate.GetRateMonthlyUSDValue, "QL_trnarretspmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R Return SP|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "QL_trnarretspmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R Return SP|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "QL_trnarretspmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "C", arretgrandtotal, transno, "A/R Return SP|No. " + transno, "Post", userid, servertime, arretgrandtotal * cRate.GetRateMonthlyIDRValue, arretgrandtotal * cRate.GetRateMonthlyUSDValue, "QL_trnarretspmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARRetFG(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    QL_trnarretitemmst tblmst = db.QL_trnarretitemmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arretitemdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal arretgrandtotal = Convert.ToDecimal(tblmst.arretitemgrandtotal);
        //    decimal arrettotalamt = Convert.ToDecimal(tblmst.arretitemtotalamt);
        //    decimal arrettaxamt = Convert.ToDecimal(tblmst.arretitemtax);
        //    decimal arretamtidr = db.QL_trnarretitemdtl.Where(x => x.cmpcode == cmp && x.arretitemmstoid == id).Sum(x => x.arretitemqty * x.arretitemvalueidr);
        //    decimal arretamtusd = db.QL_trnarretitemdtl.Where(x => x.cmpcode == cmp && x.arretitemmstoid == id).Sum(x => x.arretitemqty * x.arretitemvalueusd);
        //    var glseq = 1;
        //    var refname = "FINISH GOOD";

        //    sSql = "SELECT arretitemdtloid arretdtloid, arretitemdtlseq arretdtlseq, arretd.itemoid matoid, itemcode matcode, itemlongdesc matlongdesc, arretitemqty arretqty, gendesc arretunit, arretitemprice arretprice, arretitemamount arretamount, arretitemdtlnote arretdtlnote, arretitemwhoid arretwhoid, arretitemvalueidr arretvalueidr, arretitemvalueusd arretvalueusd FROM QL_trnarretitemmst arretm INNER JOIN QL_trnarretitemdtl arretd ON arretd.cmpcode=arretm.cmpcode AND arretd.arretitemmstoid=arretm.arretitemmstoid INNER JOIN QL_mstitem m ON m.itemoid=arretd.itemoid INNER JOIN QL_mstgen g ON genoid=arretitemunitoid WHERE arretm.arretitemmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<arretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.rateoid, tblmst.rate2oid);
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_FG", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_FG");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_FG", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE QL_trnarretitemmst SET arretitemno='" + transno + "', arretitemmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE arretitemmststatus='In Approval' AND arretitemmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='QL_trnarretitemmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnaritemdtl SET arretdtlflag='' WHERE cmpcode='" + cmp + "' AND aritemdtloid IN (SELECT aritemdtloid FROM QL_trnarretitemdtl WHERE cmpcode='" + cmp + "' AND arretitemmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnaritemmst SET arretmstflag='' WHERE cmpcode='" + cmp + "' AND aritemmstoid IN (SELECT aritemmstoid FROM QL_trnarretitemmst WHERE cmpcode='" + cmp + "' AND arretitemmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "ARRETFG", "QL_trnarretitemdtl", id, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, "A/R Return Finish Good", transno, userid, null, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, 0, null, tbldtl[i].arretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, 0, "QL_trnarretitemdtl", userid, null, tbldtl[i].arretvalueidr * tbldtl[i].arretqty, tbldtl[i].arretvalueusd * tbldtl[i].arretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].arretqty, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, "QL_trnarretitemdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "QL_trnarretitemmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARRETFG", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), -arretgrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, -arretgrandtotal * cRate.GetRateMonthlyIDRValue, 0, -arretgrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));

        //                    if (arretamtidr > 0 && arretamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return FG|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, arretamtidr / arretamtusd, arretamtidr / arretamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : Stock Barang
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "D", arretamtidr, transno, "A/R Return FG|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "QL_trnarretitemmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "C", arretamtidr, transno, "A/R Return FG|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "QL_trnarretitemmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (arretgrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return FG|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = ((arrettotalamt * cRate.GetRateMonthlyIDRValue) + (arrettaxamt * cRate.GetRateMonthlyIDRValue)) - (arretgrandtotal * cRate.GetRateMonthlyIDRValue);
        //                        decimal dSelUSD = ((arrettotalamt * cRate.GetRateMonthlyUSDValue) + (arrettaxamt * cRate.GetRateMonthlyUSDValue)) - (arretgrandtotal * cRate.GetRateMonthlyUSDValue);

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "D", arrettotalamt, transno, "A/R Return FG|No. " + transno, "Post", userid, servertime, arrettotalamt * cRate.GetRateMonthlyIDRValue, arrettotalamt * cRate.GetRateMonthlyUSDValue, "QL_trnarretitemmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (arrettaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "D", arrettaxamt, transno, "A/R Return FG|No. " + transno, "Post", userid, servertime, arrettaxamt * cRate.GetRateMonthlyIDRValue, arrettaxamt * cRate.GetRateMonthlyUSDValue, "QL_trnarretitemmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R Return FG|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "QL_trnarretitemmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R Return FG|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "QL_trnarretitemmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "C", arretgrandtotal, transno, "A/R Return FG|No. " + transno, "Post", userid, servertime, arretgrandtotal * cRate.GetRateMonthlyIDRValue, arretgrandtotal * cRate.GetRateMonthlyUSDValue, "QL_trnarretitemmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARRetLog(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnarretlogmst*/QL_trnjualmst tblmst = db./*QL_trnarretlogmst*/QL_trnjualmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arretlogdate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal arretgrandtotal = Convert.ToDecimal(tblmst.arretloggrandtotal);
        //    decimal arrettotalamt = Convert.ToDecimal(tblmst.arretlogtotalamt);
        //    decimal arrettaxamt = Convert.ToDecimal(tblmst.arretlogtax);
        //    decimal arretamtidr = db.QL_trnarretlogdtl.Where(x => x.cmpcode == cmp && x.arretlogmstoid == id).Sum(x => x.arretlogqty * x.arretlogvalueidr);
        //    decimal arretamtusd = db.QL_trnarretlogdtl.Where(x => x.cmpcode == cmp && x.arretlogmstoid == id).Sum(x => x.arretlogqty * x.arretlogvalueusd);
        //    var glseq = 1;
        //    var refname = "LOG";

        //    sSql = "SELECT arretlogdtloid arretdtloid, arretlogdtlseq arretdtlseq, arretd.logoid matoid, (matrawcode + ' - ' + logno) matcode, matrawlongdesc matlongdesc, arretlogqty arretqty, gendesc arretunit, arretlogprice arretprice, arretlogamount arretamount, arretlogdtlnote arretdtlnote, arretlogwhoid arretwhoid, arretlogvalueidr arretvalueidr, arretlogvalueusd arretvalueusd FROM /*QL_trnarretlogmst*/QL_trnjualmst arretm INNER JOIN QL_trnarretlogdtl arretd ON arretd.cmpcode=arretm.cmpcode AND arretd.arretlogmstoid=arretm.arretlogmstoid INNER JOIN QL_mstlog l ON l.cmpcode=arretd.cmpcode AND l.logoid=arretd.logoid INNER JOIN QL_mstmatraw m ON m.matrawoid=l.refoid INNER JOIN QL_mstgen g ON genoid=arretlogunitoid WHERE arretm.arretlogmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<arretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.rateoid, tblmst.rate2oid);
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_LOG", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_LOG");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_LOG", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE /*QL_trnarretlogmst*/QL_trnjualmst SET arretlogno='" + transno + "', arretlogmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE arretlogmststatus='In Approval' AND arretlogmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnarretlogmst*/QL_trnjualmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnarlogdtl SET arretdtlflag='' WHERE cmpcode='" + cmp + "' AND arlogdtloid IN (SELECT arlogdtloid FROM QL_trnarretlogdtl WHERE cmpcode='" + cmp + "' AND arretlogmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_trnarlogmst SET arretmstflag='' WHERE cmpcode='" + cmp + "' AND arlogmstoid IN (SELECT arlogmstoid FROM /*QL_trnarretlogmst*/QL_trnjualmst WHERE cmpcode='" + cmp + "' AND arretlogmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "ARRETLOG", "QL_trnarretlogdtl", id, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, "A/R Return Log", transno, userid, null, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, 0, null, tbldtl[i].arretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, 0, "QL_trnarretlogdtl", userid, null, tbldtl[i].arretvalueidr * tbldtl[i].arretqty, tbldtl[i].arretvalueusd * tbldtl[i].arretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].arretqty, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, "QL_trnarretlogdtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "/*QL_trnarretlogmst*/QL_trnjualmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARRETLOG", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), -arretgrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, -arretgrandtotal * cRate.GetRateMonthlyIDRValue, 0, -arretgrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));

        //                    if (arretamtidr > 0 && arretamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return Log|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, arretamtidr / arretamtusd, arretamtidr / arretamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : Stock Barang
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "D", arretamtidr, transno, "A/R Return Log|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "/*QL_trnarretlogmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "C", arretamtidr, transno, "A/R Return Log|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "/*QL_trnarretlogmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (arretgrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return Log|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = ((arrettotalamt * cRate.GetRateMonthlyIDRValue) + (arrettaxamt * cRate.GetRateMonthlyIDRValue)) - (arretgrandtotal * cRate.GetRateMonthlyIDRValue);
        //                        decimal dSelUSD = ((arrettotalamt * cRate.GetRateMonthlyUSDValue) + (arrettaxamt * cRate.GetRateMonthlyUSDValue)) - (arretgrandtotal * cRate.GetRateMonthlyUSDValue);

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "D", arrettotalamt, transno, "A/R Return Log|No. " + transno, "Post", userid, servertime, arrettotalamt * cRate.GetRateMonthlyIDRValue, arrettotalamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretlogmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (arrettaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "D", arrettaxamt, transno, "A/R Return Log|No. " + transno, "Post", userid, servertime, arrettaxamt * cRate.GetRateMonthlyIDRValue, arrettaxamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretlogmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R Return Log|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "/*QL_trnarretlogmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R Return Log|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "/*QL_trnarretlogmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "C", arretgrandtotal, transno, "A/R Return Log|No. " + transno, "Post", userid, servertime, arretgrandtotal * cRate.GetRateMonthlyIDRValue, arretgrandtotal * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretlogmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //private void ApprovalARRetSawn(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    /*QL_trnarretsawnmst*/QL_trnjualmst tblmst = db./*QL_trnarretsawnmst*/QL_trnjualmst.Find(cmp, id);

        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sDate = tblmst.arretsawndate;
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var conaroid = ClassFunction.GenerateID("QL_CONAR");
        //    var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
        //    var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var sotype = db.QL_mstcust.Where(x => x.custoid == tblmst.custoid).Select(x => x.custtype).FirstOrDefault();
        //    var sVarJual = "VAR_JUAL_LOCAL";
        //    var cRate = new ClassRate();
        //    decimal arretgrandtotal = Convert.ToDecimal(tblmst.arretsawngrandtotal);
        //    decimal arrettotalamt = Convert.ToDecimal(tblmst.arretsawntotalamt);
        //    decimal arrettaxamt = Convert.ToDecimal(tblmst.arretsawntax);
        //    decimal arretamtidr = db.QL_trnarretsawndtl.Where(x => x.cmpcode == cmp && x.arretsawnmstoid == id).Sum(x => x.arretsawnqty * x.arretsawnvalueidr);
        //    decimal arretamtusd = db.QL_trnarretsawndtl.Where(x => x.cmpcode == cmp && x.arretsawnmstoid == id).Sum(x => x.arretsawnqty * x.arretsawnvalueusd);
        //    var glseq = 1;
        //    var refname = "PALLET";

        //    sSql = "SELECT arretsawndtloid arretdtloid, arretsawndtlseq arretdtlseq, arretd.palletoid matoid, (matrawcode + ' - ' + palletno) matcode, matrawlongdesc matlongdesc, arretsawnqty arretqty, gendesc arretunit, arretsawnprice arretprice, arretsawnamount arretamount, arretsawndtlnote arretdtlnote, arretsawnwhoid arretwhoid, arretsawnvalueidr arretvalueidr, arretsawnvalueusd arretvalueusd FROM /*QL_trnarretsawnmst*/QL_trnjualmst arretm INNER JOIN QL_trnarretsawndtl arretd ON arretd.cmpcode=arretm.cmpcode AND arretd.arretsawnmstoid=arretm.arretsawnmstoid INNER JOIN QL_mstpallet l ON l.cmpcode=arretd.cmpcode AND l.palletoid=arretd.palletoid INNER JOIN QL_mstmatraw m ON m.matrawoid=l.refoid INNER JOIN QL_mstgen g ON genoid=arretsawnunitoid WHERE arretm.arretsawnmstoid=" + id;
        //    var tbldtl = db.Database.SqlQuery<arretdtl>(sSql).ToList();

        //    if (action == "Approved")
        //    {
        //        cRate.SetRateValue(tblmst.rateoid, tblmst.rate2oid);
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_ST", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_ST");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_HPP_JUAL", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_HPP_JUAL");
        //        sVarJual = sotype.ToUpper() == "LOCAL" ? "VAR_JUAL_LOCAL" : "VAR_JUAL_EXPORT";
        //        if (error == "" && !ClassFunction.IsInterfaceExists(sVarJual, cmp))
        //            error = ClassFunction.GetInterfaceWarning(sVarJual);
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_AR");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_PPN_OUT", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_PPN_OUT");
        //        if (error == "" && !ClassFunction.IsInterfaceExists("VAR_ROUNDING", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_ROUNDING");
        //    }

        //    if (error == "")
        //    {
        //        var iTransitAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_ST", cmp));
        //        var iHPPAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_HPP_JUAL", cmp));
        //        var iJualAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface(sVarJual, cmp));
        //        var iARAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR", cmp));
        //        var iPPNAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_PPN_OUT", cmp));
        //        var iRoundAcctgOid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_ROUNDING", cmp));

        //        using (var objTrans = db.Database.BeginTransaction())
        //        {
        //            try
        //            {
        //                // Update Sret
        //                sSql = "UPDATE /*QL_trnarretsawnmst*/QL_trnjualmst SET arretsawnno='" + transno + "', arretsawnmststatus='" + action + "', approvaluser='" + userid + "', approvaldatetime='" + servertime + "', upduser='" + userid + "', updtime='" + servertime + "' WHERE arretsawnmststatus='In Approval' AND arretsawnmstoid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                // Update Approval
        //                sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE statusrequest='New' AND event='In Approval' AND tablename='/*QL_trnarretsawnmst*/QL_trnjualmst' AND oid=" + id;
        //                db.Database.ExecuteSqlCommand(sSql);
        //                db.SaveChanges();

        //                if (action == "Rejected")
        //                {
        //                    sSql = "UPDATE QL_trnarsawndtl SET arretdtlflag='' WHERE cmpcode='" + cmp + "' AND arsawndtloid IN (SELECT arsawndtloid FROM QL_trnarretsawndtl WHERE cmpcode='" + cmp + "' AND arretsawnmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE /*QL_trnarsawnmst*/QL_trnjualmst SET arretmstflag='' WHERE cmpcode='" + cmp + "' AND arsawnmstoid IN (SELECT arsawnmstoid FROM /*QL_trnarretsawnmst*/QL_trnjualmst WHERE cmpcode='" + cmp + "' AND arretsawnmstoid=" + id + ")";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                else if (action == "Approved")
        //                {
        //                    if (tbldtl != null)
        //                    {
        //                        for (var i = 0; i < tbldtl.Count(); i++)
        //                        {
        //                            //Insert conmat
        //                            db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, conmtroid++, "ARRETST", "QL_trnarretsawndtl", id, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, "A/R Return Sawn Timber", transno, userid, null, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, 0, null, tbldtl[i].arretdtloid));

        //                            // Update/Insert QL_crdmtr
        //                            var flagcrd = "";
        //                            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, crdmatoid, tbldtl[i].matoid, refname, tbldtl[i].arretwhoid, tbldtl[i].arretqty, 0, "QL_trnarretsawndtl", userid, null, tbldtl[i].arretvalueidr * tbldtl[i].arretqty, tbldtl[i].arretvalueusd * tbldtl[i].arretqty, out flagcrd);
        //                            if (flagcrd == "Update")
        //                                db.Entry(crdmtr).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_crdmtr.Add(crdmtr);
        //                                crdmatoid++;
        //                            }
        //                            db.SaveChanges();

        //                            // Update/Insert QL_stockvalue
        //                            var flagstval = "";
        //                            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, stockvaloid, tbldtl[i].matoid, refname, tbldtl[i].arretqty, tbldtl[i].arretvalueidr, tbldtl[i].arretvalueusd, "QL_trnarretsawndtl", null, userid, out flagstval);
        //                            if (flagstval == "Update")
        //                                db.Entry(stockvalue).State = EntityState.Modified;
        //                            else
        //                            {
        //                                db.QL_stockvalue.Add(stockvalue);
        //                                stockvaloid++;
        //                            }
        //                            db.SaveChanges();
        //                        }
        //                    }
        //                    //Insert QL_conar
        //                    db.QL_conar.Add(ClassFunction.InsertConAR(cmp, conaroid++, "/*QL_trnarretsawnmst*/QL_trnjualmst", id, 0, tblmst.custoid, iARAcctgOid, "Post", "ARRETST", sDate, ClassFunction.GetDateToPeriodAcctg(sDate), 0, DateTime.Parse("01/01/1900"), "", 0, DateTime.Parse("01/01/1900"), -arretgrandtotal, 0, "", "", "", "", userid, servertime, userid, servertime, -arretgrandtotal * cRate.GetRateMonthlyIDRValue, 0, -arretgrandtotal * cRate.GetRateMonthlyUSDValue, 0, 0, ""));

        //                    if (arretamtidr > 0 && arretamtusd > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return ST|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 1, 1, 1, 1, arretamtidr / arretamtusd, arretamtidr / arretamtusd));
        //                        db.SaveChanges();
        //                        // Insert GL DTL 1st
        //                        // D : Stock Barang
        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iTransitAcctgOid, "D", arretamtidr, transno, "A/R Return ST|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "/*QL_trnarretsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        // C : Stok Dalam Perjalanan
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iHPPAcctgOid, "C", arretamtidr, transno, "A/R Return ST|No. " + transno, "Post", userid, servertime, arretamtidr, arretamtusd, "/*QL_trnarretsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }
        //                    if (arretgrandtotal > 0)
        //                    {
        //                        // Insert QL_trnglmst
        //                        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "A/R Return ST|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
        //                        db.SaveChanges();

        //                        decimal dSelIDR = ((arrettotalamt * cRate.GetRateMonthlyIDRValue) + (arrettaxamt * cRate.GetRateMonthlyIDRValue)) - (arretgrandtotal * cRate.GetRateMonthlyIDRValue);
        //                        decimal dSelUSD = ((arrettotalamt * cRate.GetRateMonthlyUSDValue) + (arrettaxamt * cRate.GetRateMonthlyUSDValue)) - (arretgrandtotal * cRate.GetRateMonthlyUSDValue);

        //                        glseq = 1;
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iJualAcctgOid, "D", arrettotalamt, transno, "A/R Return ST|No. " + transno, "Post", userid, servertime, arrettotalamt * cRate.GetRateMonthlyIDRValue, arrettotalamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        if (arrettaxamt > 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iPPNAcctgOid, "D", arrettaxamt, transno, "A/R Return ST|No. " + transno, "Post", userid, servertime, arrettaxamt * cRate.GetRateMonthlyIDRValue, arrettaxamt * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan IDR
        //                        if (dSelIDR != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelIDR > 0 ? "C" : "D"), 0, transno, "Pembulatan IDR A/R Return ST|No. " + transno, "Post", userid, servertime, Math.Abs(dSelIDR), 0, "/*QL_trnarretsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        // D/C : Pembulatan USD
        //                        if (dSelUSD != 0)
        //                        {
        //                            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iRoundAcctgOid, (dSelUSD > 0 ? "C" : "D"), 0, transno, "Pembulatan USD A/R Return ST|No. " + transno, "Post", userid, servertime, 0, Math.Abs(dSelUSD), "/*QL_trnarretsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                            db.SaveChanges();
        //                        }
        //                        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, gldtloid++, glseq++, glmstoid, iARAcctgOid, "C", arretgrandtotal, transno, "A/R Return ST|No. " + transno, "Post", userid, servertime, arretgrandtotal * cRate.GetRateMonthlyIDRValue, arretgrandtotal * cRate.GetRateMonthlyUSDValue, "/*QL_trnarretsawnmst*/QL_trnjualmst " + id.ToString(), null, null, null, 0));
        //                        db.SaveChanges();
        //                        glmstoid++;
        //                    }

        //                    // Update Last ID
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (conaroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (glmstoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //                    db.Database.ExecuteSqlCommand(sSql);
        //                    db.SaveChanges();
        //                }
        //                objTrans.Commit();
        //            }
        //            catch (Exception ex)
        //            {
        //                objTrans.Rollback();
        //                error = ex.ToString();
        //            }
        //        }
        //    }
        //}

        //#endregion

        //#region Berita Acara
        //public class brtacaradtl
        //{
        //    public int acaradtloid { get; set; }
        //    public int acaradtlseq { get; set; }
        //    public string acarareftype { get; set; }
        //    public int acararefoid { get; set; }
        //    public string acararefcode { get; set; }
        //    public string acarareflongdesc { get; set; }
        //    public decimal acaraqty { get; set; }
        //    public int acaraunitoid { get; set; }
        //    public string acaraunit { get; set; }
        //    public decimal maxqty { get; set; }
        //    public string acaradtlnote { get; set; }
        //    public decimal acaravalueidr { get; set; }
        //    public decimal acaravalueusd { get; set; }
        //    public int wodtl2oid { get; set; }
        //    public int wodtl3oid { get; set; }
        //    public int matoid_kik { get; set; }
        //    public string matcode_kik { get; set; }
        //    public string matlongdesc_kik { get; set; }
        //    public decimal matqty_kik { get; set; }
        //    public int matunitoid_kik { get; set; }
        //    public string matunit_kik { get; set; }
        //}

        //private void ApprovalBeritaAcara(int id, string cmp, string transno, string action, out string error)
        //{
        //    error = "";
        //    var servertime = ClassFunction.GetServerTime();
        //    var userid = Session["UserID"].ToString();
        //    var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
        //    var iConOid = ClassFunction.GenerateID("QL_CONMAT");
        //    var iCrdOid = ClassFunction.GenerateID("QL_CRDMTR");
        //    var iGlMstOid = ClassFunction.GenerateID("QL_TRNGLMST");
        //    var iGlDtlOid = ClassFunction.GenerateID("QL_TRNGLDTL");
        //    var iStockValOid = ClassFunction.GenerateID("QL_STOCKVALUE");
        //    var iConWipOid = ClassFunction.GenerateID("QL_CONWIP");
        //    var periodacctg = ClassFunction.GetDateToPeriodAcctg(servertime);

        //    int[] arAcctgOid = new int[] { 0, 0, 0, 0, 0, 0 };
        //    decimal[] arPostAmtIDR = new decimal[] { 0, 0, 0, 0, 0, 0 };
        //    decimal[] arPostAmtUSD = new decimal[] { 0, 0, 0, 0, 0, 0 };
        //    var iGroupOid = 0;

        //    sSql = "SELECT acaradtloid, bad.acaradtlseq, bad.acarareftype, bad.acararefoid, (CASE bad.acarareftype WHEN 'Raw' THEN (SELECT m.matrawcode FROM QL_mstmatraw m WHERE m.matrawoid=bad.acararefoid) WHEN 'General' THEN (SELECT m.matgencode FROM QL_mstmatgen m WHERE m.matgenoid=bad.acararefoid) WHEN 'Spare Part' THEN (SELECT m.sparepartcode FROM QL_mstsparepart m WHERE m.sparepartoid=bad.acararefoid) WHEN 'Log' THEN (SELECT m.logno FROM QL_mstlog m WHERE m.logoid=bad.acararefoid) WHEN 'Sawn Timber' THEN (SELECT m.palletno FROM QL_mstpallet m WHERE m.cmpcode=bad.cmpcode AND m.palletoid=bad.acararefoid) ELSE '' END) AS matcode, (CASE bad.acarareftype WHEN 'Raw' THEN (SELECT m.matrawlongdesc FROM QL_mstmatraw m WHERE m.matrawoid=bad.acararefoid) WHEN 'General' THEN (SELECT m.matgenlongdesc FROM QL_mstmatgen m WHERE m.matgenoid=bad.acararefoid) WHEN 'Spare Part' THEN (SELECT m.sparepartlongdesc FROM QL_mstsparepart m WHERE m.sparepartoid=bad.acararefoid) WHEN 'Log' THEN (SELECT mx.matrawlongdesc FROM QL_mstlog m INNER JOIN QL_mstmatraw mx ON mx.matrawoid=m.refoid WHERE m.logoid=bad.acararefoid) WHEN 'Sawn Timber' THEN (SELECT m.palletlongdesc FROM QL_mstpallet m WHERE m.cmpcode=bad.cmpcode AND m.palletoid=bad.acararefoid) ELSE '' END) AS matlongdesc, bad.acaraqty, g.gendesc AS acaraunit, bad.acaradtlnote, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueidr, 0)) / NULLIF(SUM(stockqty),0) FROM QL_stockvalue st WHERE st.cmpcode=bad.cmpcode AND st.periodacctg IN ('" + periodacctg + "', '" + ClassFunction.GetLastPeriod(periodacctg) + "') AND st.refoid=bad.acararefoid AND refname=(CASE bad.acarareftype WHEN 'Raw' THEN 'RAW MATERIAL' WHEN 'General' THEN 'GENERAL MATERIAL' WHEN 'Spare Part' THEN 'SPARE PART' WHEN 'Log' THEN 'LOG' ELSE 'PALLET' END) AND closeflag=''), 0.0) AS acaravalueidr, ISNULL((SELECT SUM(ISNULL(stockqty, 0) * ISNULL(stockvalueusd, 0)) / NULLIF(SUM(stockqty),0) FROM QL_stockvalue st WHERE st.cmpcode=bad.cmpcode AND st.periodacctg IN ('" + periodacctg + "', '" + ClassFunction.GetLastPeriod(periodacctg) + "') AND st.refoid=bad.acararefoid AND refname=(CASE bad.acarareftype WHEN 'Raw' THEN 'RAW MATERIAL' WHEN 'General' THEN 'GENERAL MATERIAL' WHEN 'Spare Part' THEN 'SPARE PART' WHEN 'Log' THEN 'LOG' ELSE 'PALLET' END) AND closeflag=''), 0.0) AS acaravalueusd FROM QL_trnbrtacaradtl bad INNER JOIN QL_mstgen g ON g.genoid=bad.acaraunitoid WHERE bad.acaramstoid=" + id + " AND bad.cmpcode='" + cmp + "' ORDER BY bad.acaradtlseq";

        //    //var tbl = db.QL_trnbrtacaramst.Where(x => x.cmpcode == cmp && x.acaramstoid == id && x.acaramststatus == "In Approval").First();
        //    //if (tbl == null)
        //    //{
        //    //    error = "Please select data for approval!";
        //    //    return;
        //    //}
        //    List<brtacaradtl> tbldtl = db.Database.SqlQuery<brtacaradtl>(sSql).ToList();
        //    if (tbldtl == null || tbldtl.Count == 0)
        //    {
        //        error = "Please select data for approval!";
        //        return;
        //    }
        //    var cRate = new ClassRate();
        //    if (action == "Approved")
        //    {
        //        //var iCheck = db.QL_trnwomst.Where(x => x.cmpcode == cmp && x.womstoid == tbl.womstoid && x.womststatus == "Closed").Count();
        //        //if (iCheck > 0)
        //        //{
        //        //    error = "KIK has been closed by another user. Please Reject or Revise and delete this transaction!";
        //        //    return;
        //        //}
        //        // Interface Validation
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_WIP", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_WIP");
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_RM", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_RM");
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_GM", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_GM");
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_SP", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_SP");
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_LOG", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_LOG");
        //        if (!ClassFunction.IsInterfaceExists("VAR_STOCK_ST", cmp))
        //            error = ClassFunction.GetInterfaceWarning("VAR_STOCK_ST");

        //        arAcctgOid[0] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_WIP", cmp));
        //        arAcctgOid[1] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_RM", cmp));
        //        arAcctgOid[2] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_GM", cmp));
        //        arAcctgOid[3] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_SP", cmp));
        //        arAcctgOid[4] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_LOG", cmp));
        //        arAcctgOid[5] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_ST", cmp));
        //        //iGroupOid = db.QL_mstdeptgroupdtl.Where(x => x.cmpcode == cmp && x.deptoid == tbl.deptoid).Select(y => y.groupoid).FirstOrDefault();
        //        if (tbldtl.Count() > 0)
        //        {
        //            for (var i = 0; i < tbldtl.Count(); i++)
        //            {
        //                var sRef = "";
        //                if (tbldtl[i].acarareftype.ToUpper() == "RAW")
        //                    sRef = "RAW MATERIAL";
        //                else if (tbldtl[i].acarareftype.ToUpper() == "GENERAL")
        //                    sRef = "GENERAL MATERIAL";
        //                else if (tbldtl[i].acarareftype.ToUpper() == "SPARE PART")
        //                    sRef = "SPARE PART";
        //                else if (tbldtl[i].acarareftype.ToUpper() == "LOG")
        //                    sRef = "LOG";
        //                else
        //                    sRef = "PALLET";
        //                //if (!ClassFunction.IsStockAvailable(cmp, periodacctg, tbldtl[i].acararefoid, tbl.acarawhoid, tbldtl[i].acaraqty, sRef))
        //                    error += " - Qty Detail BA Code: " + tbldtl[i].acararefcode + " must be less than Stock Qty!<BR>";
        //                tbldtl[i].acaravalueidr = Math.Round(tbldtl[i].acaravalueidr, 4);
        //                tbldtl[i].acaravalueusd = Math.Round(tbldtl[i].acaravalueusd, 4);
        //            }
        //        }
        //    }

        //    using (var objTrans = db.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            //tbl.acaramststatus = action;
        //            //tbl.upduser = Session["UserID"].ToString();
        //            //tbl.updtime = servertime;
        //            //tbl.approvaluser = Session["UserID"].ToString();
        //            //tbl.approvaldatetime = servertime;
        //            //if (action == "Approved")
        //            //{
        //            //    tbl.acarano = transno;
        //            //}
        //            //db.Entry(tbl).State = EntityState.Modified;

        //            //sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trnbrtacaramst' AND oid=" + id;
        //            //db.Database.ExecuteSqlCommand(sSql);
        //            //if (action == "Rejected")
        //            //{
        //            //    sSql = "UPDATE QL_trnwodtl3 SET wodtl3reqflag='', lasttransupdreqflag='QL_trnbrtacaramst' WHERE cmpcode='" + cmp + "' AND wodtl3oid IN (SELECT wodtl3oid FROM QL_trnbrtacaradtl WHERE cmpcode='" + cmp + "' AND acaramstoid=" + id + " AND wodtl3oid<>0)";
        //            //    db.Database.ExecuteSqlCommand(sSql);
        //            //    db.SaveChanges();
        //            //    sSql = "UPDATE QL_trnwodtl2 SET wodtl2reqflag='' WHERE cmpcode='" + cmp + "' AND wodtl2oid IN (SELECT wodtl2oid FROM QL_trnbrtacaradtl WHERE cmpcode='" + cmp + "' AND acaramstoid=" + id + " AND wodtl2oid<>0)";
        //            //    db.Database.ExecuteSqlCommand(sSql);
        //            //    db.SaveChanges();
        //            //}
        //            //else if (action == "Approved")
        //            //{
        //            //    arPostAmtIDR[0] = tbldtl.Sum(y => y.acaravalueidr * y.acaraqty);
        //            //    arPostAmtIDR[1] = tbldtl.Where(x => x.acarareftype == "Raw").Sum(y => y.acaravalueidr * y.acaraqty);
        //            //    arPostAmtIDR[2] = tbldtl.Where(x => x.acarareftype == "General").Sum(y => y.acaravalueidr * y.acaraqty);
        //            //    arPostAmtIDR[3] = tbldtl.Where(x => x.acarareftype == "Spare Part").Sum(y => y.acaravalueidr * y.acaraqty);
        //            //    arPostAmtIDR[4] = tbldtl.Where(x => x.acarareftype == "Log").Sum(y => y.acaravalueidr * y.acaraqty);
        //            //    arPostAmtIDR[5] = tbldtl.Where(x => x.acarareftype == "Sawn Timber").Sum(y => y.acaravalueidr * y.acaraqty);

        //            //    for (int i = 0; i < tbldtl.Count; i++)
        //            //    {
        //            //        sSql = "UPDATE QL_trnbrtacaradtl SET acaravalueidr=" + tbldtl[i].acaravalueidr + ", acaravalueusd=" + tbldtl[i].acaravalueusd + " WHERE cmpcode='" + cmp + "' AND acaradtloid=" + tbldtl[i].acaradtloid;
        //            //        db.Database.ExecuteSqlCommand(sSql);
        //            //        var sRef = "";
        //            //        if (tbldtl[i].acarareftype.ToUpper() == "RAW")
        //            //            sRef = "RAW MATERIAL";
        //            //        else if (tbldtl[i].acarareftype.ToUpper() == "GENERAL")
        //            //            sRef = "GENERAL MATERIAL";
        //            //        else if (tbldtl[i].acarareftype.ToUpper() == "SPARE PART")
        //            //            sRef = "SPARE PART";
        //            //        else if (tbldtl[i].acarareftype.ToUpper() == "LOG")
        //            //            sRef = "LOG";
        //            //        else
        //            //            sRef = "PALLET";

        //            //        //Insert conmat
        //            //        db.QL_conmat.Add(ClassFunction.InsertConMat(cmp, iConOid++, "BA-", "QL_trnbrtacaradtl", id, tbldtl[i].acararefoid, sRef, tbl.acarawhoid, tbldtl[i].acaraqty, "Berita Acara - " + tbl.acaratype, transno, userid, null, tbldtl[i].acaravalueidr, tbldtl[i].acaravalueusd, 0, null, tbldtl[i].acaradtloid));

        //            //        // Update/Insert QL_crdmtr
        //            //        var flagcrd = "";
        //            //        QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(cmp, iCrdOid, tbldtl[i].acararefoid, sRef, tbl.acarawhoid, tbldtl[i].acaraqty * -1, 0, "QL_trnbrtacaradtl", userid, null, tbldtl[i].acaravalueidr * tbldtl[i].acaraqty * -1, tbldtl[i].acaravalueusd * tbldtl[i].acaraqty * -1, out flagcrd);
        //            //        if (flagcrd == "Update")
        //            //            db.Entry(crdmtr).State = EntityState.Modified;
        //            //        else
        //            //        {
        //            //            db.QL_crdmtr.Add(crdmtr);
        //            //            iCrdOid++;
        //            //        }
        //            //        db.SaveChanges();

        //            //        // Update/Insert QL_stockvalue
        //            //        var flagstval = "";
        //            //        QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(cmp, iStockValOid, tbldtl[i].acararefoid, sRef, tbldtl[i].acaraqty * -1, tbldtl[i].acaravalueidr, tbldtl[i].acaravalueusd, "QL_trnbrtacaradtl", null, userid, out flagstval);
        //            //        if (flagstval == "Update")
        //            //            db.Entry(stockvalue).State = EntityState.Modified;
        //            //        else
        //            //        {
        //            //            db.QL_stockvalue.Add(stockvalue);
        //            //            iStockValOid++;
        //            //        }
        //            //        db.SaveChanges();
        //            //    }

        //            //    string[] arDBCR = new string[] { "D", "C", "C", "C", "C", "C" };
        //            //    if (arPostAmtIDR[0] > 0 && arPostAmtUSD[0] > 0)
        //            //    {
        //            //        // Insert QL_trnglmst
        //            //        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(cmp, iGlMstOid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, (tbl.acaratype == "Material Transform") ? "BA Transform" : "BA Usage" + "|No. " + transno, "Post", servertime, userid, servertime, userid, servertime, 0, 0, 1, 1, arPostAmtIDR[0] / arPostAmtUSD[0], arPostAmtIDR[0] / arPostAmtUSD[0]));
        //            //        db.SaveChanges();

        //            //        var glseq = 1;
        //            //        for (var i = 0; i < arAcctgOid.Length; i++)
        //            //        {
        //            //            if (arPostAmtIDR[i] > 0)
        //            //            {
        //            //                db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(cmp, iGlDtlOid++, glseq++, iGlMstOid, arAcctgOid[i], arDBCR[i], arPostAmtIDR[i], transno, (tbl.acaratype == "Material Transform") ? "BA Transform" : "BA Usage" + "|No. " + transno, "Post", userid, servertime, arPostAmtIDR[i], arPostAmtUSD[i], "QL_trnbrtacaramst " + id.ToString(), null, null, null, 0));
        //            //                db.SaveChanges();
        //            //                iGlDtlOid++;
        //            //            }
        //            //        }
        //            //    }
        //            //    iGlMstOid++;

        //            //    // Update Last ID
        //            //    sSql = "UPDATE QL_mstoid SET lastoid=" + (iConOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
        //            //    db.Database.ExecuteSqlCommand(sSql);
        //            //    db.SaveChanges();
        //            //    sSql = "UPDATE QL_mstoid SET lastoid=" + (iCrdOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
        //            //    db.Database.ExecuteSqlCommand(sSql);
        //            //    db.SaveChanges();
        //            //    sSql = "UPDATE QL_mstoid SET lastoid=" + (iStockValOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
        //            //    db.Database.ExecuteSqlCommand(sSql);
        //            //    db.SaveChanges();
        //            //    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlMstOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
        //            //    db.Database.ExecuteSqlCommand(sSql);
        //            //    db.SaveChanges();
        //            //    sSql = "UPDATE QL_mstoid SET lastoid=" + (iGlDtlOid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
        //            //    db.Database.ExecuteSqlCommand(sSql);
        //            //    db.SaveChanges();
        //            //}

        //            db.SaveChanges();
        //            objTrans.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            objTrans.Rollback();
        //            error = ex.ToString();
        //        }
        //    }
        //}

        //#endregion

        #region Material Transfer

        public class transdtl
        {
            public string cmpcode { get; set; }
            public int transmstoid { get; set; }
            public int transdtlseq { get; set; }
            public int transdtloid { get; set; }
            public string transreftype { get; set; }
            public int transrefoid { get; set; }
            public string transrefcode { get; set; }
            public string transreflongdesc { get; set; }
            public decimal transqty { get; set; }
            public decimal stockqty { get; set; }
            public int transunitoid { get; set; }
            public string transunit { get; set; }
            public int transfromwhoid { get; set; }
            public string transfromwh { get; set; }
            public int transtowhoid { get; set; }
            public string transtowh { get; set; }
            public string transdtlnote { get; set; }
            public decimal transvalueidr { get; set; }
            public decimal transvalueusd { get; set; }
            public decimal transprice { get; set; }
            public decimal transpriceidr { get; set; }
            public decimal transpriceusd { get; set; }
            public decimal transdtlamt { get; set; }
            public decimal transdtlamtidr { get; set; }
            public decimal transdtlamtusd { get; set; }
        }

        private void ApprovalMatTransfer(int id, string cmp, string transno, string action, out string error)
        {
            error = "";
            //var tblmst = db.QL_trntransmst.Where(x => x.cmpcode == cmp && x.transmstoid == id && x.transmststatus == "In Approval").First();
            //if (tblmst == null)
            //{
            //    error = "Please select data for approval!";
            //    return;
            //}
            var servertime = ClassFunction.GetServerTime();
            var userid = Session["UserID"].ToString();
            var sPeriod = ClassFunction.GetDateToPeriodAcctg(servertime);
            var conaroid = ClassFunction.GenerateID("QL_CONAR");
            var conapoid = ClassFunction.GenerateID("QL_CONAP");
            var conmtroid = ClassFunction.GenerateID("QL_CONMAT");
            var crdmatoid = ClassFunction.GenerateID("QL_CRDMTR");
            var glmstoid = ClassFunction.GenerateID("QL_TRNGLMST");
            var gldtloid = ClassFunction.GenerateID("QL_TRNGLDTL");
            var stockvaloid = ClassFunction.GenerateID("QL_STOCKVALUE");
            var aptransmstoid = ClassFunction.GenerateID("QL_TRNAPTRANSMST");
            var artransmstoid = ClassFunction.GenerateID("QL_TRNARTRANSMST");
            var logoid = ClassFunction.GenerateID("QL_MSTLOG");
            var palletoid = ClassFunction.GenerateID("QL_MSTPALLET");
            var palletdtloid = ClassFunction.GenerateID("QL_MSTPALLETDTL");
            //var cRate = new ClassRate();
            //var iCurrOid = db.QL_mstcurr.Where(x => x.cmpcode == CompnyCode && x.activeflag == "ACTIVE" && x.currcode == "IDR").Select(y => y.curroid).FirstOrDefault();

            sSql = "SELECT transdtlseq, td.cmpcode, td.transmstoid, transdtloid, transreftype, transrefoid, dbo.GetMaterialCode(transreftype, transrefoid, td.cmpcode) transrefcode, dbo.GetMaterialDesc(transreftype, transrefoid, td.cmpcode) transreflongdesc, transqty, ISNULL((SELECT SUM(saldoakhir) FROM QL_crdmtr crd WHERE crd.cmpcode=td.cmpcode AND crd.refname=dbo.GetMaterialStockType(transreftype) AND crd.refoid=transrefoid AND mtrwhoid=transfromwhoid AND ISNULL(closeuser, '')='' AND crd.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "')), 0.0) stockqty, transunitoid, gu.gendesc transunit, transfromwhoid, gf.gendesc transfromwh, transtowhoid, gt.gendesc transtowh, transdtlnote, ISNULL((SELECT SUM(ISNULL(st.stockqty, 0) * ISNULL(st.stockvalueidr, 0)) / NULLIF(SUM(ISNULL(st.stockqty, 0)), 0) FROM QL_stockvalue st WHERE st.cmpcode=td.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=td.transrefoid AND st.refname=dbo.GetMaterialStockType(transreftype) AND closeflag=''), 0.0) transvalueidr, ISNULL((SELECT SUM(ISNULL(st.stockqty, 0) * ISNULL(st.stockvalueusd, 0)) / NULLIF(SUM(ISNULL(st.stockqty, 0)), 0) FROM QL_stockvalue st WHERE st.cmpcode=td.cmpcode AND st.periodacctg IN ('" + sPeriod + "', '" + ClassFunction.GetLastPeriod(sPeriod) + "') AND st.refoid=td.transrefoid AND st.refname=dbo.GetMaterialStockType(transreftype) AND closeflag=''), 0.0) transvalueusd FROM QL_trntransdtl td INNER JOIN QL_mstgen gu ON gu.genoid=transunitoid INNER JOIN QL_mstgen gf ON gf.genoid=transfromwhoid INNER JOIN QL_mstgen gt ON gt.genoid=transtowhoid WHERE td.cmpcode='" + cmp + "' AND td.transmstoid=" + id;
            var tbldtl = db.Database.SqlQuery<transdtl>(sSql).ToList();
            var suppoid = "";
            var custoid = "";
            var suppoid_real = 0;
            var custoid_real = 0;
            List<mattransdtl> dtDtl = (List<mattransdtl>)Session["QL_trntransdtl_approval"];
            int[] iStockAcctgOid = new int[] { 0, 0, 0, 0, 0, 0 };
            decimal[] StockAmtIDR = new decimal[] { 0, 0, 0, 0, 0, 0 };
            decimal[] StockAmtUSD = new decimal[] { 0, 0, 0, 0, 0, 0 };
            decimal[] StockAmtIDR2 = new decimal[] { 0, 0, 0, 0, 0, 0 };
            decimal[] StockAmtUSD2 = new decimal[] { 0, 0, 0, 0, 0, 0 };
            var aptransno = ""; var artransno = "";

            if (action == "Approved")
            {
                //cRate.SetRateValue(iCurrOid, servertime.ToString("MM/dd/yyyy"));
                // Cek Interface
                if (!ClassFunction.IsInterfaceExists("VAR_STOCK_RM", cmp))
                    error = ClassFunction.GetInterfaceWarning("VAR_STOCK_RM");
                if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_GM", cmp))
                    error = ClassFunction.GetInterfaceWarning("VAR_STOCK_GM");
                if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_SP", cmp))
                    error = ClassFunction.GetInterfaceWarning("VAR_STOCK_SP");
                if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_FG", cmp))
                    error = ClassFunction.GetInterfaceWarning("VAR_STOCK_FG");
                if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_LOG", cmp))
                    error = ClassFunction.GetInterfaceWarning("VAR_STOCK_LOG");
                if (error == "" && !ClassFunction.IsInterfaceExists("VAR_STOCK_ST", cmp))
                    error = ClassFunction.GetInterfaceWarning("VAR_STOCK_ST");
                if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AP_TRANSFER", cmp))
                    error = ClassFunction.GetInterfaceWarning("VAR_AP_TRANSFER");
                if (error == "" && !ClassFunction.IsInterfaceExists("VAR_AR_TRANSFER", cmp))
                    error = ClassFunction.GetInterfaceWarning("VAR_AR_TRANSFER");
                if (error == "" && !ClassFunction.IsInterfaceExists("VAR_SELISIH_TRANSFER", cmp))
                    error = ClassFunction.GetInterfaceWarning("VAR_SELISIH_TRANSFER");

                //suppoid = db.QL_mstdivision.Where(x => x.divcode == tblmst.cmpcode).Select(y => y.suppoid_nt).FirstOrDefault().ToString();
                //if (string.IsNullOrEmpty(suppoid))
                //    error = "Please set Master SUPPLIER in BUSINESS UNIT first!";
                //custoid = db.QL_mstdivision.Where(x => x.divcode == tblmst.cmpcode_to).Select(y => y.custoid_nt).FirstOrDefault().ToString();
                if (string.IsNullOrEmpty(custoid))
                    error = "Please set Master CUSTOMER in BUSINESS UNIT first!";
                if (dtDtl != null)
                {
                    for (var i = 0; i < dtDtl.Count(); i++)
                    {
                        if (dtDtl[i].transprice == 0)
                            error = "Please fill Price On Detail No. " + dtDtl[i].transdtloid + "!";
                    }
                } else
                    error = "Please fill PRICE first!";

                //for (int i = 0; i < tbldtl.Count(); i++)
                //{
                //    tbldtl[i].stockqty = db.Database.SqlQuery<decimal>("SELECT SUM(saldoakhir) FROM QL_crdmtr WHERE cmpcode='" + tblmst.cmpcode + "' AND refname=dbo.GetMaterialStockType('" + tbldtl[i].transreftype + "') AND refoid=" + tbldtl[i].transrefoid + " AND mtrwhoid=" + tbldtl[i].transfromwhoid + " AND ISNULL(closeuser, '')='' AND periodacctg IN ('" + ClassFunction.GetDateToPeriodAcctg(ClassFunction.GetServerTime()) + "', '" + ClassFunction.GetLastPeriod(ClassFunction.GetDateToPeriodAcctg(ClassFunction.GetServerTime())) + "')").FirstOrDefault();
                //    if (tbldtl[i].transqty > tbldtl[i].stockqty)
                //        error = "Qty for Detail No. " + dtDtl[i].transdtloid + " must be less than Stock Qty!";
                //}
            } else if (action == "Rejected")
            {
                Session["QL_trntransdtl_approval"] = null;
            } else
                Session["QL_trntransdtl_approval"] = null;

            if (error == "")
            {
                iStockAcctgOid[0] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_RM", cmp));
                iStockAcctgOid[1] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_GM", cmp));
                iStockAcctgOid[2] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_SP", cmp));
                iStockAcctgOid[3] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_FG", cmp));
                iStockAcctgOid[4] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_LOG", cmp));
                iStockAcctgOid[5] = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_STOCK_ST", cmp));
                var apacctgoid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AP_TRANSFER", cmp));
                var aracctgoid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_AR_TRANSFER", cmp));
                var selisihacctgoid = ClassFunction.GetAcctgOID(ClassFunction.GetVarInterface("VAR_SELISIH_TRANSFER", cmp));
                var supppaytypeoid = 0;
                var custppaytypeoid = 0;
                if (!string.IsNullOrEmpty(suppoid))
                    suppoid_real = Convert.ToInt32(suppoid);
                //supppaytypeoid = db.QL_mstsupp.Where(x => x.suppoid == suppoid_real).Select(y => y.supppaymentoid).FirstOrDefault();
                if (!string.IsNullOrEmpty(custoid))
                    custoid_real = Convert.ToInt32(custoid);
                //custppaytypeoid = db.QL_mstcust.Where(x => x.custoid == custoid_real).Select(y => y.custpaymentoid).FirstOrDefault();
                //var iDayAP = (from i in db.QL_mstgen where i.genoid == supppaytypeoid select i.gendesc).FirstOrDefault();
                //if (iDayAP == "-" || iDayAP == "ROG" || string.IsNullOrEmpty(iDayAP))
                //    iDayAP = "0.0";
                //var iDayAR = (from i in db.QL_mstgen where i.genoid == custppaytypeoid select i.gendesc).FirstOrDefault();
                //if (iDayAR == "-" || iDayAR == "ROG" || string.IsNullOrEmpty(iDayAR))
                //    iDayAR = "0.0";
                //var dDueDateAP = servertime.AddDays(Convert.ToDouble(iDayAP));
                //var dDueDateAR = servertime.AddDays(Convert.ToDouble(iDayAR));
                var totalamt = 0M; var selisihamtidr = 0M; var selisihamtusd = 0M; var totalstockidr = 0M; var totalstockusd = 0M;
                var totalamtidr = 0M; var totalamtusd = 0M;

                using (var objTrans = db.Database.BeginTransaction())
                {
                    try
                    {
                        //tblmst.transmststatus = action;
                        //tblmst.upduser = Session["UserID"].ToString();
                        //tblmst.updtime = servertime;
                        //tblmst.approvaluser = Session["UserID"].ToString();
                        //tblmst.approvaldatetime = servertime;
                        //tblmst.curroid = iCurrOid;
                        //if (action == "Approved")
                        //{
                        //    tblmst.transno = transno;
                        //    tblmst.rateoid = cRate.GetRateDailyOid;
                        //    tblmst.rate2oid = cRate.GetRateMonthlyOid;
                        //    tblmst.transratetoidr = cRate.GetRateDailyIDRValue.ToString();
                        //    tblmst.transrate2toidr = cRate.GetRateMonthlyIDRValue.ToString();
                        //    tblmst.transratetousd = cRate.GetRateDailyUSDValue.ToString();
                        //    tblmst.transrate2tousd = cRate.GetRateMonthlyUSDValue.ToString();
                        //}
                        //db.Entry(tblmst).State = EntityState.Modified;

                        //sSql = "UPDATE QL_approval SET statusrequest='" + action + "', event='" + action + "', approvaldate='" + servertime + "' WHERE cmpcode='" + cmp + "' AND statusrequest='New' AND event='In Approval' AND tablename='QL_trntransmst' AND oid=" + id;
                        //db.Database.ExecuteSqlCommand(sSql);

                        //if (action == "Approved")
                        //{
                        //    if (tbldtl != null)
                        //    {
                        //        for (var i = 0; i < tbldtl.Count(); i++)
                        //        {
                        //            var dtlprice = dtDtl.Where(x => x.transdtloid == tbldtl[i].transdtlseq).Select(y => y.transprice).FirstOrDefault();
                        //            sSql = "UPDATE QL_trntransdtl SET transprice=" + dtlprice + ", transpriceidr=" + dtlprice * cRate.GetRateMonthlyIDRValue + ", transpriceusd=" + dtlprice * cRate.GetRateMonthlyUSDValue + ", transdtlamt=" + (dtlprice * tbldtl[i].transqty) + ", transdtlamtidr=" + (dtlprice * tbldtl[i].transqty) * cRate.GetRateMonthlyIDRValue + ", transdtlamtusd=" + (dtlprice * tbldtl[i].transqty) * cRate.GetRateMonthlyUSDValue + ", transvalueidr=" + tbldtl[i].transvalueidr + ", transvalueusd=" + tbldtl[i].transvalueusd + " WHERE cmpcode='" + cmp + "' AND transdtloid=" + tbldtl[i].transdtloid;
                        //            db.Database.ExecuteSqlCommand(sSql);
                        //            tbldtl[i].transprice = dtlprice;
                        //            tbldtl[i].transpriceidr = dtlprice * cRate.GetRateMonthlyIDRValue;
                        //            tbldtl[i].transpriceusd = dtlprice * cRate.GetRateMonthlyUSDValue;
                        //        }
                        //        totalamt = tbldtl.Sum(x => x.transprice * x.transqty);
                        //        totalamtidr = totalamt * cRate.GetRateMonthlyIDRValue;
                        //        totalamtusd = totalamt * cRate.GetRateMonthlyUSDValue;
                        //        totalstockidr = tbldtl.Sum(x => x.transvalueidr * x.transqty);
                        //        totalstockusd = tbldtl.Sum(x => x.transvalueusd * x.transqty);
                        //        selisihamtidr = totalamtidr - totalstockidr;
                        //        selisihamtusd = totalamtusd - totalstockusd;

                        //        var sNo = "APTRN-" + ClassFunction.GetServerTime().ToString("yyyy.MM") + "-";
                        //        sSql = "SELECT ISNULL(MAX(CAST(RIGHT(aptransno, 6) AS INTEGER)) + 1, 1) AS IDNEW FROM QL_trnaptransmst WHERE cmpcode='" + tblmst.cmpcode_to + "' AND aptransno LIKE '" + sNo + "%'";
                        //        aptransno = sNo + ClassFunction.GenNumberString(db.Database.SqlQuery<int>(sSql).FirstOrDefault(), int.Parse(NumberCounter));

                        //        var sNo2 = "ARTRN-" + ClassFunction.GetServerTime().ToString("yyyy.MM") + "-";
                        //        sSql = "SELECT ISNULL(MAX(CAST(RIGHT(artransno, 6) AS INTEGER)) + 1, 1) AS IDNEW FROM QL_trnartransmst WHERE cmpcode='" + tblmst.cmpcode + "' AND artransno LIKE '" + sNo2 + "%'";
                        //        artransno = sNo2 + ClassFunction.GenNumberString(db.Database.SqlQuery<int>(sSql).FirstOrDefault(), int.Parse(NumberCounter));

                        //        //Insert Into QL_trnaptransmst
                        //        QL_trnaptransmst tblmstap = new QL_trnaptransmst();
                        //        tblmstap.cmpcode = tblmst.cmpcode_to;
                        //        tblmstap.aptransmstoid = aptransmstoid;
                        //        tblmstap.periodacctg = sPeriod;
                        //        tblmstap.aptransdate = Convert.ToDateTime(servertime.ToString("MM/dd/yyyy"));
                        //        tblmstap.aptransno = aptransno;
                        //        tblmstap.transmstoid = tblmst.transmstoid;
                        //        tblmstap.suppoid = suppoid_real;
                        //        tblmstap.aptranspaytypeoid = supppaytypeoid;
                        //        tblmstap.curroid = tblmst.curroid;
                        //        tblmstap.rateoid = tblmst.rateoid;
                        //        tblmstap.aptransratetoidr = tblmst.transratetoidr;
                        //        tblmstap.aptransratetousd = tblmst.transratetousd;
                        //        tblmstap.rate2oid = tblmst.rate2oid;
                        //        tblmstap.aptransrate2toidr = tblmst.transrate2toidr;
                        //        tblmstap.aptransrate2tousd = tblmst.transrate2tousd;
                        //        tblmstap.aptranstotalamt = totalamt;
                        //        tblmstap.aptranstotalamtidr = totalamtidr;
                        //        tblmstap.aptranstotalamtusd = totalamtusd;
                        //        tblmstap.aptranstotaldisc = 0;
                        //        tblmstap.aptranstotaldiscidr = 0;
                        //        tblmstap.aptranstotaldiscusd = 0;
                        //        tblmstap.aptranstotaltax = 0;
                        //        tblmstap.aptranstotaltaxidr = 0;
                        //        tblmstap.aptranstotaltaxusd = 0;
                        //        tblmstap.aptransgrandtotal = totalamt;
                        //        tblmstap.aptransgrandtotalidr = totalamtidr;
                        //        tblmstap.aptransgrandtotalusd = totalamtusd;
                        //        tblmstap.aptransmstnote = tblmst.transmstnote;
                        //        tblmstap.aptransmststatus = tblmst.transmststatus;
                        //        tblmstap.approvaluser = tblmst.approvaluser;
                        //        tblmstap.approvaldatetime = tblmst.approvaldatetime;
                        //        tblmstap.createuser = tblmst.createuser;
                        //        tblmstap.createtime = tblmst.createtime;
                        //        tblmstap.upduser = tblmst.upduser;
                        //        tblmstap.updtime = tblmst.updtime;
                        //        tblmstap.aptranssupptotal = totalamt;
                        //        tblmstap.aptransdatetakegiro = new DateTime(1900, 1, 1);
                        //        tblmstap.aptranstotalimportidr = 0;
                        //        tblmstap.aptranstotalimportusd = 0;
                        //        tblmstap.cancelseq = 0;
                        //        tblmstap.apcloseuser = "";
                        //        tblmstap.apclosetime = new DateTime(1900, 1, 1);
                        //        db.QL_trnaptransmst.Add(tblmstap);
                        //        sSql = "UPDATE QL_mstoid SET lastoid=" + tblmstap.aptransmstoid + " WHERE tablename='QL_trnaptransmst'";
                        //        db.Database.ExecuteSqlCommand(sSql);

                        //        //Insert Into QL_trnartransmst
                        //        QL_trnartransmst tblmstar = new QL_trnartransmst();
                        //        tblmstar.cmpcode = tblmst.cmpcode;
                        //        tblmstar.artransmstoid = artransmstoid;
                        //        tblmstar.periodacctg = sPeriod;
                        //        tblmstar.artransdate = Convert.ToDateTime(servertime.ToString("MM/dd/yyyy"));
                        //        tblmstar.artransno = artransno;
                        //        tblmstar.transmstoid = tblmst.transmstoid;
                        //        tblmstar.custoid = custoid_real;
                        //        tblmstar.artranspaytypeoid = supppaytypeoid;
                        //        tblmstar.curroid = tblmst.curroid;
                        //        tblmstar.rateoid = tblmst.rateoid;
                        //        tblmstar.artransratetoidr = tblmst.transratetoidr;
                        //        tblmstar.artransratetousd = tblmst.transratetousd;
                        //        tblmstar.rate2oid = tblmst.rate2oid;
                        //        tblmstar.artransrate2toidr = tblmst.transrate2toidr;
                        //        tblmstar.artransrate2tousd = tblmst.transrate2tousd;
                        //        tblmstar.artranstotalamt = totalamt;
                        //        tblmstar.artranstotaldiscdtl = 0;
                        //        tblmstar.artransmstdisctype = "P";
                        //        tblmstar.artransmstdiscvalue = 0;
                        //        tblmstar.artransmstdiscamt = 0;
                        //        tblmstar.artranstotaldisc = 0;
                        //        tblmstar.artranstotalnetto = totalamt;
                        //        tblmstar.artransgrandtotal = totalamt;
                        //        tblmstar.artranstaxtype = "NON TAX";
                        //        tblmstar.artranstaxvalue = 0;
                        //        tblmstar.artranstaxamt = 0;
                        //        tblmstar.artransdeliverycost = 0;
                        //        tblmstar.artransdeliverycost = 0;
                        //        tblmstar.artransothercost = 0;
                        //        tblmstar.artransmstnote = tblmst.transmstnote;
                        //        tblmstar.artransmststatus = tblmst.transmststatus;
                        //        tblmstar.approvaluser = tblmst.approvaluser;
                        //        tblmstar.approvaldatetime = tblmst.approvaldatetime;
                        //        tblmstar.createuser = tblmst.createuser;
                        //        tblmstar.createtime = tblmst.createtime;
                        //        tblmstar.upduser = tblmst.upduser;
                        //        tblmstar.updtime = tblmst.updtime;
                        //        tblmstar.artransdatetakegiro = new DateTime(1900, 1, 1);
                        //        tblmstar.arretmstflag = "";
                        //        tblmstar.arcloseuser = "";
                        //        tblmstar.arclosetime = new DateTime(1900, 1, 1);
                        //        db.QL_trnartransmst.Add(tblmstar);
                        //        sSql = "UPDATE QL_mstoid SET lastoid=" + tblmstar.artransmstoid + " WHERE tablename='QL_trnartransmst'";
                        //        db.Database.ExecuteSqlCommand(sSql);

                        //        var dtlamt = (from i in tbldtl where i.cmpcode == tblmst.cmpcode && i.transmstoid == tblmst.transmstoid select new { stockamtidr = i.transvalueidr * i.transqty, stockamtusd = i.transvalueusd * i.transqty, stockamtidr_to = i.transpriceidr * i.transqty, stockamtusd_to = i.transpriceusd * i.transqty, i.transreftype }).ToList();

                        //        StockAmtIDR[0] = dtlamt.Where(x => x.transreftype == "Raw").Sum(y => y.stockamtidr);
                        //        StockAmtIDR[1] = dtlamt.Where(x => x.transreftype == "General").Sum(y => y.stockamtidr);
                        //        StockAmtIDR[2] = dtlamt.Where(x => x.transreftype == "Spare Part").Sum(y => y.stockamtidr);
                        //        StockAmtIDR[3] = dtlamt.Where(x => x.transreftype == "Finish Good").Sum(y => y.stockamtidr);
                        //        StockAmtIDR[4] = dtlamt.Where(x => x.transreftype == "Log").Sum(y => y.stockamtidr);
                        //        StockAmtIDR[5] = dtlamt.Where(x => x.transreftype == "Sawn").Sum(y => y.stockamtidr);

                        //        StockAmtUSD[0] = dtlamt.Where(x => x.transreftype == "Raw").Sum(y => y.stockamtusd);
                        //        StockAmtUSD[1] = dtlamt.Where(x => x.transreftype == "General").Sum(y => y.stockamtusd);
                        //        StockAmtUSD[2] = dtlamt.Where(x => x.transreftype == "Spare Part").Sum(y => y.stockamtusd);
                        //        StockAmtUSD[3] = dtlamt.Where(x => x.transreftype == "Finish Good").Sum(y => y.stockamtusd);
                        //        StockAmtUSD[4] = dtlamt.Where(x => x.transreftype == "Log").Sum(y => y.stockamtusd);
                        //        StockAmtUSD[5] = dtlamt.Where(x => x.transreftype == "Sawn").Sum(y => y.stockamtusd);

                        //        StockAmtIDR2[0] = dtlamt.Where(x => x.transreftype == "Raw").Sum(y => y.stockamtidr_to);
                        //        StockAmtIDR2[1] = dtlamt.Where(x => x.transreftype == "General").Sum(y => y.stockamtidr_to);
                        //        StockAmtIDR2[2] = dtlamt.Where(x => x.transreftype == "Spare Part").Sum(y => y.stockamtidr_to);
                        //        StockAmtIDR2[3] = dtlamt.Where(x => x.transreftype == "Finish Good").Sum(y => y.stockamtidr_to);
                        //        StockAmtIDR2[4] = dtlamt.Where(x => x.transreftype == "Log").Sum(y => y.stockamtidr_to);
                        //        StockAmtIDR2[5] = dtlamt.Where(x => x.transreftype == "Sawn").Sum(y => y.stockamtidr_to);

                        //        StockAmtUSD2[0] = dtlamt.Where(x => x.transreftype == "Raw").Sum(y => y.stockamtusd_to);
                        //        StockAmtUSD2[1] = dtlamt.Where(x => x.transreftype == "General").Sum(y => y.stockamtusd_to);
                        //        StockAmtUSD2[2] = dtlamt.Where(x => x.transreftype == "Spare Part").Sum(y => y.stockamtusd_to);
                        //        StockAmtUSD2[3] = dtlamt.Where(x => x.transreftype == "Finish Good").Sum(y => y.stockamtusd_to);
                        //        StockAmtUSD2[4] = dtlamt.Where(x => x.transreftype == "Log").Sum(y => y.stockamtusd_to);
                        //        StockAmtUSD2[5] = dtlamt.Where(x => x.transreftype == "Sawn").Sum(y => y.stockamtusd_to);

                        //        // Insert QL_conap                        
                        //        db.QL_conap.Add(ClassFunction.InsertConAP(tblmst.cmpcode_to, conapoid, "QL_trnaptransmst", tblmstap.aptransmstoid, 0, suppoid_real, apacctgoid, "Post", "APMTRN", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, dDueDateAP, totalamt, 0, "", "", "", "", Session["UserID"].ToString(), servertime, Session["UserID"].ToString(), servertime, totalamt * cRate.GetRateMonthlyIDRValue, 0, totalamt * cRate.GetRateMonthlyUSDValue, 0, 0, ""));
                        //        db.SaveChanges();

                        //        //Insert QL_conar
                        //        db.QL_conar.Add(ClassFunction.InsertConAR(tblmst.cmpcode, conaroid, "QL_trnartransmst", tblmstar.artransmstoid, 0, custoid_real, aracctgoid, "Post", "ARMTRN", servertime, sPeriod, 0, new DateTime(1900, 01, 01), "", 0, dDueDateAR, totalamt, 0, "", "", "", "", userid, servertime, userid, servertime, totalamt * cRate.GetRateMonthlyIDRValue, 0, totalamt * cRate.GetRateMonthlyUSDValue, 0, 0, ""));

                        //        // Insert QL_trnglmst/Stock
                        //        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(tblmst.cmpcode, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Mat. Transfer|No. " + artransno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
                        //        db.SaveChanges();

                        //        var glseq = 1;
                        //        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(tblmst.cmpcode, gldtloid++, glseq++, glmstoid, aracctgoid, "D", totalamt, artransno, "Mat. Transfer|No. " + artransno, "Post", userid, servertime, totalamt * cRate.GetRateMonthlyIDRValue, totalamt * cRate.GetRateMonthlyUSDValue, "QL_trnartransmst " + artransmstoid.ToString(), null, null, null, 0));
                        //        db.SaveChanges();
                        //        gldtloid++;
                        //        if (selisihamtidr != 0 && selisihamtusd != 0)
                        //        {
                        //            db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(tblmst.cmpcode, gldtloid++, glseq++, glmstoid, selisihacctgoid, (selisihamtidr < 0 ? "D" : "C"), Math.Abs(selisihamtidr), artransno, "Mat. Transfer|No. " + artransno, "Post", userid, servertime, Math.Abs(selisihamtidr), Math.Abs(selisihamtusd), "QL_trnartransmst " + artransmstoid.ToString(), null, null, null, 0));
                        //            db.SaveChanges();
                        //            gldtloid++;
                        //        }
                        //        for (var i = 0; i < iStockAcctgOid.Length; i++)
                        //        {
                        //            if (StockAmtIDR[i] > 0)
                        //            {
                        //                //Stock Out
                        //                db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(tblmst.cmpcode, gldtloid++, glseq++, glmstoid, iStockAcctgOid[i], "C", StockAmtIDR[i], artransno, "Mat. Transfer|No. " + artransno, "Post", userid, servertime, StockAmtIDR[i], StockAmtUSD[i], "QL_trnartransmst " + artransmstoid.ToString(), null, null, null, 0));
                        //                db.SaveChanges();
                        //                gldtloid++;
                        //            }
                        //        }
                        //        glmstoid++;

                        //        glseq = 1;
                        //        // Insert QL_trnglmst/Stock In
                        //        db.QL_trnglmst.Add(ClassFunction.InsertGLMst(tblmst.cmpcode_to, glmstoid, DateTime.Parse(servertime.ToString("MM/dd/yyyy")), sPeriod, "Mat. Transfer|No. " + aptransno, "Post", servertime, userid, servertime, userid, servertime, cRate.GetRateDailyOid, cRate.GetRateMonthlyOid, cRate.GetRateDailyIDRValue, cRate.GetRateMonthlyIDRValue, cRate.GetRateDailyUSDValue, cRate.GetRateMonthlyUSDValue));
                        //        db.SaveChanges();

                        //        for (var i = 0; i < iStockAcctgOid.Length; i++)
                        //        {
                        //            if (StockAmtIDR2[i] > 0)
                        //            {
                        //                //Stock In
                        //                db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(tblmst.cmpcode_to, gldtloid++, glseq++, glmstoid, iStockAcctgOid[i], "D", StockAmtIDR2[i], aptransno, "Mat. Transfer|No. " + aptransno, "Post", userid, servertime, StockAmtIDR2[i], StockAmtUSD2[i], "QL_trnaptransmst " + aptransmstoid.ToString(), null, null, null, 0));
                        //                db.SaveChanges();
                        //                gldtloid++;
                        //            }
                        //        }
                        //        db.QL_trngldtl.Add(ClassFunction.InsertGLDtl(tblmst.cmpcode_to, gldtloid++, glseq++, glmstoid, apacctgoid, "C", totalamt, aptransno, "Mat. Transfer|No. " + aptransno, "Post", userid, servertime, totalamt * cRate.GetRateMonthlyIDRValue, totalamt * cRate.GetRateMonthlyUSDValue, "QL_trnaptransmst " + aptransmstoid.ToString(), null, null, null, 0));
                        //        db.SaveChanges();
                        //        gldtloid++;

                        //        for (var i = 0; i < tbldtl.Count(); i++)
                        //        {
                        //            var matfield = new ReportModels.FullFormType(tbldtl[i].transreftype);
                        //            //Insert QL_conmat Out
                        //            db.QL_conmat.Add(ClassFunction.InsertConMat(tblmst.cmpcode, conmtroid++, "MTRN", "QL_trntransdtl", id, tbldtl[i].transrefoid, matfield.stocktype, tbldtl[i].transfromwhoid, tbldtl[i].transqty * -1, "Material Transfer Out", artransno, userid, null, tbldtl[i].transvalueidr, tbldtl[i].transvalueusd, 0, null, tbldtl[i].transdtloid));

                        //            var matrefoid = tbldtl[i].transrefoid;
                        //            if (tbldtl[i].transreftype == "Log")
                        //                matrefoid = logoid;
                        //            else if (tbldtl[i].transreftype == "Sawn")
                        //                matrefoid = palletoid;

                        //            //Insert QL_conmat In
                        //            db.QL_conmat.Add(ClassFunction.InsertConMat(tblmst.cmpcode_to, conmtroid++, "MTRN", "QL_trntransdtl", id, matrefoid, matfield.stocktype, tbldtl[i].transtowhoid, tbldtl[i].transqty, "Material Transfer In", aptransno, userid, null, tbldtl[i].transpriceidr, tbldtl[i].transpriceusd, 0, null, tbldtl[i].transdtloid));

                        //            // Update/Insert QL_crdmtr Out
                        //            var flagcrd = "";
                        //            QL_crdmtr crdmtr = ClassFunction.UpdateOrInsertCrdMtr(tblmst.cmpcode, crdmatoid, tbldtl[i].transrefoid, matfield.stocktype, tbldtl[i].transfromwhoid, tbldtl[i].transqty * -1, 0, "QL_trntransdtl", userid, null, tbldtl[i].transvalueidr * tbldtl[i].transqty * -1, tbldtl[i].transvalueusd * tbldtl[i].transqty * -1, out flagcrd);
                        //            if (flagcrd == "Update")
                        //                db.Entry(crdmtr).State = EntityState.Modified;
                        //            else
                        //            {
                        //                db.QL_crdmtr.Add(crdmtr);
                        //                crdmatoid++;
                        //            }
                        //            db.SaveChanges();

                        //            // Update/Insert QL_crdmtr In
                        //            crdmtr = ClassFunction.UpdateOrInsertCrdMtr(tblmst.cmpcode_to, crdmatoid, matrefoid, matfield.stocktype, tbldtl[i].transtowhoid, tbldtl[i].transqty, 0, "QL_trntransdtl", userid, null, tbldtl[i].transpriceidr * tbldtl[i].transqty, tbldtl[i].transpriceusd * tbldtl[i].transqty, out flagcrd);
                        //            if (flagcrd == "Update")
                        //                db.Entry(crdmtr).State = EntityState.Modified;
                        //            else
                        //            {
                        //                db.QL_crdmtr.Add(crdmtr);
                        //                crdmatoid++;
                        //            }
                        //            db.SaveChanges();

                        //            // Update/Insert QL_stockvalue Out
                        //            var flagstval = "";
                        //            QL_stockvalue stockvalue = ClassFunction.UpdateOrInsertStockValue(tblmst.cmpcode, stockvaloid, tbldtl[i].transrefoid, matfield.stocktype, tbldtl[i].transqty * -1, tbldtl[i].transvalueidr, tbldtl[i].transvalueusd, "QL_trntransdtl", null, userid, out flagstval);
                        //            if (flagstval == "Update")
                        //                db.Entry(stockvalue).State = EntityState.Modified;
                        //            else
                        //            {
                        //                db.QL_stockvalue.Add(stockvalue);
                        //                stockvaloid++;
                        //            }
                        //            db.SaveChanges();

                        //            // Update/Insert QL_stockvalue In
                        //            stockvalue = ClassFunction.UpdateOrInsertStockValue(tblmst.cmpcode_to, stockvaloid, matrefoid, matfield.stocktype, tbldtl[i].transqty, tbldtl[i].transpriceidr, tbldtl[i].transpriceusd, "QL_trntransdtl", null, userid, out flagstval);
                        //            if (flagstval == "Update")
                        //                db.Entry(stockvalue).State = EntityState.Modified;
                        //            else
                        //            {
                        //                db.QL_stockvalue.Add(stockvalue);
                        //                stockvaloid++;
                        //            }
                        //            db.SaveChanges();

                        //            if (tbldtl[i].transreftype == "Log")
                        //            {
                        //                var transrefoid = tbldtl[i].transrefoid;
                        //                var mstlog = db.QL_mstlog.Where(x => x.cmpcode == tblmst.cmpcode && x.logoid == transrefoid).ToList();
                        //                var logno = mstlog[0].logno;
                        //                var checklogno = db.QL_mstlog.Where(x => x.cmpcode == tblmst.cmpcode_to && x.logno == logno).Select(y => y.logno).FirstOrDefault();
                        //                if (!string.IsNullOrEmpty(checklogno))
                        //                    mstlog[0].logno = mstlog[0].logno + "TR";

                        //                sSql = "INSERT INTO QL_mstlog (cmpcode, logoid, logno, refoid, loglength, logdiameter, logvolume, logpicture, logunitoid, loglocoid, lognote, activeflag, createuser, createtime, upduser, updtime, logres1) VALUES ('" + tblmst.cmpcode_to + "', " + logoid + ", '" + mstlog[0].logno + "', " + mstlog[0].refoid + ", " + mstlog[0].loglength + ", " + mstlog[0].logdiameter + ", " + mstlog[0].logvolume + ", '" + mstlog[0].logpicture + "', " + mstlog[0].logunitoid + ", " + mstlog[0].loglocoid + ", '" + mstlog[0].lognote + "', '" + mstlog[0].activeflag + "', '" + userid + "', '" + servertime + "', '" + userid + "', '" + servertime + "', '" + mstlog[0].logres1 + "')";
                        //                db.Database.ExecuteSqlCommand(sSql);
                        //                logoid++;
                        //            }
                        //            else if (tbldtl[i].transreftype == "Sawn")
                        //            {
                        //                var transrefoid = tbldtl[i].transrefoid;
                        //                var mstpallet = db.QL_mstpallet.Where(x => x.cmpcode == tblmst.cmpcode && x.palletoid == transrefoid).ToList();
                        //                var palletno = mstpallet[0].palletno;
                        //                var paletoid = mstpallet[0].palletoid;
                        //                var mstpalletdtl = db.QL_mstpalletdtl.Where(x => x.cmpcode == tblmst.cmpcode && x.palletoid == paletoid).ToList();
                        //                var checkpalletno = db.QL_mstpallet.Where(x => x.cmpcode == tblmst.cmpcode_to && x.palletno == palletno).Select(y => y.palletno).FirstOrDefault();
                        //                if (!string.IsNullOrEmpty(checkpalletno))
                        //                    mstpallet[0].palletno = mstpallet[0].palletno + "TR";

                        //                sSql = "INSERT INTO QL_mstpallet (cmpcode, palletoid, palletno, palletshortdesc, palletlongdesc, palletlength, palletwidth, palletheight, palletvolume, palletpicturemat, palletunitoid, palletlocoid, palletnote, activeflag, createuser, createtime, upduser, updtime, refoid, palletres1, palletres2) VALUES ('" + tblmst.cmpcode_to + "', " + palletoid + ", '" + mstpallet[0].palletno + "', '" + mstpallet[0].palletshortdesc + "', '" + mstpallet[0].palletlongdesc + "', " + mstpallet[0].palletlength + ", " + mstpallet[0].palletwidth + ", " + mstpallet[0].palletheight + ", " + mstpallet[0].palletvolume + ", '" + mstpallet[0].palletpicturemat + "', " + mstpallet[0].palletunitoid + ", " + mstpallet[0].palletlocoid + ", '" + mstpallet[0].palletnote + "', '" + mstpallet[0].activeflag + "', '" + userid + "', '" + servertime + "', '" + userid + "', '" + servertime + "', " + mstpallet[0].refoid + ", '" + mstpallet[0].palletres1 + "', 'Used')";
                        //                db.Database.ExecuteSqlCommand(sSql);
                        //                if (mstpalletdtl != null)
                        //                {
                        //                    for (var j = 0; j < mstpalletdtl.Count(); j++)
                        //                    {
                        //                        var iSeq = 1;
                        //                        sSql = "INSERT INTO QL_mstpalletdtl (cmpcode, palletdtloid, palletoid, palletdtlseq, palletdtllength, palletdtlwidth, palletdtlheight, palletdtlvolume, palletdtlqty, palletdtlnote, upduser, updtime) VALUES ('" + tblmst.cmpcode_to + "', " + palletdtloid + ", " + palletoid + ", " + iSeq + ", " + mstpalletdtl[j].palletdtllength + ", " + mstpalletdtl[j].palletdtlwidth + ", " + mstpalletdtl[j].palletdtlheight + ", " + mstpalletdtl[j].palletdtlvolume + ", " + mstpalletdtl[j].palletdtlqty + ", '', '" + userid + "', '" + servertime + "')";
                        //                        db.Database.ExecuteSqlCommand(sSql);
                        //                        iSeq++;
                        //                        palletdtloid++;
                        //                    }
                        //                }
                        //                palletoid++;
                        //            }
                        //        }
                        //    }

                        //    //Update Last Oid
                        //    sSql = "UPDATE QL_mstoid SET lastoid=" + conapoid + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conap'";
                        //    db.Database.ExecuteSqlCommand(sSql);
                        //    db.SaveChanges();
                        //    sSql = "UPDATE QL_mstoid SET lastoid=" + conaroid + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conar'";
                        //    db.Database.ExecuteSqlCommand(sSql);
                        //    db.SaveChanges();
                        //    sSql = "UPDATE QL_mstoid SET lastoid=" + (conmtroid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_conmat'";
                        //    db.Database.ExecuteSqlCommand(sSql);
                        //    db.SaveChanges();
                        //    sSql = "UPDATE QL_mstoid SET lastoid=" + (crdmatoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_crdmtr'";
                        //    db.Database.ExecuteSqlCommand(sSql);
                        //    db.SaveChanges();
                        //    sSql = "UPDATE QL_mstoid SET lastoid=" + (stockvaloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_stockvalue'";
                        //    db.Database.ExecuteSqlCommand(sSql);
                        //    db.SaveChanges();
                        //    sSql = "UPDATE QL_mstoid SET lastoid=" + glmstoid + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trnglmst'";
                        //    db.Database.ExecuteSqlCommand(sSql);
                        //    db.SaveChanges();
                        //    sSql = "UPDATE QL_mstoid SET lastoid=" + (gldtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_trngldtl'";
                        //    db.Database.ExecuteSqlCommand(sSql);
                        //    db.SaveChanges();
                        //    sSql = "UPDATE QL_mstoid SET lastoid=" + (logoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_mstlog'";
                        //    db.Database.ExecuteSqlCommand(sSql);
                        //    db.SaveChanges();
                        //    sSql = "UPDATE QL_mstoid SET lastoid=" + (palletoid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_mstpallet'";
                        //    db.Database.ExecuteSqlCommand(sSql);
                        //    db.SaveChanges();
                        //    sSql = "UPDATE QL_mstoid SET lastoid=" + (palletdtloid - 1) + " WHERE cmpcode='" + CompnyCode + "' AND tablename='QL_mstpalletdtl'";
                        //    db.Database.ExecuteSqlCommand(sSql);
                        //    db.SaveChanges();

                        //    Session["QL_trntransdtl_approval"] = null;
                        //}

                        db.SaveChanges();
                        objTrans.Commit();
                    }
                    catch(Exception ex)
                    {
                        objTrans.Rollback();
                        error = ex.ToString();
                    }
                }
            }
        }

        #endregion
    }
}